%!PS-Adobe-2.0
%%Creator: dvips(k) 5.991 Copyright 2011 Radical Eye Software
%%Title: slides.dvi
%%CreationDate: Sun Jul 15 14:44:40 2012
%%Pages: 7
%%PageOrder: Ascend
%%Orientation: Landscape
%%BoundingBox: 0 0 594 792
%%DocumentFonts: NimbusSanL-Regu NimbusSanL-Bold
%%DocumentPaperSizes: Screen
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -P pdf -o /tmp/slides_tmp1.ps slides.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2012.07.15:1444
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 594 2011-10-31 18:13:18Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.09, 2011/10/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep div cvi def
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  XA Shift sub YA Shift sub moveto 
  gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
  Symbol show grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  showpoints 
    { ] aload /Points ED } 
    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    startAngle rotate Symbol show 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} 
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
    Symbol show 
    grestore
  }
  pathforall 
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 490 2011-04-23 09:25:30Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.01, 2011/04/23
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 440 2010-12-28 21:06:39Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.13, 2011/11/21.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

/landplus90 true store

%%BeginPaperSize: letter 
letter
%%EndPaperSize

 /landplus90 true store
 
@fedspecial end
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/UniqueID 5020902 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB391F7C7
C03F47494A607BAF90BBFE31BE2A5E1FBDB07D5BCEE30EC3FE52FF996A595DB1
2AECFA9F05D26DCBE562B2A1AA7A2EB7727816C25E40F84CD33FAD87D505169A
B09895FB0309DD764439C39934618F046342D75079CA0CA06845F1360E4B169D
A93627B7C042CCC9CC6B085F23312C6D95E4C0C857CCF47F94EC543F43BBA04F
0F7F00F2F9D4AD0E3F3F3A4408EED34039982ED5E5664949215B7B7C699903F9
3ABB681EA8787E7960CFCAF502B7A3066310BE7A115CD32D3002B9BA6ACF58E8
A207CB55368FB37E1281E0C898AB1EBCE160ACB6D82AB81483F5A1915A280688
23210451A217BD7ACDCA5E956C06ED7E161A3F03F68E7FAD150709D57E2C98E9
51AAA9B8EEB3F9B7A4187CC29D240F66E4441C9B12242F465EA0DDF91FB928C8
0444AC33182DB4BA1824982D97D74DCDF38C6802A7E8AF3D6BA10D84DCFD9911
E57DDA05695527F3DD0D5AB028F2EAA1AF0AA33A866214210BFC1A241D735F7B
8EA495474EB13B7E92DDE4CA70E9A40924E05A8081B7286A4B72AFDB767192FB
6BFFCA7053E529047DCF50DB179226D7709F7523E4941D09C0B7C2B92A115403
A1AEE8583D64C240F8132E11CC44EA58C1338220B02420D727BE5CA54B9CCF4F
887819BE254E5379BB0B142C9F5FF1F7900E3558E543BCC1639BDA1B958211E6
7189A63DFEBB88CF045C6698DF545E3582797792702E6D6C2C03D7741041EB1F
C42F97F603F3442EE12E1998A0C61554ED8E5B44A2A28992F47C6D9F7AB8F15F
A5C026E63AA09DB99B72224350C95D75C7CACE8EBD27F7D35DB5648DA2CC3ECA
2B491BD18A9889DC7C4433A1C1D0DF8B24B99326958AFD2A3A35416BA3846ABF
A5AB465B897DD644D4F1E1FD5F023E2D5644C22A30435544899E9BC0E70CB56A
01C6C70ACB4BBB484E004AF9EB6558AA5B967B5DD7AFFE4BC7057ADAF76355B3
2C48661C5C193488B2085054662EE3584798CE9E628E0743A26BFA4C2334C2D0
E64590A2482DB65A8C17EE6E58AA79F49495D5555958504B483A40D81E544D20
0A0A4826747B928AD55D445223640E4EC4471C93430A8AB7A43BFFD49C7FCD52
FCAFA6E87C8E5477DCBCAF0C4A2F3B2915D6038CF6B704EA3D7C51048B29A29E
717CFEFBBFEF27C9AF347CC9361A8898697BF00608989EA882F70B836D18B0EB
9BE938F2C0297F0CCDAE33CD388430CB8CAAC0014AD4AEB7FAEAE29F27AE24FD
154835C0F67E8A8A54C3607B8D885616CBB8D37C8DA32E7F7D271AFE9F85C9A8
A8E3EC9918E0D36C9B11CD577F2D13D66CCB453B6E63D9F61C0B7230A8702E64
D4795EE590829384A639134E6E5CC7509F7320A65A0E4CDD45B5D79FDEA3B053
BBE98A21EF1B6C136EA265639DD6958942C5ECB3D9BF5D79A0240FEA017789B6
778DE9A30070364D9C12D14BA281D4B86A09E75409555C913D5439F5772A9EEC
85CD213D408490275B3BCDFB4CCEC7CAEEFB9DA83BF17DF3ECBEC451A9BD1148
335007638F490790948A96A0FF6B4FF87A8AEE7F7DDFD5633C358B08E6B0D348
0F008C9BCA994F26A59F27F10B2A9818C96986BDDDF25B876BACE270CBA67616
3E633C2AAA8700976E7484636B2109AC0CE623A2C92749246D1860D0F7B1DEB1
2474B7916BF102D6D8378CAF6968042FB5CBCA6787D09BE5E447CF0D1B7E5475
B955AF9355D26B7C26D585EA87FE517514571A9435ADCE1AF003CADFD7B1E355
BF972B82862DA457881B23DD556104D279B840F038DEF997F2354B3127CDFB43
CD6A16E08A4AD65EEBFB26C19F76C9138D7823F38F6C6DC4EFFE756B21CC3A94
1C8C84EA273A70114672E7E01D4705C3477AE52E7F20B9EECA1E37180E3818DD
AD253CEA6FC232B937BA91EE872402F442EF11AF60C8905ED3FC39FA8DEB975A
E826C84D50824A68FDA5D471123D94B01AF0790EEC39A83FA2DE6E6BE76B5836
E098D837877AF458685FA8D8E89511584E1F5131F88B9BCB1D4749F64D89929E
CC14A7D29ABE9023AF1FBBE6E40A41C032939A052E758DC38C3515A389CF6060
3870CC333F8C048A9FE374FDD52EB05484EB9C6EE44B2F495F16F84CAB7B62A0
21B803A599687FFB513AC49F560A8562DF7B681227A81DEA640D4DB88BC88EE8
4B1C1066F9743F8B5770B29318BB5B591396E0CD04D194B17EE21391DD30F87A
1665C12367547DC19779483E9271673A4F8549E934CE53A6022DAC5DC6D21C69
BE16DCE375916B43D2160CFE243938F4ADF47EFE633C2803FD9C379C2027D4EB
B1034CC7C4C2EA3F38EDEE544D8D6F848CCFCC9000D9282878E91BE9B0714EAF
CF5DF27DE77EA34549162C2706A0410E89B130248475008C02D6DA640490BC95
4CB82AC5AB32460DCCF1F058271BC1369D6CD0A24F9638811C089B47C0583663
AA42D23A54166A89017D47658CF9D27089DBBA1F14EED4832DDFFDAC5B3220E4
ACD29B79B7CA486BA51A79F422F95C6BE125C4A34B444ECA2A99BF3AFFB86A16
D5F84E41943F8D03E412B1E674AB88F1D6D50FDF751E80E442FBB95166E231C9
F14BF05644DE0D322990DCDDE92C1852F826C5B5F13CCA976850253B0457C71E
0B5050D67D7EB21C649C6A4BDDD53C804D1815746E52FD4530958DE4DFB78E6E
F76E0E8953CA442D14C8EF2FF1B6D6F6A7C080687AF7FDB64905F69524F5F49D
B39946FE816FC1758D61BCA489AB4B5B09703B10E225441F5A6B534706E122A4
D1BD55222A5C994565DA439800EC2B69262C366DF3CA41EB00EC54822E6649DC
367BB0EC5B482647CA4DDEE80420B940008285176ED53B7D995E3CCC70523386
55DCE8E267AA820D4BCB71EEF3823894A05D65CD912FDFBC136C73434213E72B
2A64F22CFA01830E8530C065FF89EDBF4155765A3D56C854841FC7C4FA64EE9D
5D11A88C45625D1FA170F40522391A7ED1EB87B043CE49C86A6B091BCAE8AD24
E0B93821D39CE44F2800CBB0CF83C3B1F74C4C538A54E535F4B0875EBA66BDB2
BC8C42FC4222249BFC3086FD5B25FC1E78B148C678FDBC55476967A91217AD42
0539721EF080D8D7D542482A4C6AD142426DF59D4494A97A84978AF6D1BC20D2
AFEA69843867AA066268EF3A57F3D2B25B8E45BB74799DE640E8FC1801FF19AD
5408C45A9D84059E7A2D285FB3D285B138863B454E3FA711CB6F4D86600BB5BF
34A30ABB0FDA90AC5C043E8164C03B4BDD5A885FBC9BC0CB6AB24AC8F4926153
9C7DC2CD54BFDEF3083CDED7A4C4B3DA34ECD1C1847727D61C0C0E7092E718BC
138C16F0139BB06E0B1F4513CB8BA0791C845DE562BAAA37DA023468C61349D8
46D18DC83B9B0696BCFA1CB01898243E9B7B73567D52CB208E4AC0CD2B962844
D50DC742D690E073575E19EA19E3EDCE4E07CE640FD57362D9D68969EF04D535
17C0CE42B7F3E96AA0B83C663DD84357784B56AC852B9A21AE7EEEA7ADD7C365
A55B0FD25C96C622B0F0D6F6C67FFE7D6DBA479C3BC2185D324D01B4389B4FCC
95930E977B34E852D8278430BD710F00FBEA734E18FAB2DD184C01572B98779A
7CEC14AD20866B39746A948C2D9D5C1DD4E475A1EE282737201419900B0ABC6B
BADC2E02EDDF7709661D6497DD3C4D12A47A45AD121C5AF9370D78298D86CA5B
79092C2B0A16DC56F839FBB0DE0EBCF7319070CF6FB3B77F84AF3FE5E7DFACCE
11AF864BE556ED63168C33E53F13DF4D39C32F79345F1A33DB1606DA6E594206
A53D5949FD0683F70FCA873967C8D60F6BC821A79EBB9FF0FC8730779FA785BF
52A599DCDAD3F913290A139B4C90C39586F5B9915DD19563D4D01187192369B6
08906047868D97D6BF54FE553303D4EC2750FC4ED370AB23F5B4488283378643
1DEA7A18BCE37F94056D90FB799DDFE9EA3E1809E66094AF267C8880853A705B
5B1099BF4245EE3C5749EFF1E3B87017E3D7223A7AC1B6D462B322E4AEC028A0
5AC09CAEC85BABFFADAE9D2AA075174BDD2138FF240DA757492221E1021D72E6
B0C22C5F8C6560DA1D0C1865FB584F3809D27EE21ADF9B12A55971E0B4C2C4BC
DCE453B9D2B2971CAD3846C961B66FD14EC7E5C0D5F46C7533E6E55033D54E89
EF4A45AACBEC382374063B269875B001894E52B87E82E5C36389F83062DDCE48
35DE16007E5E023DEBB35FA6CC4E426F2D9B55FDCA9FA6438E7B43AC8B4A3565
2A53B23CB67E2061EC112283F173AC3150021E50204F6BCD860250EC96B9DB1F
79CACCFCF2570A8F28E93ADD5825AC457EB21EE03D8A3F504790034740433FE9
3E960FC08D8CE4F21E62D49076DC4CAE81058751DF5EC55C6FD14722006263F3
119AED62C0D59DBBF41316B3DF75230DDBA05BF28BD1A02469EF31F852CFF58E
69E2208508F8962F1ECD9D5026D208C28FB0D443C31CE573E446B71DFD00B203
65DC67FD9C065B1990941AE8556A563B372D1B2943AA1CFB184644FE90221EE8
86FBF4ADEAE3F18C1B7A0FE9586D806F45E6DBA53024BCF398C6B3B35F0072FE
75BEB116F9D38F742864D468D0CC6F0D79EDB548888F6ECA7CB58C3B9162E9F6
A9F405A5A15C305DA21EAA9C9C537D9AF0D42E616F93DE977652A8E7590EAD95
83DD6525030439AFFDF6020FCF8BF5A2E36A262F757583A27222C8D08D14B084
F54FD7AD9F514DD24F803D271310598926ADE64BC4C982514F37232C85638249
235FFD6F47BBE721365888F8C51256EE0BD64A435F9FB210E4B3F96ED7E0F7D8
D4CD231C0FFBAA19BA1DF3A619EBC411F789E93D685F4D312E091DD612830F53
786C15B4ABA40A0FD0B274436F87D2244C6AD7ED62FD0AAFE517CD2C56796F0A
39C278E9247746FB935930EEB7F9327AFC555B5AA9691B38D0003E97AAD6313B
9A1D56DEB9C0512ED78A260F4DD84B869CE17B684DDD5F09F4D3D5F2C339B879
572C85A089C5757A12DDE2C52CAABB588E364BA95539DA6BA3F372124B17010E
60F5CAB27EDD38591AB54C6E5554B18DF05AFEE247724BAB608EC6F89C464FD1
270493B410A2BA5415CE41796021171B23C3270A97B5EA9574C4FAB8F16783E8
36360DCAFE11602AD40E0A4D796D738493D7A46A51FF7C34025B40E06FAB808A
5B3806DFAA47777584DDB5FAD8C7AC884D6D7A14A4BBBF8A5EA00F41A3A0442E
6DB020B822C9E9B1C513C525D05E79CF2A862187080B18B5FB84C00F1601D78E
3FA0A5CBDE05267873FBBF07B0B085008ADDCE7F181085CDFE008D76C0C825A6
CBFC9D0AB367180C3F34CB16F5DD6E4954DBF5FF02DE15D2382528359D3B1E7F
A35E3F2F40A9526F9D8EC96FF7E66E3304FECECF3D8CB48ADC94F6348FBD862F
3C35C294EAFAFA4970BA8198C36523BDC155B24750FDBBFC346A501C3D95B559
659BD250016D93CF719873E4C7B23DB56446553CC1E8DAB4AE6038F43A2C6A46
576C1890C3B9686503038E39478C233FB17702C9DCF7B3E51987120721D8E82E
33D28300DC1D97C15EE001941948AE2A7DA5BC000D7B2BF7B46CE2B07C56A357
E99D902740D99D852F324DAD268AC13A67AD9828CA73747DB8BA9B55BEAA3178
5BB1F425B740F3BBE1E1F564B1E7EFC85577C417A1899B46975B11FD114F259E
6238ADDD9664C732E499F6C79879D35A771FF9BC3CA054744F9D12E0C27ADDC6
6AAE342E23A1CAB95239D54D05FD16415D0A5BF1FFA810F64E0A30A89B10415B
5F680256E3710163944CEFD08743BC5E59B4D66AE264CD967AB6EFE69FDEC7AD
1275BFCB7B68922E2004D583B54BE136A0373C323E373A01BC8DAC8CC4FCAB40
708181DBA0A57F9C9CF654E63639900FB487802BB2C664F7CB13CAD825F138CA
2AEC7A918ECFAD2EFB1400260B231C6324222238915466A0FC11A92BE4425CB4
0F0F1110459F036D5A76FFA4300A98D9B857E635CAD32BC4BA00E46184154AC5
7BE97EB08C64E1A15F8CBE39FE91CF21E02155833A9BA46920B92ECA6708904F
C83DF406108905FAF35CB1479D9C3E6D4CA067E15D2907555A3E360D52344182
35D826A6B32AF352CC3E2C88F8E999849C7FEDB4BEDB4660DE6D500EC3426AD9
EBDC0740C1A1B458B9E8D50600CC653480B14A7BB765785DD6C8A423437FAB76
E9F918BB6E9A62EC07AB553C70CB51B384B15CF22AB1F452AA724005FD46B573
39D8B203DC89A7C0A761FAD20F14D3FFC089671F78635CE26CA8BE0BE2DE9292
E52987E5925DD3C81A156FD04C7144BCEF1FD122E42243D9B9082BE8A1B329A2
3CBA26755610DE085844D127A32C87849725A676EB839A6CBBA256AB8580700F
D5CF8AC58434F62A0A81DBF211227E0D67F8713C4EE2E9008E93B79C0F40304B
852F75EC380E2E12BBD4022493D29CD82BDC059A4D4B113B17B7A0CF37AD23EC
AEBA77ADE116DA511A57B38EE826A29D4D6098B6BC3FA7933BFA6C44B3FA5695
13B40459DEC02272579156AFC5C868FB0360B4EFB6876964682801FF2713DD50
CF8BDC1D9E086BAB4E2DFE821291164BB454577D1401050C3F80645C9F2A6C73
B538CE89C897F21FCB9ABEDDEEDA059861F02CF856E79DF2A366294758019616
A7DE70136A35F320A2A322918655391B5DB3A79505FA19C469E689161CB3042A
A458DA6E6BDDE69D97A9AB39E592BCFC9A8F0F668FEDD9C123E95D1E1ADEEA15
62883C0699D073A15DEB9ACFAF5D2FFF712839A3E1347EBA011EB2D7334F4650
0465F8C39BEEC8777D5894AD4D6A5FC9004D8F34585514AD1C6B239575E7B3CD
4F86B45811723612FA81DB72565BD920691BF2B6A7D6C45CF77259B29869740B
2A8864C0E71A8AEA3A9CF21AD6CB5F0533EE9D98C4288A5FF7B26B4A6AD04253
96C1F31F44E1B1447F9205A229CF0B9909666558E59F0F9DE8434A601494DCFE
9C015D2261A95304B69F38B4843BC14B5068B546443B6D455DE011A12040D1D5
57596440246080C0D52E2E7953D4151B8C633BB1EABFAFB4FB6098AB782018C8
375222DB2F2C21CD87E03F3A1BE03A1F518BE994EBAD32A04BECF4B7EBC6E042
6B302FCFC172E1F8F0869B3D8810BAA2ADA7B3ECD34CF92A54B73C2AB89C62B8
8C4ED9C074E2A1074ADBEFFC4E8174C2AAD38CF707CA9F5E166B48716778E92E
5922B3B21D2A8C12AF5BD7F0CC5A97E4BE87496AA399B8C4E03E09181DE21828
65224F7236F0BA9C25F7F6666C5B2C5D15B354FEADB2E525638F0ECFB38A5F19
3CEBBA2CC43B4E655B1C619CA335E2D21CAFA6307C914D71C7D1DDA8EDCBD1CA
692C66AA50416B596D902CB1A82E2CD0366B1DD5363D57775662C738132B07C1
1EE9EAD4401488334B5BF6E80464124BBD646B16FCFCC1DBE44093A2B53F8449
14958C2482EC0519B1E982F42D192C4740E5BFBEBA3023702996562CA5A2FBAB
FC4169368E336282DE1416B01FBABF67E0A75E2A108FEEAFCF0E3209A5F5001E
4E1017D82567DB679777DC8C0D872F9D8494EC3CDF5B008900C81D9508E6E70C
63800853893F5B17F582FFE023B9B76786BD4D120472AC97026C222A3438D8EA
B7D7A1652FEE13351D041E57238EF97533C40FBD452BAA9676CFFAE5FFB6160C
F27C84169F3AF9FB7B644270E2058EBD5771C1F45FE945606727F27F9F6FF119
5235F4D51C3E70B329C1268B04B892587A1CCB4391D61C80696D83707BA577B0
40E4348A3D19ACA1A3E6322F7773923F384B764105455EDDF495891C25358456
65C507917587A96EC995DD3AA0C3B5E36BCC51FFABD8CA95DBD8EBC4717549DA
4406640B561D1FCD11C0B39960B54D1BEF482D3010DF9010505A7E0A5A7A61A1
B5B64174EEED6F62058AECCC4ED2C2131A14675A9DC43147D1AD473FCB5B3EBA
905172ED1436A00F12E288778F774AC3653241B68B4D611FCEBCA25FD1FAF320
BC4187A5A3831C520631B5101EF234877CBE55E81A61C291F901CF8FB44E6464
85A5062B308016D2247711A089BB3AA6B703944C024BE232188F7E154A7ECCE5
D4B7E8E4CCF7F1A61CA68D4F1F3B9120FF46CE5FC819B23011D5CA5618845ED5
85F6AF326227C6C85FBDB7563B9C029FF0C114EA73580902D9941A47ADD6556D
A1188E743ADEA4E4E1387775A30091CFE1935A41D7ABD2F01883A0452BD2BE2D
BB43D001B970797CED7D8842C07E760F8DEC3DF5B277130D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C2D462F1
A71924DC798B57B6D5D13738CB2582F75CA7F1BAE6B9A8B0E31D2AE2C7723DE7
EF1E262B77314B252928C6699442358D53C590CBF6D0C1B406F3DDB54D85FB94
F4F66C7DC21C22595CDB358A007D8CAB42412D8D6638AA0D62613C595D1E9AA5
448AB0EECCCBC6EDAD098CF976BE53A8E2F5D2A4BA6EDA8B1095B381096178C6
DDBDAC4BEEEA9A039505936488E7E94479E6F02D75E2FCBA18607B510B4ED51D
B6F8520C261ED5549FA6287B240C140D3234EFFE4D089D9B450B8E946967403A
D3AE666EA92F348B20011F78FE6D542317CCB82B906D58ABEC0C1485BB092E90
6E7424CC62AA9E61A47258A0C9B8A990E9AF27AB9182812F516DAF8BF9F0F7D9
86B1D4352D3FBA9AE6B0AE4D83681CE09B1BAABAD5DEF2C0EBBEAAE575B67C26
D06A35A0D394EF1A332D55D86418FD79975C870E6D88A5E7E0269BAB29E63CA9
1A99D4E55FB18F6C6A2C175D46C65DE37427737C529217CDFFB40C1CC5E799B3
728AF8D6A742D6FB17DCAE007F67FA45EF0CCFC2AEA3B4E47F70BA2D5AEE9FFA
E5585511048432F2E80E18174791A6E15E13987EB96A2EAC896063C7418B4BCF
C127A9AB30BC2073A5FBF9F7673E1A4D816B85DADE28C0C67A74F8126AE35689
E82EEBD48F301B04F46631626586FD77921C79F575FD55F8C5DB71D0F0661BB1
48ECD50C24465D47ED0FC01110F292DD03458F742E5D683AE6962A9FD11820D3
75EB93355AC26199AD691B6C151921F0224BB5106D833CF37922E07CFED3EB04
70827DFC12722C995F9D7908EB4EB1A43174F69B796A4E32AD623A665C8A060C
64533D2B36D1C2501A00E9AAA7C0B4BF4F92601CD07D583F3D5216D8AA3510EC
DDBE29741201F3B326C4058F2438D94C9A0DA688B13F692FFB9EE32F0F94CC9D
E769CE637C09051029C41C5A021DC3E3809A14E029263DC79B6F998D537E1E4F
59F97F2A13C26713620ABB8A9E63D2692454A9B6A140828C9D09F76BEC0E3417
C58846B36EA8EA698BC11529F972DC2B9D5940DE571877B0A231275AD10DC9D7
145F99F16F9AF65DDC2D2DDA7E57BD2FB7618B4236391216C1F404E089DBE95B
9B5D63507E5C6E25A675C2032F5B70B838E4310670F11870886E1C254A88CACA
2481C23AC80451A2CCB7FC900CF3E81957986D78A1B5C6AF0EECF94EDA1380CD
092EE529170B82672715B6FCCE554DE9BE77149F7CDDEFDF6AD4BC9BF80F3188
A55927B2E7B3FB059814C123CA62478537A6492B618815B78E76D1E3D4AF398B
968C9DFB8B3383BF9817F355C5BF500E0B3E84FE51048A1F95C18A4F2EC34061
6C83094ABA52601C71E2428CAFD2D2017A07E7DB640FE0D42EE6862864F115B8
DC84694B9E10CD61F40B99EB7896F97CCF7F0A72701A3C80B8A0157BEAD7FDAE
FD37AF1686FE239AADDE0D974CB0F1BFC0C03B7A421A81F1B344148D1C44B49B
3E6398E1051D1F85618EC5E8599B2F44BA14C61A71691D7B1085F9BFA5DBD78B
DAB32303B2D7BEC29A113448784AB49BAC0E8B4E338DA70DB34E373B20F89136
385827B7980C2FE0ACB1C6D30BFA2CAA0078EE24881E1271974C7B7A5BB9DDE8
6FC46FC66112A2B4C190CAF25D9965CDFB9BED729527F833F6BC886160E7961E
0ABCAE2F11BFCA9C4A9294A7C3E23262C624102C3B376D9F2C94EEFB9078E600
49489B42606F7BF8F2C0F92CCA49C489AC56BB4FAEB441E5BD54669F9CA83ED2
AA40A2D74F451FEACD30A472C0627E7A26980893FEB5496F9D7C6BDE291A2BB4
189A58850F6F934F53024260F7BD161E90596A2675C1FA1366EC0F779EC1A895
514DE0885D3BA5976E4D90C5AC8E1F236851D7C637B282BB8AE91A707DDD6A08
521385B26038129FA1767A80D4F48B74CC49AF4F31727235189E5E8447B93102
6F9DE17365B3E7D4FB027EB02053CFE52E64DE784FB34F49F8CAB94EFA224E2D
E345C595D2B5FCFD13523E6B1B3FFC9335734F154A694AA2B83A3F9E6F8943E9
8F01CE8EC1B59C02B6440A62E9654ADAC7098E2AB184C1E614FC7006F7515365
C78EFBBF7F675FC4A06F2DCE0A86AD85B58DACAA1B5075D535AB33E72BFDCB84
7408D1CE24CF7ADAB61202F272844DF92CC28D8FAD80AD511F464AD61173E07D
5926E15A353FC4B60BAD1709B7EB900C07C304F646FB7704DFDF783B55A6821F
7861B12877C5B881B63F09F7197EEF370E00450173B754650E85A6C0AAC43731
0F1A7D586CC05048684AF27EF3C09F740310312A3CFC4AA9737766394E6DCD20
2B31E51622EE1C118B40FE0E15AD22D73215F280FF2CEF63C506F7B0E4F0CEA1
92A34CAEC47A37ADBEC739FD624F6776C8D110BEB9C0145F4AB07BD6F2325270
36E2C4C4BDB027AAF56C7B8A44EBE67BB34BECEDFCF123E6F38AE18855D22FA2
B5478D80FCBB49386EB93CB56A14B3B27CB52C1A2FA9E61FE835B2F8FF5AFEAC
7BD6A58C6D53D8689DF05A591B10D88007CA369A83881AC2AA8A4260CBC04064
8C9619E492319BF15511F1829E47990BFB9CB18B8D4E1755E6F464E238029460
3329284A92B34FFB6273EF4FF88A7511228EDA2C11E9B14EAE846A4C8896AF9D
CF50540B7FA76C77CF9D56FD7742C433DF6C88305D28A19E4EB61E217A570FB7
7F0EC4A71EDBB654A14CDEC621C313A702F3F77539B422C29C33C37A4B9D42A9
2A40F98F36057F445FA899C981765438F69A7D990DDE04F92F9E0F00CB13C72C
889C3814C498007AB4156A22792A43A1625BE96300BC09A9614CB7465B022FAA
7CD29DA0F0624AE6119641B022A845297214868CF511A1B5C054CF08BB2A1599
00F4CE357640B13B0C57532648A5E341E6E376A63E8E9780172780B141F2E169
D2E94BD6E749162099864B5DC95173C09068553725ABA9423F4B268C58072244
79D69842B10468046D3114D54BD3389E38DA769C52369F86CE048F4C870A446E
B3E06BFDEF95D17AECA97E8813DDF7E2AFA021A6B5EB84E7D0850954AAFE8465
D8D5634B7599362FDC9BF590AEE75706CEFE4F19FD2970B318B68EB2062D13EE
9D94501A974B8C30379AAF9A5B45C48F503DE04BEBF20EE1847119E030D3014E
D8DC99FE33F7A05469EE84164E7DA8ED1557A74C33496F8D1A112381C573C141
03789F6FAA26FA169C0ECDBDB3F7E1011574D9EBBE4AAFCA34766751B10DDB4C
5C203539D1F5B72F010F93C7C4AD5B083D1CBEA2982FF58FAC1115AFF9379ED9
A7F4FB0B981864735521C9883AA946A7630D1872B721682D9A685A4C4D38AF17
D83D48D8DA59AF0601CAA0E2EF3C40F032A3479DB657451288AB65169FB680A6
188C034F197CF634DB7FF38E00AA0188932ED2F156BE0D910B766B78328F26EE
CE668B4B494650A709D944B39CCD83D6FDE612C8F2A7DA397EA2266945D90776
00B034AC18CEADE312988C0368F9F97276C16FE9E23FC931A1F63B39138A1D92
60DFB5BFAB17082E3976B95DE62B2EFA5A615552C9A12DBE00282091F7A222A3
C55E561C8D69EC8DDECEC753D4715FDF68B71C2B43043292DB3DF219756FF9E7
23F9AF2A8B1BA5D56E4256DE63E8D37E8739ADB2C78C8E2995B370B8B8408506
9E96F22630AF43288B1149ED2098DCB494A11BF22CCBCFF847519FDD0233939F
289D7F48D4E250E37FB7495F715F800C2C1E304C7B834BE7C22D80704B0AF63F
7CAE541FE24E4E67FF4830D2E45C30587065B09977A242AF7FDD68CEDAB99BD8
677BB3AECC8556EF4582AAE6F10DFFB73A3F4F08D437CA780BF0910B2BE9B10E
2E09B7F2814B5A1069613A74DEA74FEDFBB8234E48CAC70D0EB69DF30835B918
AAF2797509A02B5F81989F81C96FE77205D97F9D311E88D0A28CE644FED35FC1
8B8FA683A8775553D9DD5A9F537224D2CD1BC0281FE40CC2D3DD1B36FCCC4680
118BF7A17816E2266EACD9B591B91D2F2969F0B9741DC96D06894B08F7FFE926
00D0BA590BA1F029A88C42F0AC2066654B549D01EF542EAC84511F2895057F1A
ECFB92B4B5713C32B0549273DC7789D4E7AB416021CF1D250647C88B1B70B7A1
6C1574EB2FCF201FE96AC47666FABDB23F7F8866D5971BE06AA630057F4F3A05
D13E75021D7A812DCFDF8C9AB8BBB989FCA84B66F7D1311D4BD9CBDB9FA5F20F
8C5E29086FBC44C82497A9E7C4A6249C8435355FEF913F89FE8C075B071CD30D
197800D063241B190836D5A9CA98BE49CC67BBFBF36CA5654039F3BFDA83A6CD
672E3FE980FB7BF80A06360EF0D88095025D7A154E7FAA68EBE4903C6DEAEDE9
BFBE93365ECD78C45D19F393F2B702D23F57C09A10464816AE987C4C68E281AB
CC821BEFA442C822FFDA8979AB85D4B4B6D4046796B89912BCDBBBEC47EE6787
7FDDED97FD7C1EB2576607B760B8F91E1C340AEAE0376EEC564EB9E63BE5C5ED
5E2A37521A7BE2EF1D993FF5D886428D6BAAC9B03803E47E85B6DCBE5C3346B8
D187E6ABA04AD2601096881C95C05D865422EA9C7B2DC30F5E743E68D43CBD02
A05EA5F95D79FCDD567B753D38121FE0F961528B6CE730949F821F0044F625DE
B27352F77822DE78DEC59CF3014E149FD123908A20280C67B77F80B8EDB74559
658E0FD7C4C97D732FB5C3CE007A0A47079A4B4785A6F1FBA60EBDAE3B4A9D07
B0BB2B3DAC38A1A0311691DD3799A1A82D576157E0F3882158655C4D974E2C81
F8664B375B1CFB942952C5F2D2D75B086D341982E3473DDE35618CC8CDDDF978
CA86B1CBF513E9D04C0D26B5BF02A489072368476F8021428C50AA958499DA41
23F5636FCDE8EF36D3154B85F9782D702C964EB7976BDB0BA9541C3D806BFA4F
B77C5EBDDE4F94D8966C2EBF2705ECCE7B2E59430B1B0E3851718FBA0C69002A
2F803A30B12463D0B6F9282335BF6663088E4AE0AD3683CC0AD3ABF56C483031
F98EF3E463FE107C8966569ECC2EEFB7B6B0D504E8F517D8A4FDC20AADFCEE00
44B15AB9D2E361330420EAD844C7E33655F6847C301EF6C1F15B762A54CF6B15
ECDC61181DC3E4FF38F0FDCCCBF7E53D18F59950D8CB5125F87D0AAC5B497659
BE6D5731BDADAAF31A1C71BCB630EE4DA9912D9EA177508AE3BDFBDB8295B063
3C03151460107829D05298BF33B2DCA4E6C886A5028D97F4F7D0E2A292DA2E73
F56DBFC2992CBBF251F0A8B4D72A0F4E61289E2DB11D0A00E0B79A06A6DEC1AD
627DAC95E5CF4C7AAB186FB0B71BBBE40F4BCAC0AC630982EC0AFCF32390DFC9
2958716C02CAA6CCE48AC446BB347BD4647D65B06B5AC3C4369BEAD2617E82FC
C109E058CC540652F797B43E222A652B77F971A7A05E7F3EBFDA1AB7C0C40276
5548C8E22E9DE9AE7B2FD435DBE68071D0563B201D364E29610F5166731435DC
D24D67DED3C5ADF52EEDE57EF3EAC944D9771BB3A8DCC6A83FBA022CCA31810D
FCCECC6CEBAA73A6DD1C278001D0F08DA33F13C5785D492975FC3219A3777E7F
10A9D6B5D83241B7F894D975C667A0FA65FEB1756534CB0F10FD8F16BEC1557C
877F7F477EFA96A128F2AE82419D88AA208ADC17D2C9489CF6BF32D2A5B6C571
BF0A764C6CF527395C12454104DAA6040C87130987DEB778909204B7401285D6
645237F07B1508D4E4EC8C2EF8E5F422C3E93004833BD515452A712AE299FAE5
5AE792DB3898486F57417F39699C69C22E8D10EB5EA137B582A6D7B19C771056
3A49CC3E4BAA3BC99B46AF82444A8879B3E25D0F3A50A454F902E77CE56A829D
F609FDB96719921283DF733BC68DABD124EFDB611185C32A6D2A7AF606526A88
C75343AD7B3AC6CFE93D97751A8E1836C35A776E1664D7679139F1B6C4EE68F2
C8C05C81F68135DB9F006655879BDBFF9F5FA65F4AAA7A8E15FACF020CCC3D03
04E8E18BCB399923CAAD1FA80328613FABB72B87A7B6BF4FEBD03132F9075C27
1F205407839F70A5CE7E1FC3DE57410DA12E707F36C2DD237344E597FD0D8DC7
A4E23C0F133241F066096999887AD4D12DDD7AE2471463D4570D4E89F4CD31A9
3C312EA4674730416544D9CE252609EFE26FAC8DD9F5440AE71815668FE8942A
36DCDDDF2859681D7B7D5457BB7EEEC2F7DA99F1211013830D7D04F7BB33A2D8
5E408A89C48AB7E8359145EB145DE2C97729897D2EDDA3F8070BDEAB77B1E391
72DF1A3287C67967F5FD0AF513405D71A1206B2E906EF1099DA1BF5D63544226
1A3868D4250A18470A42218EBDF7B90241CFD6FC8CA923049847881947ECEBAE
94FA366C4D482154A650156942BAE47F67EBB46550B21E66E656235F280A19A6
21C678755F62A3B464A0300513DB48355B3D1870DE84AF2FF18085EAEAE51E4D
7B7D66B4481823B60F897FEB3728D703CCB29BB0939391BC57C2EBAA31C57417
80C556BF0708D97515CB6CF112C2A89D2D44816E907415DF0D470C93AD7AAFC9
9AE3D4140BBE5D4B50EE8F570365B7A9FEA84E7236EFBDD4314D896A347430A1
B8925505F7EFD779DC10BEB9C0145F4AB0FBEB2854D3C899BDD78350B877491B
3CCFD0C960338D741DEA6ABA7AC14F357347F3ADB293FB00470F98FE893DC9EC
4C2843089D92515B1671DF4219AC4969C1DC2520D45A586F01FE26B58D3A9AEE
C1EA50C522B5A42C4A99B079ED011928C2CD34AEAB7CBA04422CE1EE9BCED2F9
ED18B8A26187F6738A5F7B8C2E43E8716526220CE629452D507C04521B430E91
019E930CC15B11D2831FD721731C97668C1CD5A609246776E0C844A0E1323D2B
6F8AB106F08C46AC0A2F5E683932FF70104674788FF56255F829D372D558AD60
3AE816B766468F2EF9010C645AF3EDA4152DD9514C249D2D91C6B85DE5C97212
AB2B6DD6319BD88BA7072811E1C7B15E78387008AC279A0E06E6873997A34909
67DCFBB99FFA480FF4A37E4D5C5BA1D48A8A22F2FF86AB80143BC0C81D5A73E5
2C2A145FF2515C0D4B2AF2D9C3047E5DDC31CB8BEE4BD301818B0A158B7895BB
24BFCF21A45C95F7E64231ED108C21F713D83149911CCE2064C0AFB4D935B09F
36A746F900C65F6F7FEE25EC23E5DF02A3787BDB9245562479012E0C471258C4
D46476815F98C8B106FD26F9594B179AFA0C776B5F6027EA3FD56E6B640D8A37
438527404288F7C6CA0AE15AB7B12CD01934F6389BA6CF7F3CD58B9497E494E6
0B465E6E285F1F52CB2486EFCEF4056AD9867F7A54B8C45EF2792E95E89C1174
8ECA9218CD61DBDA0C47F86CEE527F06DCD34EEC4DF4271135B9E5670AACADC4
850842CA1EA09C06DD673C7FF69754E2004587C7908BF1F83B4EB5D4796E422D
4876B9C7866219B6D6DD493857C682911FAE95C49997D9EF0FE2F625ECA41B6B
0DADC77CA33985F18F1CA8EC75B769304876AB3A7A2CBBA8FF79B3D7D389E375
BF2C10363AC4C83104C0ED69E10B1C8F1DD5B5997A086505D37423A21BCCB850
2A0811C2B23F6837ABB59ADE311CE708562A74DBEEC2EC066E1B822B9BF94C6A
721D35DA24F2B2CDEBEFAF930CC9FF1B19CD4578ED27E515FED0D2D3CA5A9FA7
D3C0C93D2185509635711220C8065DFF6342736A73C196D8615C007F63DB5C0C
FB19A0571DD88D5E3FCBE6B273B28F3AE398CCFCD38ECC82D8E2B92384C5CD7F
A2A38D727B1DAD432B00163B2F166FDA22E38A80F7C33AA71DA62C93D261901B
D85493E9139F8AA53DEFF635B3F67E800F2524F59FE88A4F58AE6D6A3D6E347E
E49E80BD3F25F46884A04BB5E691F510BE1FFE419B74C21E00D85850D98A1C5B
7D5EBA4E9C05D6F2380F99D42E6EC1AE284D2D541EA83E41E967DD9A5BFBAC11
BD52FC2907FC7DBFD55D367C490EFE8D0079B60CB07F6BF3930ACFDC84A6665F
8C59C1A22DA307014E6D9A145EBF7FC00CD4157E860D3344590D2C9A75212277
F74FC1EF68FDAD2C33F3A865AD6CCF134D2F4ED78DFEB4B999715D4E216C6588
753A96484E7E70020E0105CCF0474B594406D02954DC7C0320E7EE3896A85134
4E2E554DD3C4990086679C90053975A72D377F81673FF71E08DF604B1984ECB3
202026303055426CDCEB2C89CCFDF761E5D75CDB188AD76459808944194425D4
A68609FE5FEF341451A116BD32E6EE05C034C8EC920655B93EBBAE2B1E2441E6
461B130138089E332620473C14BCEF1F2AF496C600CC5B6E478ABA171C913097
FA3874F8DA1B4755FA29A0A7B9511CA6169F216684A46F026D89DF0DA4059168
ABE33036CDC4FCB96ECD7128D31289A0B630A78EA09B24E246234C780ED92720
FBBDC5AF79588AE35E29478F0C519590C6DEDB807909CDC74318F8AA0D084ECF
A0B07F54C2143F7DD2D87725D1051C7E8344136FB3F8DDA3938AD1DD598684ED
4AD2180F1EC3F64AC76A7070F1256E6D1860112E97A95F374BE53230FE9AD2AE
9B64F31B9C2307AAC4DC38AB4328573F0A8C9A7A0AA2FE672EAAA2005D0A01C5
0A2DBD1FABC895EE397DBB393B769EF7C5E7407A8752BD6323F2ED6E034ED17D
3D440280E1A9B326C468C6763E318A597C57610BC305BD5820C99180E9FB1AC5
C540480F64ED43547AD2751B21039CF330B0929FE2000A3DB94EDA2C70382870
E6D2C92FC9F4A94808973640F6712BF0DC38E426811BE86A9BBB4B518FC3532A
90D998A220A1ACA89C6F5704F73B963765E24FEA77CBD299E76BD454BAEBF482
2304E90A7FFECED7CAAD2A139FF1DB6025CFCA26CA60703F0D372D32E59994ED
7421E98C07A7EE781B141C39E1BF03D488F513560CFFE0A1E918FDD230EFCC69
450151EA5E7709CDDDD23451FEA58078C3C50F3E6A3082E428212F6FFAE0D265
1844199EE0B7B964E81BA54F633E8510C15D369B1AB2914BC4E58474777F1DB9
E4DA7E9D0E1D64D8AD18D1EFCC5B28C9C3F67E19B13247B50519A05452CABD02
AD4126365DBD60D0BC5B2696CEE93C3E00933BA6B8E4296B27B18993033B3833
95342439087E82FD0E87A219778428DDF01014C74EEDC152BD8BB544B57ACFE1
4624985AEB02E1279366192CE4B0230912598318A6F2E8A01F1599F73FC75E49
ACBB69D1B63DD87E605EB529BBB6A658D225F587BCACB146165A0421BE22BAC5
807BB006EDE23DB32C74B49EF2C2BDA980CE4D714A15CB87702A6E6447EF3ADD
94A7D1E820D3E5C857E24D9C19F3C62A8AA71059DF2032E0E94D9994BBD36477
966A93E584529C62CC41D037A84CABB6BDCA12EBFFD49B8D43E491217863CD28
C3E9954612EB03C72C654E57B128B7FB0CC33F273E0201F4ED10C14954B0EE35
878068A30DB126AD63E4E2E562523A5788C3B5489F56AB4726DC750C713D6CE3
60E7B55FA3BB5B29E89C5A0D81873D531DF4FB11A96CA6A6C58E7F61B12A1D5E
B64F9E4A663AAB5E70834D1A8026DAF4CA83EB4C6F9029D57307E41973F798DD
4FAD971A2C57789B62A14E6495882F162A64EA834A49BF595D0939CDD0940DBE
8CCAC28592A1D6A9F90E8ACB3103D22601DF80CC9124BC476F10BE3E1ADCE4A5
209267E30AEA03AA1C9666ACC74B4AC66E18A0A815B73988E6499898BF0E26A3
9319406D3C52A789596DF163D3FE685683A6987B76B821432142A7DF997D38C7
1010694880DC79EE21128B50BB9D9D8A553A84ECB12865BB4BBB15898F10CB7C
BB3D11F2E850435690FE0009F7ED3A74363779A32842B88B5E569DD1764AD2EC
D99E0719C9B9B45A2EB70D598710F642F73D7FF380A413EB402429FEAB3DEC12
3DD6274C8AC859AF19D2FA9B978D7E4AFB1E16928A53F26F20A6B91060C3D97F
63B594AB749177FCDFCFA480B7B1A9DD93F2802747FA9CA39C8CD32ABE8704A4
86FDCCEB8ECC59A8CEF8600232E1F904112094153954904F30B1BAA89C39FAB6
1F06EBAF699531AA088A4FDA9AE6DB8755B8300497AC4B799AE6AEBDD152F439
F4EC52325DDDCE3812945CA5FA521B2D99426C01AD2D6EA0D3DE24537F15AE97
2CB2E833FE987200A496DF4A66ABA19A2B2552F76649AA8A8851C69D49900B63
A99E641C468805D7AFA3A3F6497AAC61DD97CA22FA2437604959D8AE455AC736
B7A31C9FEEB97355E14DC135DB1E7E1B63737A6F2DBCF1C226D11F9D37F9DDD7
083206346B5B8BEBEE30DB38E4735EC6938826237E31E4F34226BA52C45E3455
9F06C7C95140AA21E268BC0A7046647ECE1BCB3EED336B01F7E2108D01B43770
1D753E8279494D51E6EA2E9135F79FE060AB237905097C2ABAC16FF9A53770E6
3F283F1424743D365839D243774BAC9FFB376E0DB720C6BC87AF1DDE409FA2FF
65ACBCD7E8D760CEF31C70314F44EDC4E82FFC35152249C430783831FBA0407E
5B727AEB56F3E40A29A036B493226D92BAFB0065F3B22BB872ED80E6A753F4CB
4D106C180FABD72492459723FAFF039B838612
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 52099151 39074365 2000 8000 8000 (slides.dvi)
@start /Fa 107[807 807 25[1212 1212 1750 1212 1348 674
1212 807 1[1348 1348 1348 2019 538 1212 538 538 1348
1348 674 1348 1348 1212 1348 1348 9[2288 2[1481 3[1617
1886 5[674 1750 17[1348 1348 1348 1348 1348 1348 1348
1[674 1[674 4[538 39[{ TeXBase1Encoding ReEncodeFont }42
2424.24 /NimbusSanL-Regu rf /Fb 140[1348 9[674 3[1348
1481 1348 1[1348 13[1617 10[1750 5[1750 7[807 58[{
 TeXBase1Encoding ReEncodeFont }10 2424.24 /NimbusSanL-Bold
rf /Fc 138[3366 1834 3063 3[3366 3366 4[1531 4[3366 3063
25[1531 73[{ TeXBase1Encoding ReEncodeFont }9 5508.23
/NimbusSanL-Bold rf /Fd 134[1773 1[2480 1[1948 1062 1773
2[1948 1948 1948 2[1773 1[886 1948 1948 1[1773 1948 1773
1[1773 13[2126 2[2126 6[886 4[2302 2[2302 65[{
 TeXBase1Encoding ReEncodeFont }21 3188.04 /NimbusSanL-Bold
rf /Fe 134[1594 1[2302 1[1773 886 1594 1062 1[1773 1773
1773 1[708 1594 1[708 1773 1773 886 1773 1773 1594 1773
1773 12[1948 2126 2[2126 6[886 4[2302 2[2126 8[1773 1773
1773 1773 1773 1773 1773 1773 2[886 1062 45[{
 TeXBase1Encoding ReEncodeFont }36 3188.04 /NimbusSanL-Regu
rf /Ff 134[2127 2127 1[2127 1[1274 2127 1488 1[2337 2337
2337 1[1063 2127 1[1063 2[1274 2127 1[2127 1[2127 18[2762
5[2762 2[2552 1[2762 25[1274 1274 37[2337 2[{
 TeXBase1Encoding ReEncodeFont }23 3825.65 /NimbusSanL-Bold
rf /Fg 134[1107 3[1231 615 1107 737 1[1231 1231 1231
1[491 2[491 3[1231 1231 1[1231 1231 9[2090 6[1477 2[1844
2[1107 20[1231 2[1231 1231 1231 3[615 44[{
 TeXBase1Encoding ReEncodeFont }23 2213.92 /NimbusSanL-Regu
rf /Fh 136[1439 2[554 1[664 1[1108 1108 1[1660 442 2[442
1108 1[554 1108 101[{ TeXBase1Encoding ReEncodeFont }11
1992.53 /NimbusSanL-Regu rf /Fi 137[1477 3[1033 3[1623
2362 5[1623 1[1477 3[1477 23[739 4[1918 68[{
 TeXBase1Encoding ReEncodeFont }9 2656.7 /NimbusSanL-Bold
rf /Fj 134[1913 5[1913 2[2127 2127 2127 4[849 32[2762
22[2127 2127 48[{ TeXBase1Encoding ReEncodeFont }9 3825.65
/NimbusSanL-Regu rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: Screen
/setpagedevice where
{ pop << /PageSize [594 792] >> setpagedevice }
if
%%EndPaperSize
 @landscape end
%%EndSetup
%%Page: 1 1
TeXDict begin @landscape 1 0 bop 8000 5565 a
SDict begin [/Producer (dvips + Distiller)/Title (Hypnosis 101)/Subject
(Hypnosis 101)/Creator (LaTeX with powerdot class)/Author (Dave Ingram)/Keywords
(Hypnosis) /DOCINFO pdfmark end
 8000 5565
a 8000 5565 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 8000 5565 a 0.15 0.15 0.15 TeXcolorrgb
Black -8000 55565 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -8000 55565 a -8000 55565 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -8000
55565 a 0 TeXcolorgray -8000 55565 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -8000 55565 a -8000
55565 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -8000 55565 a -8000 55565 a
SDict begin [/CropBox [0 0 594 842] /PAGES pdfmark end
 -8000 55565 a -8000
55565 a
SDict begin [ {Catalog}<</PageLayout/SinglePage>> /PUT pdfmark end
 -8000 55565 a -8000 55565 a
SDict begin H.S end
 -8000 55565 a -8000
55565 a
SDict begin 13.6 H.A end
 -8000 55565 a -8000 55565 a
SDict begin [/View [/FitH -32768]/Dest (Doc-Start) cvn /DEST pdfmark
end
 -8000 55565 a 0.15 0.15 0.15
TeXcolorrgb -8000 55565 a
SDict begin [/Count 0/Dest (slide.2) cvn/View [/XYZ null null null]/Title
(Hypnosis process) /OUT pdfmark end
 -8000 55565 a -8000 55565 a
SDict begin [/Count 3/Dest (slide.3) cvn/View [/XYZ null null null]/Title
(Inductions) /OUT pdfmark end

-8000 55565 a -8000 55565 a
SDict begin [/Count 0/Dest (slide.4) cvn/View [/XYZ null null null]/Title
(Narrative \(staircase\)) /OUT pdfmark end
 -8000 55565 a -8000 55565
a
SDict begin [/Count 0/Dest (slide.5) cvn/View [/XYZ null null null]/Title
(Eye fixation) /OUT pdfmark end
 -8000 55565 a -8000 55565 a
SDict begin [/Count 0/Dest (slide.6) cvn/View [/XYZ null null null]/Title
(Clock face) /OUT pdfmark end
 -8000 55565 a -8000 55565
a
tx@Dict begin InitOL /TheOL (0) def end
 -8000 55565 a -8000 55565 a
tx@Dict begin (0) BOL end
 -8000 55565 a 2435 x @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 0.0 397.48499 298.11374 .5 Frame
 gsave 0.98 0.98 0.98  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial -8000 58000 a
tx@Dict begin { 198.7425 229.54884 } PutCoor PutBegin  end
 -8000 58000 a
-34836 66856 a
tx@Dict begin CP CP translate 0.8  0.8  scale NET  end
 -34836 66856 a 674 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.79999 SLW 0.20784 0.15686 0.65882  setrgbcolor  0.79999 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 98.61479 49.99924 moveto 98.61479
23.1496 76.84886 1.38367 49.99924 1.38367 curveto 23.1496 1.38367 1.38367
23.1496 1.38367 49.99924 curveto 1.38367 76.84886 23.1496 98.61479
49.99924 98.61479 curveto 76.84886 98.61479 98.61479 76.84886 98.61479
49.99924 curveto closepath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 7.8321 74.34442 moveto
16.52982 89.40929 32.60382 98.68962 50.00114 98.68962 curveto 24.6896
97.36012 3.77492 75.54367 5.24399 49.90396 curveto 6.56862 26.78497
26.5582 7.69743 50.00313 9.17511 curveto 70.92558 10.49376 88.18571
28.65613 86.69775 49.904 curveto 85.38655 68.62762 69.05135 84.06056
50.00307 82.55989 curveto 33.48085 81.25822 19.87427 66.74963 21.39099
49.90396 curveto 22.68015 35.58604 35.36371 23.80374 50.00311 25.3415
curveto 62.11348 26.6136 72.07582 37.47557 70.5092 49.904 curveto 69.26143
59.80287 60.21378 67.95435 50.0031 66.3455 curveto 42.32059 65.13503
35.95972 57.88515 37.63644 49.90398 curveto 38.78323 44.44524 44.27998
39.82254 50.00311 41.62604 curveto 53.21983 42.63972 56.27675 46.56267
54.17087 49.90399 curveto 53.38174 51.15607 50.0031 52.4209 50.04344
49.93275 curveto 47.90407 51.21997 50.68877 53.51355 52.16765 53.5709
curveto 56.11427 53.724 57.98317 49.11516 57.25269 45.82256 curveto
55.95302 39.96445 49.20125 37.51546 43.90045 39.25168 curveto 36.15019
41.79018 33.05205 50.9238 35.84499 58.18228 curveto 39.55704 67.8294
51.14024 71.58917 60.3368 67.72034 curveto 71.88347 62.86285 76.30902
48.80423 71.35553 37.6803 curveto 65.36757 24.23332 48.822 19.14018
35.77774 25.18272 curveto 20.4306 32.29202 14.66907 51.32997 21.80292
66.28946 curveto 30.02744 83.53607 51.56036 89.96631 68.43108 81.74004
curveto 87.57628 72.40471 94.67528 48.37581 85.35605 29.5971 curveto
74.91325 8.5544 48.3882 0.78668 27.70424 11.199 curveto 4.76506 22.7466
-3.67119 51.76747 7.83414 74.35432 curveto closepath gsave 1 1 1  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 94.75398 50.09451
moveto 93.42935 73.2135 73.43977 92.30101 49.99484 90.82336 curveto
29.07239 89.5047 11.81226 71.34233 13.30022 50.09445 curveto 14.6114
31.37085 30.94661 15.93791 49.9949 17.43858 curveto 66.5171 18.74023
80.1237 33.24884 78.60698 50.0945 curveto 77.31783 64.41243 64.63426
76.19473 49.99486 74.65697 curveto 37.8845 73.38486 27.92215 62.5229
29.48877 50.09447 curveto 30.73654 40.1956 39.7842 32.04411 49.99489
33.65295 curveto 57.67738 34.86345 64.03827 42.11333 62.36154 50.09448
curveto 61.21474 55.55322 55.71799 60.17593 49.99486 58.37242 curveto
46.77815 57.35875 43.72122 53.4358 45.82712 50.09448 curveto 46.61624
48.8424 49.99487 47.57758 50.03995 50.07393 curveto 47.90533 48.79492
47.31139 52.35333 48.00114 53.66277 curveto 49.84189 57.15718 54.7677
56.47128 57.25394 54.19235 curveto 61.67738 50.13774 60.42238 43.06607
56.26837 39.34354 curveto 50.19484 33.90086 40.73582 35.7846 35.84625
41.83261 curveto 29.34763 49.8709 31.88318 61.78214 39.83197 67.81216
curveto 49.812 75.38312 64.1999 72.18646 71.35677 62.33464 curveto
80.00821 50.42543 76.14622 33.54999 64.3911 25.2746 curveto 50.5607
15.53824 31.19258 20.0676 21.8042 33.72542 curveto 10.98044 49.47137
16.17816 71.33453 31.73769 81.83186 curveto 49.39491 93.74442 73.75406
87.8779 85.35728 70.41785 curveto 98.35942 50.85277 91.82393 23.99756
72.46461 11.29088 curveto 50.9945 -2.8012 21.64355 4.4032 7.83377 25.65729
curveto 16.52982 10.58917 32.60382 1.30882 49.99707 1.30882 curveto
75.30836 2.63835 96.22305 24.4548 94.75398 50.09451 curveto closepath
gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 27.54459 88.71352
moveto 8.18527 76.00684 1.64978 49.15163 14.65192 29.58655 curveto
26.25514 12.1265 50.61429 6.25998 68.27151 18.17253 curveto 83.83105
28.66986 89.02876 50.53302 78.20502 66.27898 curveto 68.81664 79.9368
49.44852 84.46616 35.6181 74.7298 curveto 23.86298 66.4544 20.00099
49.57896 28.65244 37.66975 curveto 35.8093 27.81793 50.1972 24.62128
60.17725 32.19221 curveto 68.12602 38.22224 70.66159 50.13348 64.16295
58.17178 curveto 59.27339 64.21977 49.81436 66.10352 43.74083 60.66084
curveto 39.58682 56.93832 38.33183 49.86664 42.75528 45.81203 curveto
45.2415 43.53311 50.16733 42.84721 52.00806 46.34163 curveto 52.69781
47.65106 52.10388 51.20946 49.91943 50.00032 curveto 52.09439 48.79118
49.30971 46.49762 47.83081 46.44025 curveto 43.88419 46.28716 42.01529
50.89601 42.74577 54.1886 curveto 44.04546 60.04672 50.79721 62.4957
56.09802 60.75949 curveto 63.84827 58.221 66.94641 49.08737 64.15347
41.82889 curveto 60.44142 32.18176 48.85822 28.422 39.66165 32.29083
curveto 28.115 37.14832 23.68944 51.20694 28.64293 62.33087 curveto
34.63089 75.77785 51.17645 80.87099 64.22072 74.82845 curveto 79.56786
67.71915 85.32939 48.6812 78.19556 33.72171 curveto 69.97102 16.47508
48.43811 10.04486 31.56738 18.27113 curveto 12.42218 27.60646 5.32318
51.63536 14.64241 70.41406 curveto 25.0852 91.45679 51.61026 99.2245
72.29422 88.81216 curveto 95.2334 77.26456 103.66966 48.2437 92.16534
25.65544 curveto 100.86406 40.71889 100.86406 59.27957 92.17007 74.34415
curveto 78.36566 95.6012 49.01471 102.8056 27.54459 88.71352 curveto
closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor  1.59998 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 49.99924 14.60283 moveto 38.91061
25.69145 lineto 40.80235 27.58319 lineto 27.58234 40.80406 lineto 25.6906
38.91147 lineto 14.60197 49.99924 lineto 31.22424 66.62234 lineto 42.3137
55.53458 lineto 38.70251 51.92253 lineto 40.97124 49.65295 lineto 50.34636
59.02893 lineto 48.07764 61.29765 lineto 44.5901 57.81013 lineto 33.50064
68.89874 lineto 49.99924 85.39732 lineto 61.08784 74.30872 lineto 59.19696
72.41698 lineto 72.41527 59.19695 lineto 74.30786 61.0887 lineto 85.39734
49.99924 lineto 68.89874 33.5015 lineto 57.80928 44.5901 lineto 61.2968
48.07764 lineto 59.45197 49.92247 lineto 50.07684 40.5465 lineto 51.92082
38.70251 lineto 55.53203 42.3137 lineto 66.62234 31.22339 lineto 49.99924
14.60283 lineto closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-34162 66856 a
tx@Dict begin { 4.99992 0.0 } PutCoor PutBegin  end
 -34162 66856 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 109.99832 77.49881
moveto 113.59773 77.49881 lineto 113.59773 51.29503 lineto 109.99832
51.29503 lineto 109.99832 77.49881 lineto gsave 0.1 0.1 0.35  setrgbcolor
 1. .setopacityalpha  fill  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 117.14091 55.03842
moveto 117.14091 66.26862 lineto 120.74034 66.26862 lineto 120.74034
55.03842 lineto 117.14091 55.03842 lineto 120.74034 51.29503 moveto
120.74034 55.03842 lineto 131.5386 55.03842 lineto 131.5386 51.29503
lineto 120.74034 51.29503 lineto 120.74034 66.26862 moveto 120.74034
70.01201 lineto 131.5386 70.01201 lineto 131.5386 66.26862 lineto 120.74034
66.26862 lineto 131.5386 55.03842 moveto 131.5386 66.26862 lineto 135.13803
66.26862 lineto 135.13803 55.03842 lineto 131.5386 55.03842 lineto
gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 149.5357 66.26862
moveto 153.13513 66.26862 lineto 153.13513 51.29503 lineto 149.5357
51.29503 lineto 149.5357 66.26862 lineto 138.73744 70.01201 moveto
142.33687 70.01201 lineto 142.33687 51.29503 lineto 138.73744 51.29503
lineto 138.73744 70.01201 lineto 142.33687 70.01201 moveto 149.5357
70.01201 lineto 149.5357 66.26862 lineto 142.33687 66.26862 lineto
142.33687 70.01201 lineto gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 156.67831 66.26862
moveto 160.27774 66.26862 lineto 160.27774 55.03842 lineto 156.67831
55.03842 lineto 156.67831 66.26862 lineto 160.27774 66.26862 moveto
167.47658 66.26862 lineto 167.47658 70.01201 lineto 160.27774 70.01201
lineto 160.27774 66.26862 lineto 160.27774 51.29503 moveto 167.47658
51.29503 lineto 167.47658 55.03842 lineto 160.27774 55.03842 lineto
160.27774 51.29503 lineto 167.47658 77.49881 moveto 171.076 77.49881
lineto 171.076 51.29503 lineto 167.47658 51.29503 lineto 167.47658
77.49881 lineto gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 174.67542 55.03842
moveto 174.67542 66.26862 lineto 178.27484 66.26862 lineto 178.27484
55.03842 lineto 174.67542 55.03842 lineto 178.27484 51.29503 moveto
178.27484 55.03842 lineto 189.0731 55.03842 lineto 189.0731 51.29503
lineto 178.27484 51.29503 lineto 178.27484 66.26862 moveto 178.27484
70.01201 lineto 189.0731 70.01201 lineto 189.0731 66.26862 lineto 178.27484
66.26862 lineto 189.0731 55.03842 moveto 189.0731 66.26862 lineto 192.67253
66.26862 lineto 192.67253 55.03842 lineto 189.0731 55.03842 lineto
gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 207.0702 66.26862
moveto 210.66963 66.26862 lineto 210.66963 51.29503 lineto 207.0702
51.29503 lineto 207.0702 66.26862 lineto 196.27196 70.01201 moveto
199.87138 70.01201 lineto 199.87138 51.29503 lineto 196.27196 51.29503
lineto 196.27196 70.01201 lineto 199.87138 70.01201 moveto 207.0702
70.01201 lineto 207.0702 66.26862 lineto 199.87138 66.26862 lineto
199.87138 70.01201 lineto gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 131.59485 37.47324
moveto 135.19426 37.47324 lineto 135.19426 22.49965 lineto 131.59485
22.49965 lineto 131.59485 37.47324 lineto 124.396 41.21664 moveto 131.59485
41.21664 lineto 131.59485 37.47324 lineto 124.396 37.47324 lineto 124.396
41.21664 lineto 109.99832 41.21664 moveto 113.59773 41.21664 lineto
113.59773 22.49965 lineto 109.99832 22.49965 lineto 109.99832 41.21664
lineto 120.79659 41.21664 moveto 124.396 41.21664 lineto 124.396 22.49965
lineto 120.79659 22.49965 lineto 120.79659 41.21664 lineto 113.59773
41.21664 moveto 120.79659 41.21664 lineto 120.79659 37.47324 lineto
113.59773 37.47324 lineto 113.59773 41.21664 lineto gsave 0.1 0.1 0.35
 setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 138.79369 41.21664
moveto 142.39311 41.21664 lineto 142.39311 22.49965 lineto 138.79369
22.49965 lineto 138.79369 41.21664 lineto 138.79369 47.83958 moveto
142.39311 47.83958 lineto 142.39311 44.09618 lineto 138.79369 44.09618
lineto 138.79369 47.83958 lineto gsave 0.1 0.1 0.35  setrgbcolor  1.
.setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 156.73456 37.47324
moveto 160.33398 37.47324 lineto 160.33398 22.49965 lineto 156.73456
22.49965 lineto 156.73456 37.47324 lineto 145.9363 41.21664 moveto
149.5357 41.21664 lineto 149.5357 22.49965 lineto 145.9363 22.49965
lineto 145.9363 41.21664 lineto 149.5357 41.21664 moveto 156.73456
41.21664 lineto 156.73456 37.47324 lineto 149.5357 37.47324 lineto
149.5357 41.21664 lineto gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 163.87715 37.47324
moveto 167.47658 37.47324 lineto 167.47658 26.24304 lineto 163.87715
26.24304 lineto 163.87715 37.47324 lineto 167.47658 37.47324 moveto
174.67542 37.47324 lineto 174.67542 41.21664 lineto 167.47658 41.21664
lineto 167.47658 37.47324 lineto 167.47658 22.49965 moveto 174.67542
22.49965 lineto 174.67542 26.24304 lineto 167.47658 26.24304 lineto
167.47658 22.49965 lineto 174.67542 48.70345 moveto 178.27484 48.70345
lineto 178.27484 22.49965 lineto 174.67542 22.49965 lineto 174.67542
48.70345 lineto gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 181.87427 48.70345
moveto 185.4737 48.70345 lineto 185.4737 22.49965 lineto 181.87427
22.49965 lineto 181.87427 48.70345 lineto 192.67253 37.47324 moveto
196.27196 37.47324 lineto 196.27196 22.49965 lineto 192.67253 22.49965
lineto 192.67253 37.47324 lineto 185.4737 37.47324 moveto 189.0731
37.47324 lineto 189.0731 33.72984 lineto 185.4737 33.72984 lineto 185.4737
37.47324 lineto 189.0731 41.21664 moveto 192.67253 41.21664 lineto
192.67253 37.47324 lineto 189.0731 37.47324 lineto 189.0731 41.21664
lineto gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha  fill 
grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 203.41455 26.24304
moveto 203.41455 22.49965 lineto 210.6134 22.49965 lineto 210.6134
26.24304 lineto 203.41455 26.24304 lineto 199.81512 26.24304 moveto
203.41455 26.24304 lineto 203.41455 29.98645 lineto 199.81512 29.98645
lineto 199.81512 26.24304 lineto 203.41455 33.72984 moveto 203.41455
29.98645 lineto 210.6134 29.98645 lineto 210.6134 33.72984 lineto 203.41455
33.72984 lineto 210.6134 22.49965 moveto 210.6134 37.47324 lineto 214.21283
37.47324 lineto 214.21283 22.49965 lineto 210.6134 22.49965 lineto
210.6134 37.47324 moveto 210.6134 41.21664 lineto 203.41455 41.21664
lineto 203.41455 37.47324 lineto 210.6134 37.47324 lineto gsave 0.1
0.1 0.35  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 217.756 26.24304 moveto
217.756 37.47324 lineto 221.35542 37.47324 lineto 221.35542 26.24304
lineto 217.756 26.24304 lineto 221.35542 22.49965 moveto 221.35542
26.24304 lineto 228.55426 26.24304 lineto 228.55426 22.49965 lineto
221.35542 22.49965 lineto 221.35542 37.47324 moveto 221.35542 41.21664
lineto 228.55426 41.21664 lineto 228.55426 37.47324 lineto 221.35542
37.47324 lineto 228.55426 26.24304 moveto 228.55426 29.98645 lineto
232.15369 29.98645 lineto 232.15369 26.24304 lineto 228.55426 26.24304
lineto 228.55426 33.72984 moveto 228.55426 37.47324 lineto 232.15369
37.47324 lineto 232.15369 33.72984 lineto 228.55426 33.72984 lineto
gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 235.80936 48.70345
moveto 239.40875 48.70345 lineto 239.40875 22.49965 lineto 235.80936
22.49965 lineto 235.80936 48.70345 lineto 243.00818 37.47324 moveto
246.6076 37.47324 lineto 246.6076 26.24304 lineto 243.00818 26.24304
lineto 243.00818 37.47324 lineto 239.40875 33.72984 moveto 243.00818
33.72984 lineto 243.00818 29.98645 lineto 239.40875 29.98645 lineto
239.40875 33.72984 lineto 246.6076 41.21664 moveto 250.20703 41.21664
lineto 250.20703 37.47324 lineto 246.6076 37.47324 lineto 246.6076
41.21664 lineto 246.6076 26.24304 moveto 250.20703 26.24304 lineto
250.20703 22.49965 lineto 246.6076 22.49965 lineto 246.6076 26.24304
lineto gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha  fill 
grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 253.75021 26.24304
moveto 253.75021 37.47324 lineto 257.34964 37.47324 lineto 257.34964
26.24304 lineto 253.75021 26.24304 lineto 257.34964 22.49965 moveto
257.34964 26.24304 lineto 264.5485 26.24304 lineto 264.5485 22.49965
lineto 257.34964 22.49965 lineto 257.34964 37.47324 moveto 257.34964
41.21664 lineto 264.5485 41.21664 lineto 264.5485 37.47324 lineto 257.34964
37.47324 lineto 257.34964 29.98645 moveto 257.34964 33.72984 lineto
264.5485 33.72984 lineto 264.5485 29.98645 lineto 257.34964 29.98645
lineto 264.5485 33.72984 moveto 264.5485 37.47324 lineto 268.1479 37.47324
lineto 268.1479 33.72984 lineto 264.5485 33.72984 lineto gsave 0.1
0.1 0.35  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 271.69109 41.21664
moveto 275.29051 41.21664 lineto 275.29051 22.49965 lineto 271.69109
22.49965 lineto 271.69109 41.21664 lineto 275.29051 41.21664 moveto
278.88994 41.21664 lineto 278.88994 37.47324 lineto 275.29051 37.47324
lineto 275.29051 41.21664 lineto gsave 0.1 0.1 0.35  setrgbcolor  1.
.setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 293.28761 26.24304
moveto 293.28761 29.98645 lineto 296.88704 29.98645 lineto 296.88704
26.24304 lineto 293.28761 26.24304 lineto 282.48935 22.49965 moveto
282.48935 26.24304 lineto 293.28761 26.24304 lineto 293.28761 22.49965
lineto 282.48935 22.49965 lineto 286.08876 29.98645 moveto 286.08876
33.72984 lineto 293.28761 33.72984 lineto 293.28761 29.98645 lineto
286.08876 29.98645 lineto 282.48935 33.72984 moveto 282.48935 37.47324
lineto 286.08876 37.47324 lineto 286.08876 33.72984 lineto 282.48935
33.72984 lineto 286.08876 37.47324 moveto 286.08876 41.21664 lineto
296.88704 41.21664 lineto 296.88704 37.47324 lineto 286.08876 37.47324
lineto gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha  fill 
grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.1 0.1 0.35  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
-34162 66856 a
tx@Dict begin  PutEnd  end
 -34162 66856 a -34836 66856 a
tx@Dict begin  CP CP translate 1 0.8 div 1 0.8 div scale NET  end
 -34836 66856
a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000 a -8000 58000 a
SDict begin [ {ThisPage}<</Trans << /S /Replace >> >> /PUT pdfmark
end
 -8000 58000
a -8000 58000 a
SDict begin H.S end
 -8000 58000 a -8000 58000 a
SDict begin 13.6 H.A end
 -8000 58000
a -8000 58000 a
SDict begin [/View [/FitH -32768]/Dest (slide.1) cvn /DEST pdfmark
end
 -8000 58000 a -8000 58000 a
tx@Dict begin { 198.7425 169.927 } PutCoor PutBegin  end
 -8000 58000
a 0.15 0.15 0.15 TeXcolorrgb 0.20784 0.15686 0.65882
TeXcolorrgb -19587 60726 a Fj(Hypnosis)1063 b(101)p 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb -15952 69139 a
Fi(Da)-40 b(ve)739 b(Ingram)-14200 72903 y Fh(with)553
b(help)h(from)-23172 76666 y Fg(Matt)616 b(P)-111 b(eperell)616
b(and)g(Morr)33 b(is)616 b(W)-66 b(eb)-22 b(b)-14561
83380 y(J)-44 b(uly)615 b(15,)h(2012)p 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end

-8000 58000 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb eop end
%%Page: 2 2
TeXDict begin @landscape 2 1 bop 0.15 0.15 0.15 TeXcolorrgb
8000 5565 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 8000 5565 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb -8000 55565 a
tx@Dict begin InitOL /TheOL (0) def end
 -8000 55565 a -8000 55565 a
tx@Dict begin (0) BOL end

-8000 55565 a 2435 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 29.81319 397.48499 298.11374 .5 Frame
 gsave 0.98 0.98 0.98  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 0.0 397.48499 29.81319 .5 Frame 
gsave 0.89 0.89 0.89  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0.20784 0.15686 0.65882  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 397.48499 29.81319 0.0 29.81319    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 1.5 SLW 0.20784 0.15686 0.65882
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -8000 58000 a
tx@Dict begin { 3.97266 14.90659 } PutCoor PutBegin  end
 -8000 58000 a
-8000 60491 a
tx@Dict begin CP CP translate 0.225  0.225  scale NET  end
 -8000 60491 a 674 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.79999 SLW 0.20784 0.15686 0.65882  setrgbcolor  0.79999 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 98.61479 49.99924 moveto 98.61479
23.1496 76.84886 1.38367 49.99924 1.38367 curveto 23.1496 1.38367 1.38367
23.1496 1.38367 49.99924 curveto 1.38367 76.84886 23.1496 98.61479
49.99924 98.61479 curveto 76.84886 98.61479 98.61479 76.84886 98.61479
49.99924 curveto closepath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 7.8321 74.34442 moveto
16.52982 89.40929 32.60382 98.68962 50.00114 98.68962 curveto 24.6896
97.36012 3.77492 75.54367 5.24399 49.90396 curveto 6.56862 26.78497
26.5582 7.69743 50.00313 9.17511 curveto 70.92558 10.49376 88.18571
28.65613 86.69775 49.904 curveto 85.38655 68.62762 69.05135 84.06056
50.00307 82.55989 curveto 33.48085 81.25822 19.87427 66.74963 21.39099
49.90396 curveto 22.68015 35.58604 35.36371 23.80374 50.00311 25.3415
curveto 62.11348 26.6136 72.07582 37.47557 70.5092 49.904 curveto 69.26143
59.80287 60.21378 67.95435 50.0031 66.3455 curveto 42.32059 65.13503
35.95972 57.88515 37.63644 49.90398 curveto 38.78323 44.44524 44.27998
39.82254 50.00311 41.62604 curveto 53.21983 42.63972 56.27675 46.56267
54.17087 49.90399 curveto 53.38174 51.15607 50.0031 52.4209 50.04344
49.93275 curveto 47.90407 51.21997 50.68877 53.51355 52.16765 53.5709
curveto 56.11427 53.724 57.98317 49.11516 57.25269 45.82256 curveto
55.95302 39.96445 49.20125 37.51546 43.90045 39.25168 curveto 36.15019
41.79018 33.05205 50.9238 35.84499 58.18228 curveto 39.55704 67.8294
51.14024 71.58917 60.3368 67.72034 curveto 71.88347 62.86285 76.30902
48.80423 71.35553 37.6803 curveto 65.36757 24.23332 48.822 19.14018
35.77774 25.18272 curveto 20.4306 32.29202 14.66907 51.32997 21.80292
66.28946 curveto 30.02744 83.53607 51.56036 89.96631 68.43108 81.74004
curveto 87.57628 72.40471 94.67528 48.37581 85.35605 29.5971 curveto
74.91325 8.5544 48.3882 0.78668 27.70424 11.199 curveto 4.76506 22.7466
-3.67119 51.76747 7.83414 74.35432 curveto closepath gsave 1 1 1  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 94.75398 50.09451
moveto 93.42935 73.2135 73.43977 92.30101 49.99484 90.82336 curveto
29.07239 89.5047 11.81226 71.34233 13.30022 50.09445 curveto 14.6114
31.37085 30.94661 15.93791 49.9949 17.43858 curveto 66.5171 18.74023
80.1237 33.24884 78.60698 50.0945 curveto 77.31783 64.41243 64.63426
76.19473 49.99486 74.65697 curveto 37.8845 73.38486 27.92215 62.5229
29.48877 50.09447 curveto 30.73654 40.1956 39.7842 32.04411 49.99489
33.65295 curveto 57.67738 34.86345 64.03827 42.11333 62.36154 50.09448
curveto 61.21474 55.55322 55.71799 60.17593 49.99486 58.37242 curveto
46.77815 57.35875 43.72122 53.4358 45.82712 50.09448 curveto 46.61624
48.8424 49.99487 47.57758 50.03995 50.07393 curveto 47.90533 48.79492
47.31139 52.35333 48.00114 53.66277 curveto 49.84189 57.15718 54.7677
56.47128 57.25394 54.19235 curveto 61.67738 50.13774 60.42238 43.06607
56.26837 39.34354 curveto 50.19484 33.90086 40.73582 35.7846 35.84625
41.83261 curveto 29.34763 49.8709 31.88318 61.78214 39.83197 67.81216
curveto 49.812 75.38312 64.1999 72.18646 71.35677 62.33464 curveto
80.00821 50.42543 76.14622 33.54999 64.3911 25.2746 curveto 50.5607
15.53824 31.19258 20.0676 21.8042 33.72542 curveto 10.98044 49.47137
16.17816 71.33453 31.73769 81.83186 curveto 49.39491 93.74442 73.75406
87.8779 85.35728 70.41785 curveto 98.35942 50.85277 91.82393 23.99756
72.46461 11.29088 curveto 50.9945 -2.8012 21.64355 4.4032 7.83377 25.65729
curveto 16.52982 10.58917 32.60382 1.30882 49.99707 1.30882 curveto
75.30836 2.63835 96.22305 24.4548 94.75398 50.09451 curveto closepath
gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 27.54459 88.71352
moveto 8.18527 76.00684 1.64978 49.15163 14.65192 29.58655 curveto
26.25514 12.1265 50.61429 6.25998 68.27151 18.17253 curveto 83.83105
28.66986 89.02876 50.53302 78.20502 66.27898 curveto 68.81664 79.9368
49.44852 84.46616 35.6181 74.7298 curveto 23.86298 66.4544 20.00099
49.57896 28.65244 37.66975 curveto 35.8093 27.81793 50.1972 24.62128
60.17725 32.19221 curveto 68.12602 38.22224 70.66159 50.13348 64.16295
58.17178 curveto 59.27339 64.21977 49.81436 66.10352 43.74083 60.66084
curveto 39.58682 56.93832 38.33183 49.86664 42.75528 45.81203 curveto
45.2415 43.53311 50.16733 42.84721 52.00806 46.34163 curveto 52.69781
47.65106 52.10388 51.20946 49.91943 50.00032 curveto 52.09439 48.79118
49.30971 46.49762 47.83081 46.44025 curveto 43.88419 46.28716 42.01529
50.89601 42.74577 54.1886 curveto 44.04546 60.04672 50.79721 62.4957
56.09802 60.75949 curveto 63.84827 58.221 66.94641 49.08737 64.15347
41.82889 curveto 60.44142 32.18176 48.85822 28.422 39.66165 32.29083
curveto 28.115 37.14832 23.68944 51.20694 28.64293 62.33087 curveto
34.63089 75.77785 51.17645 80.87099 64.22072 74.82845 curveto 79.56786
67.71915 85.32939 48.6812 78.19556 33.72171 curveto 69.97102 16.47508
48.43811 10.04486 31.56738 18.27113 curveto 12.42218 27.60646 5.32318
51.63536 14.64241 70.41406 curveto 25.0852 91.45679 51.61026 99.2245
72.29422 88.81216 curveto 95.2334 77.26456 103.66966 48.2437 92.16534
25.65544 curveto 100.86406 40.71889 100.86406 59.27957 92.17007 74.34415
curveto 78.36566 95.6012 49.01471 102.8056 27.54459 88.71352 curveto
closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor  1.59998 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 49.99924 14.60283 moveto 38.91061
25.69145 lineto 40.80235 27.58319 lineto 27.58234 40.80406 lineto 25.6906
38.91147 lineto 14.60197 49.99924 lineto 31.22424 66.62234 lineto 42.3137
55.53458 lineto 38.70251 51.92253 lineto 40.97124 49.65295 lineto 50.34636
59.02893 lineto 48.07764 61.29765 lineto 44.5901 57.81013 lineto 33.50064
68.89874 lineto 49.99924 85.39732 lineto 61.08784 74.30872 lineto 59.19696
72.41698 lineto 72.41527 59.19695 lineto 74.30786 61.0887 lineto 85.39734
49.99924 lineto 68.89874 33.5015 lineto 57.80928 44.5901 lineto 61.2968
48.07764 lineto 59.45197 49.92247 lineto 50.07684 40.5465 lineto 51.92082
38.70251 lineto 55.53203 42.3137 lineto 66.62234 31.22339 lineto 49.99924
14.60283 lineto closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-8000 60491 a
tx@Dict begin  CP CP translate 1 0.225 div 1 0.225 div scale NET  end
 -8000 60491 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
SDict begin [ {ThisPage}<</Trans << /S /Replace >> >> /PUT pdfmark
end
 -8000 58000 a -8000 58000 a
SDict begin H.S end
 -8000 58000
a -8000 58000 a
SDict begin 13.6 H.A end
 -8000 58000 a -8000 58000 a
SDict begin [/View [/FitH -32768]/Dest (slide.2) cvn /DEST pdfmark
end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 19.87546 253.39848 } PutCoor PutBegin  end
 -8000 58000 a 0.20784 0.15686 0.65882
TeXcolorrgb 15162 58369 a Ff(Hypnosis)1065 b(pr)-76 b(ocess)p
0.15 0.15 0.15 TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 5.96202 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 391.52295 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 19.87546 229.54884 } PutCoor PutBegin  end
 -8000 58000 a -8000 61461 a
tx@Dict begin (1) BOL end
 -8000 61461
a 0.15 0.15 0.15 TeXcolorrgb -8000 61461 a
tx@Dict begin (0) BOL end
 -8000 61461
a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb
0.15 0.15 0.15 TeXcolorrgb 18077 61461 a
tx@Dict begin (0) BOL end
 18077 61461
a 18077 61461 a
SDict begin H.S end
 18077 61461 a 18077 61461 a
SDict begin 18 H.A end
 18077 61461
a 18077 61461 a
SDict begin [/View [/FitH -32768]/Dest (Item.1) cvn /DEST pdfmark end
 18077 61461 a 0.15 0.15 0.15 TeXcolorrgb
2271 x Fe(1.)p 0.15 0.15 0.15 TeXcolorrgb 3188 w(Pre-talk)p
0.15 0.15 0.15 TeXcolorrgb 35793 63732 a
tx@Dict begin (0) BOL end
 35793 63732
a 18077 63769 a
SDict begin H.S end
 18077 63769 a 18077 63769 a
SDict begin 18 H.A end
 18077 63769
a 18077 63769 a
SDict begin [/View [/FitH -32768]/Dest (Item.2) cvn /DEST pdfmark end
 18077 63769 a 0.15 0.15 0.15 TeXcolorrgb
3948 x Fe(2.)p 0.15 0.15 0.15 TeXcolorrgb 3188 w(T)-383
b(esting)p 0.15 0.15 0.15 TeXcolorrgb 34881 67717 a
tx@Dict begin (0) BOL end
 34881
67717 a 18077 68426 a
SDict begin H.S end
 18077 68426 a 18077 68426 a
SDict begin 18 H.A end
 18077
68426 a 18077 68426 a
SDict begin [/View [/FitH -32768]/Dest (Item.3) cvn /DEST pdfmark end
 18077 68426 a 0.15 0.15 0.15 TeXcolorrgb
3276 x Fe(3.)p 0.15 0.15 0.15 TeXcolorrgb 3188 w(Induction)p
0.15 0.15 0.15 TeXcolorrgb 37747 71702 a
tx@Dict begin (0) BOL end
 37747 71702
a 18077 71767 a
SDict begin H.S end
 18077 71767 a 18077 71767 a
SDict begin 18 H.A end
 18077 71767
a 18077 71767 a
SDict begin [/View [/FitH -32768]/Dest (Item.4) cvn /DEST pdfmark end
 18077 71767 a 0.15 0.15 0.15 TeXcolorrgb
3920 x Fe(4.)p 0.15 0.15 0.15 TeXcolorrgb 3188 w(Deepening)p
0.15 0.15 0.15 TeXcolorrgb 40227 75687 a
tx@Dict begin (0) BOL end
 40227 75687
a 18077 76397 a
SDict begin H.S end
 18077 76397 a 18077 76397 a
SDict begin 18 H.A end
 18077 76397
a 18077 76397 a
SDict begin [/View [/FitH -32768]/Dest (Item.5) cvn /DEST pdfmark end
 18077 76397 a 0.15 0.15 0.15 TeXcolorrgb
3275 x Fe(5.)p 0.15 0.15 0.15 TeXcolorrgb 3188 w(Suggestion)p
0.15 0.15 0.15 TeXcolorrgb 40760 79672 a
tx@Dict begin (0) BOL end
 40760 79672
a 18077 80382 a
SDict begin H.S end
 18077 80382 a 18077 80382 a
SDict begin 18 H.A end
 18077 80382
a 18077 80382 a
SDict begin [/View [/FitH -32768]/Dest (Item.6) cvn /DEST pdfmark end
 18077 80382 a 0.15 0.15 0.15 TeXcolorrgb
3275 x Fe(6.)p 0.15 0.15 0.15 TeXcolorrgb 3188 w(A)-127
b(w)-48 b(ak)-64 b(ening)p 0.15 0.15 0.15 TeXcolorrgb
40164 83657 a
tx@Dict begin (0) BOL end
 40164 83657 a 18077 84367 a
SDict begin H.S end
 18077 84367
a 18077 84367 a
SDict begin 18 H.A end
 18077 84367 a 18077 84367 a
SDict begin [/View [/FitH -32768]/Dest (Item.7) cvn /DEST pdfmark end
 18077 84367
a 0.15 0.15 0.15 TeXcolorrgb 3275 x Fe(7.)p 0.15 0.15 0.15
TeXcolorrgb 3188 w(P)-159 b(osth)-96 b(ypnotic)p 0.15 0.15 0.15
TeXcolorrgb 42806 87642 a
tx@Dict begin (0) BOL end
 42806 87642 a 18077 88313 a
SDict begin H.S end

18077 88313 a 18077 88313 a
SDict begin 18 H.A end
 18077 88313 a 18077 88313
a
SDict begin [/View [/FitH -32768]/Dest (Item.8) cvn /DEST pdfmark end
 18077 88313 a 0.15 0.15 0.15 TeXcolorrgb 3314 x Fe(8.)p
0.15 0.15 0.15 TeXcolorrgb 3188 w(Debr)48 b(ief)p 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000 a 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb eop end
%%Page: 3 3
TeXDict begin @landscape 3 2 bop 0.15 0.15 0.15 TeXcolorrgb
8000 5565 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 8000 5565 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb -8000 55565 a
tx@Dict begin InitOL /TheOL (0) def end
 -8000 55565 a -8000 55565 a
tx@Dict begin (0) BOL end

-8000 55565 a 2435 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 29.81319 397.48499 298.11374 .5 Frame
 gsave 0.98 0.98 0.98  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 0.0 397.48499 29.81319 .5 Frame 
gsave 0.89 0.89 0.89  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0.20784 0.15686 0.65882  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 397.48499 29.81319 0.0 29.81319    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 1.5 SLW 0.20784 0.15686 0.65882
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -8000 58000 a
tx@Dict begin { 3.97266 14.90659 } PutCoor PutBegin  end
 -8000 58000 a
-8000 60491 a
tx@Dict begin CP CP translate 0.225  0.225  scale NET  end
 -8000 60491 a 674 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.79999 SLW 0.20784 0.15686 0.65882  setrgbcolor  0.79999 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 98.61479 49.99924 moveto 98.61479
23.1496 76.84886 1.38367 49.99924 1.38367 curveto 23.1496 1.38367 1.38367
23.1496 1.38367 49.99924 curveto 1.38367 76.84886 23.1496 98.61479
49.99924 98.61479 curveto 76.84886 98.61479 98.61479 76.84886 98.61479
49.99924 curveto closepath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 7.8321 74.34442 moveto
16.52982 89.40929 32.60382 98.68962 50.00114 98.68962 curveto 24.6896
97.36012 3.77492 75.54367 5.24399 49.90396 curveto 6.56862 26.78497
26.5582 7.69743 50.00313 9.17511 curveto 70.92558 10.49376 88.18571
28.65613 86.69775 49.904 curveto 85.38655 68.62762 69.05135 84.06056
50.00307 82.55989 curveto 33.48085 81.25822 19.87427 66.74963 21.39099
49.90396 curveto 22.68015 35.58604 35.36371 23.80374 50.00311 25.3415
curveto 62.11348 26.6136 72.07582 37.47557 70.5092 49.904 curveto 69.26143
59.80287 60.21378 67.95435 50.0031 66.3455 curveto 42.32059 65.13503
35.95972 57.88515 37.63644 49.90398 curveto 38.78323 44.44524 44.27998
39.82254 50.00311 41.62604 curveto 53.21983 42.63972 56.27675 46.56267
54.17087 49.90399 curveto 53.38174 51.15607 50.0031 52.4209 50.04344
49.93275 curveto 47.90407 51.21997 50.68877 53.51355 52.16765 53.5709
curveto 56.11427 53.724 57.98317 49.11516 57.25269 45.82256 curveto
55.95302 39.96445 49.20125 37.51546 43.90045 39.25168 curveto 36.15019
41.79018 33.05205 50.9238 35.84499 58.18228 curveto 39.55704 67.8294
51.14024 71.58917 60.3368 67.72034 curveto 71.88347 62.86285 76.30902
48.80423 71.35553 37.6803 curveto 65.36757 24.23332 48.822 19.14018
35.77774 25.18272 curveto 20.4306 32.29202 14.66907 51.32997 21.80292
66.28946 curveto 30.02744 83.53607 51.56036 89.96631 68.43108 81.74004
curveto 87.57628 72.40471 94.67528 48.37581 85.35605 29.5971 curveto
74.91325 8.5544 48.3882 0.78668 27.70424 11.199 curveto 4.76506 22.7466
-3.67119 51.76747 7.83414 74.35432 curveto closepath gsave 1 1 1  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 94.75398 50.09451
moveto 93.42935 73.2135 73.43977 92.30101 49.99484 90.82336 curveto
29.07239 89.5047 11.81226 71.34233 13.30022 50.09445 curveto 14.6114
31.37085 30.94661 15.93791 49.9949 17.43858 curveto 66.5171 18.74023
80.1237 33.24884 78.60698 50.0945 curveto 77.31783 64.41243 64.63426
76.19473 49.99486 74.65697 curveto 37.8845 73.38486 27.92215 62.5229
29.48877 50.09447 curveto 30.73654 40.1956 39.7842 32.04411 49.99489
33.65295 curveto 57.67738 34.86345 64.03827 42.11333 62.36154 50.09448
curveto 61.21474 55.55322 55.71799 60.17593 49.99486 58.37242 curveto
46.77815 57.35875 43.72122 53.4358 45.82712 50.09448 curveto 46.61624
48.8424 49.99487 47.57758 50.03995 50.07393 curveto 47.90533 48.79492
47.31139 52.35333 48.00114 53.66277 curveto 49.84189 57.15718 54.7677
56.47128 57.25394 54.19235 curveto 61.67738 50.13774 60.42238 43.06607
56.26837 39.34354 curveto 50.19484 33.90086 40.73582 35.7846 35.84625
41.83261 curveto 29.34763 49.8709 31.88318 61.78214 39.83197 67.81216
curveto 49.812 75.38312 64.1999 72.18646 71.35677 62.33464 curveto
80.00821 50.42543 76.14622 33.54999 64.3911 25.2746 curveto 50.5607
15.53824 31.19258 20.0676 21.8042 33.72542 curveto 10.98044 49.47137
16.17816 71.33453 31.73769 81.83186 curveto 49.39491 93.74442 73.75406
87.8779 85.35728 70.41785 curveto 98.35942 50.85277 91.82393 23.99756
72.46461 11.29088 curveto 50.9945 -2.8012 21.64355 4.4032 7.83377 25.65729
curveto 16.52982 10.58917 32.60382 1.30882 49.99707 1.30882 curveto
75.30836 2.63835 96.22305 24.4548 94.75398 50.09451 curveto closepath
gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 27.54459 88.71352
moveto 8.18527 76.00684 1.64978 49.15163 14.65192 29.58655 curveto
26.25514 12.1265 50.61429 6.25998 68.27151 18.17253 curveto 83.83105
28.66986 89.02876 50.53302 78.20502 66.27898 curveto 68.81664 79.9368
49.44852 84.46616 35.6181 74.7298 curveto 23.86298 66.4544 20.00099
49.57896 28.65244 37.66975 curveto 35.8093 27.81793 50.1972 24.62128
60.17725 32.19221 curveto 68.12602 38.22224 70.66159 50.13348 64.16295
58.17178 curveto 59.27339 64.21977 49.81436 66.10352 43.74083 60.66084
curveto 39.58682 56.93832 38.33183 49.86664 42.75528 45.81203 curveto
45.2415 43.53311 50.16733 42.84721 52.00806 46.34163 curveto 52.69781
47.65106 52.10388 51.20946 49.91943 50.00032 curveto 52.09439 48.79118
49.30971 46.49762 47.83081 46.44025 curveto 43.88419 46.28716 42.01529
50.89601 42.74577 54.1886 curveto 44.04546 60.04672 50.79721 62.4957
56.09802 60.75949 curveto 63.84827 58.221 66.94641 49.08737 64.15347
41.82889 curveto 60.44142 32.18176 48.85822 28.422 39.66165 32.29083
curveto 28.115 37.14832 23.68944 51.20694 28.64293 62.33087 curveto
34.63089 75.77785 51.17645 80.87099 64.22072 74.82845 curveto 79.56786
67.71915 85.32939 48.6812 78.19556 33.72171 curveto 69.97102 16.47508
48.43811 10.04486 31.56738 18.27113 curveto 12.42218 27.60646 5.32318
51.63536 14.64241 70.41406 curveto 25.0852 91.45679 51.61026 99.2245
72.29422 88.81216 curveto 95.2334 77.26456 103.66966 48.2437 92.16534
25.65544 curveto 100.86406 40.71889 100.86406 59.27957 92.17007 74.34415
curveto 78.36566 95.6012 49.01471 102.8056 27.54459 88.71352 curveto
closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor  1.59998 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 49.99924 14.60283 moveto 38.91061
25.69145 lineto 40.80235 27.58319 lineto 27.58234 40.80406 lineto 25.6906
38.91147 lineto 14.60197 49.99924 lineto 31.22424 66.62234 lineto 42.3137
55.53458 lineto 38.70251 51.92253 lineto 40.97124 49.65295 lineto 50.34636
59.02893 lineto 48.07764 61.29765 lineto 44.5901 57.81013 lineto 33.50064
68.89874 lineto 49.99924 85.39732 lineto 61.08784 74.30872 lineto 59.19696
72.41698 lineto 72.41527 59.19695 lineto 74.30786 61.0887 lineto 85.39734
49.99924 lineto 68.89874 33.5015 lineto 57.80928 44.5901 lineto 61.2968
48.07764 lineto 59.45197 49.92247 lineto 50.07684 40.5465 lineto 51.92082
38.70251 lineto 55.53203 42.3137 lineto 66.62234 31.22339 lineto 49.99924
14.60283 lineto closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-8000 60491 a
tx@Dict begin  CP CP translate 1 0.225 div 1 0.225 div scale NET  end
 -8000 60491 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
SDict begin [ {ThisPage}<</Trans << /S /Replace >> >> /PUT pdfmark
end
 -8000 58000 a -8000 58000 a
tx@Dict begin { 19.87546 253.39848 } PutCoor PutBegin  end
 -8000 58000
a 0.20784 0.15686 0.65882 TeXcolorrgb 15162 58369 a Ff(Hypnosis)1065
b(pr)-76 b(ocess)p 0.15 0.15 0.15 TeXcolorrgb -8000 58000
a
tx@Dict begin  PutEnd  end
 -8000 58000 a -8000 58000 a
tx@Dict begin { 5.96202 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000
a
tx@Dict begin  PutEnd  end
 -8000 58000 a -8000 58000 a
tx@Dict begin { 391.52295 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000
a
tx@Dict begin  PutEnd  end
 -8000 58000 a -8000 58000 a
tx@Dict begin { 19.87546 229.54884 } PutCoor PutBegin  end
 -8000 58000 a -8000 61461
a
tx@Dict begin (1) BOL end
 -8000 61461 a 0.15 0.15 0.15 TeXcolorrgb -8000 61461
a
tx@Dict begin (0) BOL end
 -8000 61461 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 18077 61461 a
tx@Dict begin (0) BOL end

18077 61461 a 18077 61461 a
SDict begin H.S end
 18077 61461 a 18077 61461
a
SDict begin 18 H.A end
 18077 61461 a 18077 61461 a
SDict begin [/View [/FitH -32768]/Dest (Item.9) cvn /DEST pdfmark end
 18077 61461 a 0.15 0.15 0.15
TeXcolorrgb 2271 x Fe(1.)p 0.15 0.15 0.15 TeXcolorrgb
3188 w(Pre-talk)p 0.15 0.15 0.15 TeXcolorrgb 35793 63732
a
tx@Dict begin (0) BOL end
 35793 63732 a 18077 63769 a
SDict begin H.S end
 18077 63769 a 18077 63769
a
SDict begin 18 H.A end
 18077 63769 a 18077 63769 a
SDict begin [/View [/FitH -32768]/Dest (Item.10) cvn /DEST pdfmark
end
 18077 63769 a 0.15 0.15 0.15
TeXcolorrgb 3948 x Fe(2.)p 0.15 0.15 0.15 TeXcolorrgb
3188 w(T)-383 b(esting)p 0.15 0.15 0.15 TeXcolorrgb 34881
67717 a
tx@Dict begin (0) BOL end
 34881 67717 a 18077 68426 a
SDict begin H.S end
 18077 68426 a 18077
68426 a
SDict begin 18 H.A end
 18077 68426 a 18077 68426 a
SDict begin [/View [/FitH -32768]/Dest (Item.11) cvn /DEST pdfmark
end
 18077 68426 a 0.15 0.15 0.15
TeXcolorrgb 3276 x Fe(3.)p 0.15 0.15 0.15 TeXcolorrgb
1 0 0 TeXcolorrgb 3188 w Fd(Induction)p 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 39156 71702 a
tx@Dict begin (0) BOL end

39156 71702 a 18077 71767 a
SDict begin H.S end
 18077 71767 a 18077 71767
a
SDict begin 18 H.A end
 18077 71767 a 18077 71767 a
SDict begin [/View [/FitH -32768]/Dest (Item.12) cvn /DEST pdfmark
end
 18077 71767 a 0.15 0.15 0.15
TeXcolorrgb 3920 x Fe(4.)p 0.15 0.15 0.15 TeXcolorrgb
1 0 0 TeXcolorrgb 3188 w Fd(Deepening)p 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 41107 75687 a
tx@Dict begin (0) BOL end

41107 75687 a 18077 76397 a
SDict begin H.S end
 18077 76397 a 18077 76397
a
SDict begin 18 H.A end
 18077 76397 a 18077 76397 a
SDict begin [/View [/FitH -32768]/Dest (Item.13) cvn /DEST pdfmark
end
 18077 76397 a 0.15 0.15 0.15
TeXcolorrgb 3275 x Fe(5.)p 0.15 0.15 0.15 TeXcolorrgb
1 0 0 TeXcolorrgb 3188 w Fd(Sug)-32 b(g)32 b(estion)p
0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb
42169 79672 a
tx@Dict begin (0) BOL end
 42169 79672 a 18077 80382 a
SDict begin H.S end
 18077 80382
a 18077 80382 a
SDict begin 18 H.A end
 18077 80382 a 18077 80382 a
SDict begin [/View [/FitH -32768]/Dest (Item.14) cvn /DEST pdfmark
end
 18077 80382
a 0.15 0.15 0.15 TeXcolorrgb 3275 x Fe(6.)p 0.15 0.15 0.15
TeXcolorrgb 1 0 0 TeXcolorrgb 3188 w Fd(A)-96 b(wakening)p
0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb
41544 83657 a
tx@Dict begin (0) BOL end
 41544 83657 a 18077 84367 a
SDict begin H.S end
 18077 84367
a 18077 84367 a
SDict begin 18 H.A end
 18077 84367 a 18077 84367 a
SDict begin [/View [/FitH -32768]/Dest (Item.15) cvn /DEST pdfmark
end
 18077 84367
a 0.15 0.15 0.15 TeXcolorrgb 3275 x Fe(7.)p 0.15 0.15 0.15
TeXcolorrgb 1 0 0 TeXcolorrgb 3188 w Fd(P)-127 b(osth)-64
b(ypnotic)p 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 44812 87642 a
tx@Dict begin (0) BOL end
 44812 87642 a 18077 88302 a
SDict begin H.S end

18077 88302 a 18077 88302 a
SDict begin 18 H.A end
 18077 88302 a 18077 88302
a
SDict begin [/View [/FitH -32768]/Dest (Item.16) cvn /DEST pdfmark
end
 18077 88302 a 0.15 0.15 0.15 TeXcolorrgb 3325 x Fe(8.)p
0.15 0.15 0.15 TeXcolorrgb 3188 w(Debr)48 b(ief)p 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000 a 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb eop end
%%Page: 4 4
TeXDict begin @landscape 4 3 bop 0.15 0.15 0.15 TeXcolorrgb
8000 5565 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 8000 5565 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb -8000 55565 a
tx@Dict begin InitOL /TheOL (0) def end
 -8000 55565 a -8000 55565 a
tx@Dict begin (0) BOL end

-8000 55565 a 2435 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 29.81319 397.48499 298.11374 .5 Frame
 gsave 0.98 0.98 0.98  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 0.0 397.48499 29.81319 .5 Frame 
gsave 0.89 0.89 0.89  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0.20784 0.15686 0.65882  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 397.48499 29.81319 0.0 29.81319    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 1.5 SLW 0.20784 0.15686 0.65882
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -8000 58000 a
tx@Dict begin { 3.97266 14.90659 } PutCoor PutBegin  end
 -8000 58000 a
-8000 60491 a
tx@Dict begin CP CP translate 0.225  0.225  scale NET  end
 -8000 60491 a 674 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.79999 SLW 0.20784 0.15686 0.65882  setrgbcolor  0.79999 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 98.61479 49.99924 moveto 98.61479
23.1496 76.84886 1.38367 49.99924 1.38367 curveto 23.1496 1.38367 1.38367
23.1496 1.38367 49.99924 curveto 1.38367 76.84886 23.1496 98.61479
49.99924 98.61479 curveto 76.84886 98.61479 98.61479 76.84886 98.61479
49.99924 curveto closepath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 7.8321 74.34442 moveto
16.52982 89.40929 32.60382 98.68962 50.00114 98.68962 curveto 24.6896
97.36012 3.77492 75.54367 5.24399 49.90396 curveto 6.56862 26.78497
26.5582 7.69743 50.00313 9.17511 curveto 70.92558 10.49376 88.18571
28.65613 86.69775 49.904 curveto 85.38655 68.62762 69.05135 84.06056
50.00307 82.55989 curveto 33.48085 81.25822 19.87427 66.74963 21.39099
49.90396 curveto 22.68015 35.58604 35.36371 23.80374 50.00311 25.3415
curveto 62.11348 26.6136 72.07582 37.47557 70.5092 49.904 curveto 69.26143
59.80287 60.21378 67.95435 50.0031 66.3455 curveto 42.32059 65.13503
35.95972 57.88515 37.63644 49.90398 curveto 38.78323 44.44524 44.27998
39.82254 50.00311 41.62604 curveto 53.21983 42.63972 56.27675 46.56267
54.17087 49.90399 curveto 53.38174 51.15607 50.0031 52.4209 50.04344
49.93275 curveto 47.90407 51.21997 50.68877 53.51355 52.16765 53.5709
curveto 56.11427 53.724 57.98317 49.11516 57.25269 45.82256 curveto
55.95302 39.96445 49.20125 37.51546 43.90045 39.25168 curveto 36.15019
41.79018 33.05205 50.9238 35.84499 58.18228 curveto 39.55704 67.8294
51.14024 71.58917 60.3368 67.72034 curveto 71.88347 62.86285 76.30902
48.80423 71.35553 37.6803 curveto 65.36757 24.23332 48.822 19.14018
35.77774 25.18272 curveto 20.4306 32.29202 14.66907 51.32997 21.80292
66.28946 curveto 30.02744 83.53607 51.56036 89.96631 68.43108 81.74004
curveto 87.57628 72.40471 94.67528 48.37581 85.35605 29.5971 curveto
74.91325 8.5544 48.3882 0.78668 27.70424 11.199 curveto 4.76506 22.7466
-3.67119 51.76747 7.83414 74.35432 curveto closepath gsave 1 1 1  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 94.75398 50.09451
moveto 93.42935 73.2135 73.43977 92.30101 49.99484 90.82336 curveto
29.07239 89.5047 11.81226 71.34233 13.30022 50.09445 curveto 14.6114
31.37085 30.94661 15.93791 49.9949 17.43858 curveto 66.5171 18.74023
80.1237 33.24884 78.60698 50.0945 curveto 77.31783 64.41243 64.63426
76.19473 49.99486 74.65697 curveto 37.8845 73.38486 27.92215 62.5229
29.48877 50.09447 curveto 30.73654 40.1956 39.7842 32.04411 49.99489
33.65295 curveto 57.67738 34.86345 64.03827 42.11333 62.36154 50.09448
curveto 61.21474 55.55322 55.71799 60.17593 49.99486 58.37242 curveto
46.77815 57.35875 43.72122 53.4358 45.82712 50.09448 curveto 46.61624
48.8424 49.99487 47.57758 50.03995 50.07393 curveto 47.90533 48.79492
47.31139 52.35333 48.00114 53.66277 curveto 49.84189 57.15718 54.7677
56.47128 57.25394 54.19235 curveto 61.67738 50.13774 60.42238 43.06607
56.26837 39.34354 curveto 50.19484 33.90086 40.73582 35.7846 35.84625
41.83261 curveto 29.34763 49.8709 31.88318 61.78214 39.83197 67.81216
curveto 49.812 75.38312 64.1999 72.18646 71.35677 62.33464 curveto
80.00821 50.42543 76.14622 33.54999 64.3911 25.2746 curveto 50.5607
15.53824 31.19258 20.0676 21.8042 33.72542 curveto 10.98044 49.47137
16.17816 71.33453 31.73769 81.83186 curveto 49.39491 93.74442 73.75406
87.8779 85.35728 70.41785 curveto 98.35942 50.85277 91.82393 23.99756
72.46461 11.29088 curveto 50.9945 -2.8012 21.64355 4.4032 7.83377 25.65729
curveto 16.52982 10.58917 32.60382 1.30882 49.99707 1.30882 curveto
75.30836 2.63835 96.22305 24.4548 94.75398 50.09451 curveto closepath
gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 27.54459 88.71352
moveto 8.18527 76.00684 1.64978 49.15163 14.65192 29.58655 curveto
26.25514 12.1265 50.61429 6.25998 68.27151 18.17253 curveto 83.83105
28.66986 89.02876 50.53302 78.20502 66.27898 curveto 68.81664 79.9368
49.44852 84.46616 35.6181 74.7298 curveto 23.86298 66.4544 20.00099
49.57896 28.65244 37.66975 curveto 35.8093 27.81793 50.1972 24.62128
60.17725 32.19221 curveto 68.12602 38.22224 70.66159 50.13348 64.16295
58.17178 curveto 59.27339 64.21977 49.81436 66.10352 43.74083 60.66084
curveto 39.58682 56.93832 38.33183 49.86664 42.75528 45.81203 curveto
45.2415 43.53311 50.16733 42.84721 52.00806 46.34163 curveto 52.69781
47.65106 52.10388 51.20946 49.91943 50.00032 curveto 52.09439 48.79118
49.30971 46.49762 47.83081 46.44025 curveto 43.88419 46.28716 42.01529
50.89601 42.74577 54.1886 curveto 44.04546 60.04672 50.79721 62.4957
56.09802 60.75949 curveto 63.84827 58.221 66.94641 49.08737 64.15347
41.82889 curveto 60.44142 32.18176 48.85822 28.422 39.66165 32.29083
curveto 28.115 37.14832 23.68944 51.20694 28.64293 62.33087 curveto
34.63089 75.77785 51.17645 80.87099 64.22072 74.82845 curveto 79.56786
67.71915 85.32939 48.6812 78.19556 33.72171 curveto 69.97102 16.47508
48.43811 10.04486 31.56738 18.27113 curveto 12.42218 27.60646 5.32318
51.63536 14.64241 70.41406 curveto 25.0852 91.45679 51.61026 99.2245
72.29422 88.81216 curveto 95.2334 77.26456 103.66966 48.2437 92.16534
25.65544 curveto 100.86406 40.71889 100.86406 59.27957 92.17007 74.34415
curveto 78.36566 95.6012 49.01471 102.8056 27.54459 88.71352 curveto
closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor  1.59998 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 49.99924 14.60283 moveto 38.91061
25.69145 lineto 40.80235 27.58319 lineto 27.58234 40.80406 lineto 25.6906
38.91147 lineto 14.60197 49.99924 lineto 31.22424 66.62234 lineto 42.3137
55.53458 lineto 38.70251 51.92253 lineto 40.97124 49.65295 lineto 50.34636
59.02893 lineto 48.07764 61.29765 lineto 44.5901 57.81013 lineto 33.50064
68.89874 lineto 49.99924 85.39732 lineto 61.08784 74.30872 lineto 59.19696
72.41698 lineto 72.41527 59.19695 lineto 74.30786 61.0887 lineto 85.39734
49.99924 lineto 68.89874 33.5015 lineto 57.80928 44.5901 lineto 61.2968
48.07764 lineto 59.45197 49.92247 lineto 50.07684 40.5465 lineto 51.92082
38.70251 lineto 55.53203 42.3137 lineto 66.62234 31.22339 lineto 49.99924
14.60283 lineto closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-8000 60491 a
tx@Dict begin  CP CP translate 1 0.225 div 1 0.225 div scale NET  end
 -8000 60491 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
SDict begin [ {ThisPage}<</Trans << /S /Replace >> >> /PUT pdfmark
end
 -8000 58000 a -8000 58000 a
SDict begin H.S end
 -8000 58000
a -8000 58000 a
SDict begin 13.6 H.A end
 -8000 58000 a -8000 58000 a
SDict begin [/View [/FitH -32768]/Dest (slide.3) cvn /DEST pdfmark
end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 198.7425 149.05687 } PutCoor PutBegin  end
 -8000 58000 a 0.20784 0.15686 0.65882
TeXcolorrgb -21924 59329 a Fc(Inductions)p 0.15 0.15 0.15
TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000 a -8000 58000 a
tx@Dict begin { 5.96202 4.47151 } PutCoor PutBegin  end

-8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000 a -8000 58000
a
tx@Dict begin { 391.52295 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000 a -8000 58000
a
tx@Dict begin { 19.87546 229.54884 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000 a 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb eop end
%%Page: 5 5
TeXDict begin @landscape 5 4 bop 0.15 0.15 0.15 TeXcolorrgb
8000 5565 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 8000 5565 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb -8000 55565 a
tx@Dict begin InitOL /TheOL (0) def end
 -8000 55565 a -8000 55565 a
tx@Dict begin (0) BOL end

-8000 55565 a 2435 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 29.81319 397.48499 298.11374 .5 Frame
 gsave 0.98 0.98 0.98  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 0.0 397.48499 29.81319 .5 Frame 
gsave 0.89 0.89 0.89  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0.20784 0.15686 0.65882  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 397.48499 29.81319 0.0 29.81319    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 1.5 SLW 0.20784 0.15686 0.65882
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -8000 58000 a
tx@Dict begin { 3.97266 14.90659 } PutCoor PutBegin  end
 -8000 58000 a
-8000 60491 a
tx@Dict begin CP CP translate 0.225  0.225  scale NET  end
 -8000 60491 a 674 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.79999 SLW 0.20784 0.15686 0.65882  setrgbcolor  0.79999 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 98.61479 49.99924 moveto 98.61479
23.1496 76.84886 1.38367 49.99924 1.38367 curveto 23.1496 1.38367 1.38367
23.1496 1.38367 49.99924 curveto 1.38367 76.84886 23.1496 98.61479
49.99924 98.61479 curveto 76.84886 98.61479 98.61479 76.84886 98.61479
49.99924 curveto closepath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 7.8321 74.34442 moveto
16.52982 89.40929 32.60382 98.68962 50.00114 98.68962 curveto 24.6896
97.36012 3.77492 75.54367 5.24399 49.90396 curveto 6.56862 26.78497
26.5582 7.69743 50.00313 9.17511 curveto 70.92558 10.49376 88.18571
28.65613 86.69775 49.904 curveto 85.38655 68.62762 69.05135 84.06056
50.00307 82.55989 curveto 33.48085 81.25822 19.87427 66.74963 21.39099
49.90396 curveto 22.68015 35.58604 35.36371 23.80374 50.00311 25.3415
curveto 62.11348 26.6136 72.07582 37.47557 70.5092 49.904 curveto 69.26143
59.80287 60.21378 67.95435 50.0031 66.3455 curveto 42.32059 65.13503
35.95972 57.88515 37.63644 49.90398 curveto 38.78323 44.44524 44.27998
39.82254 50.00311 41.62604 curveto 53.21983 42.63972 56.27675 46.56267
54.17087 49.90399 curveto 53.38174 51.15607 50.0031 52.4209 50.04344
49.93275 curveto 47.90407 51.21997 50.68877 53.51355 52.16765 53.5709
curveto 56.11427 53.724 57.98317 49.11516 57.25269 45.82256 curveto
55.95302 39.96445 49.20125 37.51546 43.90045 39.25168 curveto 36.15019
41.79018 33.05205 50.9238 35.84499 58.18228 curveto 39.55704 67.8294
51.14024 71.58917 60.3368 67.72034 curveto 71.88347 62.86285 76.30902
48.80423 71.35553 37.6803 curveto 65.36757 24.23332 48.822 19.14018
35.77774 25.18272 curveto 20.4306 32.29202 14.66907 51.32997 21.80292
66.28946 curveto 30.02744 83.53607 51.56036 89.96631 68.43108 81.74004
curveto 87.57628 72.40471 94.67528 48.37581 85.35605 29.5971 curveto
74.91325 8.5544 48.3882 0.78668 27.70424 11.199 curveto 4.76506 22.7466
-3.67119 51.76747 7.83414 74.35432 curveto closepath gsave 1 1 1  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 94.75398 50.09451
moveto 93.42935 73.2135 73.43977 92.30101 49.99484 90.82336 curveto
29.07239 89.5047 11.81226 71.34233 13.30022 50.09445 curveto 14.6114
31.37085 30.94661 15.93791 49.9949 17.43858 curveto 66.5171 18.74023
80.1237 33.24884 78.60698 50.0945 curveto 77.31783 64.41243 64.63426
76.19473 49.99486 74.65697 curveto 37.8845 73.38486 27.92215 62.5229
29.48877 50.09447 curveto 30.73654 40.1956 39.7842 32.04411 49.99489
33.65295 curveto 57.67738 34.86345 64.03827 42.11333 62.36154 50.09448
curveto 61.21474 55.55322 55.71799 60.17593 49.99486 58.37242 curveto
46.77815 57.35875 43.72122 53.4358 45.82712 50.09448 curveto 46.61624
48.8424 49.99487 47.57758 50.03995 50.07393 curveto 47.90533 48.79492
47.31139 52.35333 48.00114 53.66277 curveto 49.84189 57.15718 54.7677
56.47128 57.25394 54.19235 curveto 61.67738 50.13774 60.42238 43.06607
56.26837 39.34354 curveto 50.19484 33.90086 40.73582 35.7846 35.84625
41.83261 curveto 29.34763 49.8709 31.88318 61.78214 39.83197 67.81216
curveto 49.812 75.38312 64.1999 72.18646 71.35677 62.33464 curveto
80.00821 50.42543 76.14622 33.54999 64.3911 25.2746 curveto 50.5607
15.53824 31.19258 20.0676 21.8042 33.72542 curveto 10.98044 49.47137
16.17816 71.33453 31.73769 81.83186 curveto 49.39491 93.74442 73.75406
87.8779 85.35728 70.41785 curveto 98.35942 50.85277 91.82393 23.99756
72.46461 11.29088 curveto 50.9945 -2.8012 21.64355 4.4032 7.83377 25.65729
curveto 16.52982 10.58917 32.60382 1.30882 49.99707 1.30882 curveto
75.30836 2.63835 96.22305 24.4548 94.75398 50.09451 curveto closepath
gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 27.54459 88.71352
moveto 8.18527 76.00684 1.64978 49.15163 14.65192 29.58655 curveto
26.25514 12.1265 50.61429 6.25998 68.27151 18.17253 curveto 83.83105
28.66986 89.02876 50.53302 78.20502 66.27898 curveto 68.81664 79.9368
49.44852 84.46616 35.6181 74.7298 curveto 23.86298 66.4544 20.00099
49.57896 28.65244 37.66975 curveto 35.8093 27.81793 50.1972 24.62128
60.17725 32.19221 curveto 68.12602 38.22224 70.66159 50.13348 64.16295
58.17178 curveto 59.27339 64.21977 49.81436 66.10352 43.74083 60.66084
curveto 39.58682 56.93832 38.33183 49.86664 42.75528 45.81203 curveto
45.2415 43.53311 50.16733 42.84721 52.00806 46.34163 curveto 52.69781
47.65106 52.10388 51.20946 49.91943 50.00032 curveto 52.09439 48.79118
49.30971 46.49762 47.83081 46.44025 curveto 43.88419 46.28716 42.01529
50.89601 42.74577 54.1886 curveto 44.04546 60.04672 50.79721 62.4957
56.09802 60.75949 curveto 63.84827 58.221 66.94641 49.08737 64.15347
41.82889 curveto 60.44142 32.18176 48.85822 28.422 39.66165 32.29083
curveto 28.115 37.14832 23.68944 51.20694 28.64293 62.33087 curveto
34.63089 75.77785 51.17645 80.87099 64.22072 74.82845 curveto 79.56786
67.71915 85.32939 48.6812 78.19556 33.72171 curveto 69.97102 16.47508
48.43811 10.04486 31.56738 18.27113 curveto 12.42218 27.60646 5.32318
51.63536 14.64241 70.41406 curveto 25.0852 91.45679 51.61026 99.2245
72.29422 88.81216 curveto 95.2334 77.26456 103.66966 48.2437 92.16534
25.65544 curveto 100.86406 40.71889 100.86406 59.27957 92.17007 74.34415
curveto 78.36566 95.6012 49.01471 102.8056 27.54459 88.71352 curveto
closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor  1.59998 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 49.99924 14.60283 moveto 38.91061
25.69145 lineto 40.80235 27.58319 lineto 27.58234 40.80406 lineto 25.6906
38.91147 lineto 14.60197 49.99924 lineto 31.22424 66.62234 lineto 42.3137
55.53458 lineto 38.70251 51.92253 lineto 40.97124 49.65295 lineto 50.34636
59.02893 lineto 48.07764 61.29765 lineto 44.5901 57.81013 lineto 33.50064
68.89874 lineto 49.99924 85.39732 lineto 61.08784 74.30872 lineto 59.19696
72.41698 lineto 72.41527 59.19695 lineto 74.30786 61.0887 lineto 85.39734
49.99924 lineto 68.89874 33.5015 lineto 57.80928 44.5901 lineto 61.2968
48.07764 lineto 59.45197 49.92247 lineto 50.07684 40.5465 lineto 51.92082
38.70251 lineto 55.53203 42.3137 lineto 66.62234 31.22339 lineto 49.99924
14.60283 lineto closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-8000 60491 a
tx@Dict begin  CP CP translate 1 0.225 div 1 0.225 div scale NET  end
 -8000 60491 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
SDict begin [ {ThisPage}<</Trans << /S /Replace >> >> /PUT pdfmark
end
 -8000 58000 a -8000 58000 a
SDict begin H.S end
 -8000 58000
a -8000 58000 a
SDict begin 13.6 H.A end
 -8000 58000 a -8000 58000 a
SDict begin [/View [/FitH -32768]/Dest (slide.4) cvn /DEST pdfmark
end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 19.87546 253.39848 } PutCoor PutBegin  end
 -8000 58000 a 0.20784 0.15686 0.65882
TeXcolorrgb 13247 58369 a Ff(Narrative)1064 b(\(stair)-76
b(case\))p 0.15 0.15 0.15 TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000
58000 a -8000 58000 a
tx@Dict begin { 5.96202 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000
58000 a -8000 58000 a
tx@Dict begin { 391.52295 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000
58000 a -8000 58000 a
tx@Dict begin { 19.87546 229.54884 } PutCoor PutBegin  end
 -8000 58000 a 2377 x Fb(Basic)674
b(idea:)1343 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
0 0.6 0 TeXcolorrgb(H)p 0.15 0.15 0.15 TeXcolorrgb 1184
w Fa(talks)1373 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 0.4  setrgbcolor    7.30356  2 div 7.988  0.1368  add
2 div 2 copy 0.1368  sub 4 2 roll Pyth 0.5 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0 0 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
0 0 0.4 TeXcolorrgb Fb(S)p 0.15 0.15 0.15 TeXcolorrgb
1373 w Fa(through)673 b(a)h(stor)73 b(y)-242 b(,)673
b(such)h(as)g(descending)f(a)h(staircase)-36 b(,)-8000
63388 y(introducing)674 b(suggestions)g(of)f(relaxation.)-8000
63927 y
tx@Dict begin (1) BOL end
 -8000 63927 a 0.15 0.15 0.15 TeXcolorrgb -8000
63927 a
tx@Dict begin (0) BOL end
 -8000 63927 a -8000 65698 a
SDict begin H.S end
 -8000 65698 a -8000
65698 a
SDict begin 13.6 H.A end
 -8000 65698 a -8000 65698 a
SDict begin [/View [/FitH -32768]/Dest (Item.17) cvn /DEST pdfmark
end
 -8000 65698 a 0.15 0.15 0.15
TeXcolorrgb 2472 x Fa(1.)p 0.15 0.15 0.15 TeXcolorrgb
2934 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0.6 0
TeXcolorrgb Fb(H)p 0.15 0.15 0.15 TeXcolorrgb 1183 w
Fa(e)-73 b(xplains)674 b(the)g(idea)g(to)1372 b @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 0.4  setrgbcolor    7.30356  2 div 7.988  0.1368  add
2 div 2 copy 0.1368  sub 4 2 roll Pyth 0.5 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0 0 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0 0.4 TeXcolorrgb Fb(S)p 0.15 0.15 0.15
TeXcolorrgb 1373 w Fa(and)673 b(asks)i(them)e(to)h(close)g(their)g(e)
-48 b(y)g(es)673 b(to)h(star)97 b(t)p 0.15 0.15 0.15
TeXcolorrgb 69800 68170 a
tx@Dict begin (0) BOL end
 69800 68170 a -8000 68808 a
SDict begin H.S end

-8000 68808 a -8000 68808 a
SDict begin 13.6 H.A end
 -8000 68808 a -8000 68808
a
SDict begin [/View [/FitH -32768]/Dest (Item.18) cvn /DEST pdfmark
end
 -8000 68808 a 0.15 0.15 0.15 TeXcolorrgb 2373 x Fa(2.)p
0.15 0.15 0.15 TeXcolorrgb 2425 w(\223Imagine)674 b(y)-48
b(ourself)673 b(at)h(the)f(top)h(of)g(a)f(staircase)-36
b(,)674 b(stretching)g(a)-48 b(w)-36 b(a)-73 b(y)674
b(in)g(front)f(of)-3553 74192 y(y)-48 b(ou.)-242 b(\224)p
0.15 0.15 0.15 TeXcolorrgb 2379 74192 a
tx@Dict begin (0) BOL end
 2379 74192 a
-8000 74702 a
SDict begin H.S end
 -8000 74702 a -8000 74702 a
SDict begin 13.6 H.A end
 -8000 74702
a -8000 74702 a
SDict begin [/View [/FitH -32768]/Dest (Item.19) cvn /DEST pdfmark
end
 -8000 74702 a 0.15 0.15 0.15 TeXcolorrgb
2501 x Fa(3.)p 0.15 0.15 0.15 TeXcolorrgb 2425 w(\223I'm)674
b(going)g(to)f(count)h(from)g(10)g(do)-36 b(wn)673 b(to)h(1,)g(and)f(I)
h(w)-36 b(ant)674 b(y)-48 b(ou)673 b(to)h(imagine)-3553
80214 y(heading)f(do)-36 b(wn)673 b(that)h(staircase)-36
b(.)833 b(When)674 b(I)g(reach)g(1)g(y)-48 b(ou'll)674
b(be)f(at)h(the)g(bottom.)-242 b(\224)p 0.15 0.15 0.15
TeXcolorrgb 70918 80214 a
tx@Dict begin (0) BOL end
 70918 80214 a -8000 80753 a
SDict begin H.S end

-8000 80753 a -8000 80753 a
SDict begin 13.6 H.A end
 -8000 80753 a -8000 80753
a
SDict begin [/View [/FitH -32768]/Dest (Item.20) cvn /DEST pdfmark
end
 -8000 80753 a 0.15 0.15 0.15 TeXcolorrgb 2472 x Fa(4.)p
0.15 0.15 0.15 TeXcolorrgb 2934 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 0 0.6 0 TeXcolorrgb Fb(H)p 0.15 0.15 0.15
TeXcolorrgb 1183 w Fa(talks)674 b(the)g(person)g(do)-36
b(wn)673 b(through)g(the)h(n)-24 b(umbers)-36 b(,)673
b(giving)h(suggestions)g(of)-3553 86236 y(slo)-36 b(w)674
b(relaxation)f(across)i(the)e(body)p 0.15 0.15 0.15 TeXcolorrgb
30902 86236 a
tx@Dict begin (0) BOL end
 30902 86236 a -8000 86746 a
SDict begin H.S end
 -8000 86746
a -8000 86746 a
SDict begin 13.6 H.A end
 -8000 86746 a -8000 86746 a
SDict begin [/View [/FitH -32768]/Dest (Item.21) cvn /DEST pdfmark
end
 -8000 86746
a 0.15 0.15 0.15 TeXcolorrgb 2500 x Fa(5.)p 0.15 0.15 0.15
TeXcolorrgb 2425 w(P)-121 b(erhaps)673 b(star)97 b(t)674
b(with)g(the)g(nec)-48 b(k,)673 b(then)g(shoulders)-36
b(,)674 b(ar)61 b(ms)-36 b(,)674 b(torso)-97 b(,)673
b(legs)p 0.15 0.15 0.15 TeXcolorrgb 62690 89246 a
tx@Dict begin (0) BOL end
 62690
89246 a -8000 89786 a
SDict begin H.S end
 -8000 89786 a -8000 89786 a
SDict begin 13.6 H.A end
 -8000
89786 a -8000 89786 a
SDict begin [/View [/FitH -32768]/Dest (Item.22) cvn /DEST pdfmark
end
 -8000 89786 a 0.15 0.15 0.15 TeXcolorrgb
2471 x Fa(6.)p 0.15 0.15 0.15 TeXcolorrgb 2425 w(\223Hea)-48
b(vy\224,)674 b(\223relax)-73 b(ed\224,)674 b(\223loose\224,)h
(\223melting\224,)f(all)g(good)g(concepts)f(to)h(use)p
0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb
0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb
0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb
-8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000 a 0.15 0.15 0.15 TeXcolorrgb
0.15 0.15 0.15 TeXcolorrgb eop end
%%Page: 6 6
TeXDict begin @landscape 6 5 bop 0.15 0.15 0.15 TeXcolorrgb
8000 5565 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 8000 5565 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb -8000 55565 a
tx@Dict begin InitOL /TheOL (0) def end
 -8000 55565 a -8000 55565 a
tx@Dict begin (0) BOL end

-8000 55565 a 2435 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 29.81319 397.48499 298.11374 .5 Frame
 gsave 0.98 0.98 0.98  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 0.0 397.48499 29.81319 .5 Frame 
gsave 0.89 0.89 0.89  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0.20784 0.15686 0.65882  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 397.48499 29.81319 0.0 29.81319    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 1.5 SLW 0.20784 0.15686 0.65882
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -8000 58000 a
tx@Dict begin { 3.97266 14.90659 } PutCoor PutBegin  end
 -8000 58000 a
-8000 60491 a
tx@Dict begin CP CP translate 0.225  0.225  scale NET  end
 -8000 60491 a 674 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.79999 SLW 0.20784 0.15686 0.65882  setrgbcolor  0.79999 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 98.61479 49.99924 moveto 98.61479
23.1496 76.84886 1.38367 49.99924 1.38367 curveto 23.1496 1.38367 1.38367
23.1496 1.38367 49.99924 curveto 1.38367 76.84886 23.1496 98.61479
49.99924 98.61479 curveto 76.84886 98.61479 98.61479 76.84886 98.61479
49.99924 curveto closepath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 7.8321 74.34442 moveto
16.52982 89.40929 32.60382 98.68962 50.00114 98.68962 curveto 24.6896
97.36012 3.77492 75.54367 5.24399 49.90396 curveto 6.56862 26.78497
26.5582 7.69743 50.00313 9.17511 curveto 70.92558 10.49376 88.18571
28.65613 86.69775 49.904 curveto 85.38655 68.62762 69.05135 84.06056
50.00307 82.55989 curveto 33.48085 81.25822 19.87427 66.74963 21.39099
49.90396 curveto 22.68015 35.58604 35.36371 23.80374 50.00311 25.3415
curveto 62.11348 26.6136 72.07582 37.47557 70.5092 49.904 curveto 69.26143
59.80287 60.21378 67.95435 50.0031 66.3455 curveto 42.32059 65.13503
35.95972 57.88515 37.63644 49.90398 curveto 38.78323 44.44524 44.27998
39.82254 50.00311 41.62604 curveto 53.21983 42.63972 56.27675 46.56267
54.17087 49.90399 curveto 53.38174 51.15607 50.0031 52.4209 50.04344
49.93275 curveto 47.90407 51.21997 50.68877 53.51355 52.16765 53.5709
curveto 56.11427 53.724 57.98317 49.11516 57.25269 45.82256 curveto
55.95302 39.96445 49.20125 37.51546 43.90045 39.25168 curveto 36.15019
41.79018 33.05205 50.9238 35.84499 58.18228 curveto 39.55704 67.8294
51.14024 71.58917 60.3368 67.72034 curveto 71.88347 62.86285 76.30902
48.80423 71.35553 37.6803 curveto 65.36757 24.23332 48.822 19.14018
35.77774 25.18272 curveto 20.4306 32.29202 14.66907 51.32997 21.80292
66.28946 curveto 30.02744 83.53607 51.56036 89.96631 68.43108 81.74004
curveto 87.57628 72.40471 94.67528 48.37581 85.35605 29.5971 curveto
74.91325 8.5544 48.3882 0.78668 27.70424 11.199 curveto 4.76506 22.7466
-3.67119 51.76747 7.83414 74.35432 curveto closepath gsave 1 1 1  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 94.75398 50.09451
moveto 93.42935 73.2135 73.43977 92.30101 49.99484 90.82336 curveto
29.07239 89.5047 11.81226 71.34233 13.30022 50.09445 curveto 14.6114
31.37085 30.94661 15.93791 49.9949 17.43858 curveto 66.5171 18.74023
80.1237 33.24884 78.60698 50.0945 curveto 77.31783 64.41243 64.63426
76.19473 49.99486 74.65697 curveto 37.8845 73.38486 27.92215 62.5229
29.48877 50.09447 curveto 30.73654 40.1956 39.7842 32.04411 49.99489
33.65295 curveto 57.67738 34.86345 64.03827 42.11333 62.36154 50.09448
curveto 61.21474 55.55322 55.71799 60.17593 49.99486 58.37242 curveto
46.77815 57.35875 43.72122 53.4358 45.82712 50.09448 curveto 46.61624
48.8424 49.99487 47.57758 50.03995 50.07393 curveto 47.90533 48.79492
47.31139 52.35333 48.00114 53.66277 curveto 49.84189 57.15718 54.7677
56.47128 57.25394 54.19235 curveto 61.67738 50.13774 60.42238 43.06607
56.26837 39.34354 curveto 50.19484 33.90086 40.73582 35.7846 35.84625
41.83261 curveto 29.34763 49.8709 31.88318 61.78214 39.83197 67.81216
curveto 49.812 75.38312 64.1999 72.18646 71.35677 62.33464 curveto
80.00821 50.42543 76.14622 33.54999 64.3911 25.2746 curveto 50.5607
15.53824 31.19258 20.0676 21.8042 33.72542 curveto 10.98044 49.47137
16.17816 71.33453 31.73769 81.83186 curveto 49.39491 93.74442 73.75406
87.8779 85.35728 70.41785 curveto 98.35942 50.85277 91.82393 23.99756
72.46461 11.29088 curveto 50.9945 -2.8012 21.64355 4.4032 7.83377 25.65729
curveto 16.52982 10.58917 32.60382 1.30882 49.99707 1.30882 curveto
75.30836 2.63835 96.22305 24.4548 94.75398 50.09451 curveto closepath
gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 27.54459 88.71352
moveto 8.18527 76.00684 1.64978 49.15163 14.65192 29.58655 curveto
26.25514 12.1265 50.61429 6.25998 68.27151 18.17253 curveto 83.83105
28.66986 89.02876 50.53302 78.20502 66.27898 curveto 68.81664 79.9368
49.44852 84.46616 35.6181 74.7298 curveto 23.86298 66.4544 20.00099
49.57896 28.65244 37.66975 curveto 35.8093 27.81793 50.1972 24.62128
60.17725 32.19221 curveto 68.12602 38.22224 70.66159 50.13348 64.16295
58.17178 curveto 59.27339 64.21977 49.81436 66.10352 43.74083 60.66084
curveto 39.58682 56.93832 38.33183 49.86664 42.75528 45.81203 curveto
45.2415 43.53311 50.16733 42.84721 52.00806 46.34163 curveto 52.69781
47.65106 52.10388 51.20946 49.91943 50.00032 curveto 52.09439 48.79118
49.30971 46.49762 47.83081 46.44025 curveto 43.88419 46.28716 42.01529
50.89601 42.74577 54.1886 curveto 44.04546 60.04672 50.79721 62.4957
56.09802 60.75949 curveto 63.84827 58.221 66.94641 49.08737 64.15347
41.82889 curveto 60.44142 32.18176 48.85822 28.422 39.66165 32.29083
curveto 28.115 37.14832 23.68944 51.20694 28.64293 62.33087 curveto
34.63089 75.77785 51.17645 80.87099 64.22072 74.82845 curveto 79.56786
67.71915 85.32939 48.6812 78.19556 33.72171 curveto 69.97102 16.47508
48.43811 10.04486 31.56738 18.27113 curveto 12.42218 27.60646 5.32318
51.63536 14.64241 70.41406 curveto 25.0852 91.45679 51.61026 99.2245
72.29422 88.81216 curveto 95.2334 77.26456 103.66966 48.2437 92.16534
25.65544 curveto 100.86406 40.71889 100.86406 59.27957 92.17007 74.34415
curveto 78.36566 95.6012 49.01471 102.8056 27.54459 88.71352 curveto
closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor  1.59998 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 49.99924 14.60283 moveto 38.91061
25.69145 lineto 40.80235 27.58319 lineto 27.58234 40.80406 lineto 25.6906
38.91147 lineto 14.60197 49.99924 lineto 31.22424 66.62234 lineto 42.3137
55.53458 lineto 38.70251 51.92253 lineto 40.97124 49.65295 lineto 50.34636
59.02893 lineto 48.07764 61.29765 lineto 44.5901 57.81013 lineto 33.50064
68.89874 lineto 49.99924 85.39732 lineto 61.08784 74.30872 lineto 59.19696
72.41698 lineto 72.41527 59.19695 lineto 74.30786 61.0887 lineto 85.39734
49.99924 lineto 68.89874 33.5015 lineto 57.80928 44.5901 lineto 61.2968
48.07764 lineto 59.45197 49.92247 lineto 50.07684 40.5465 lineto 51.92082
38.70251 lineto 55.53203 42.3137 lineto 66.62234 31.22339 lineto 49.99924
14.60283 lineto closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-8000 60491 a
tx@Dict begin  CP CP translate 1 0.225 div 1 0.225 div scale NET  end
 -8000 60491 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
SDict begin [ {ThisPage}<</Trans << /S /Replace >> >> /PUT pdfmark
end
 -8000 58000 a -8000 58000 a
SDict begin H.S end
 -8000 58000
a -8000 58000 a
SDict begin 13.6 H.A end
 -8000 58000 a -8000 58000 a
SDict begin [/View [/FitH -32768]/Dest (slide.5) cvn /DEST pdfmark
end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 19.87546 253.39848 } PutCoor PutBegin  end
 -8000 58000 a 0.20784 0.15686 0.65882
TeXcolorrgb 20883 58369 a Ff(Ey)-38 b(e)1063 b(\002xation)p
0.15 0.15 0.15 TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 5.96202 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 391.52295 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 19.87546 229.54884 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin (1) BOL end
 -8000 58000
a 0.15 0.15 0.15 TeXcolorrgb -8000 58000 a
tx@Dict begin (0) BOL end
 -8000 58000
a -8000 58000 a
SDict begin H.S end
 -8000 58000 a -8000 58000 a
SDict begin 13.6 H.A end
 -8000 58000
a -8000 58000 a
SDict begin [/View [/FitH -32768]/Dest (Item.23) cvn /DEST pdfmark
end
 -8000 58000 a 0.15 0.15 0.15 TeXcolorrgb
2377 x Fa(1.)p 0.15 0.15 0.15 TeXcolorrgb 2934 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0.6 0 TeXcolorrgb Fb(H)p 0.15 0.15 0.15
TeXcolorrgb 1183 w Fa(instr)36 b(ucts)1374 b @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 0.4  setrgbcolor    7.30356  2 div 7.988  0.1368  add
2 div 2 copy 0.1368  sub 4 2 roll Pyth 0.5 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0 0 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0 0.4 TeXcolorrgb Fb(S)p 0.15 0.15 0.15
TeXcolorrgb 1372 w Fa(to)674 b(f)-73 b(ocus)674 b(their)g(e)-48
b(y)g(es)673 b(on)h(a)f(point)h(just)g(abo)-36 b(v)-61
b(e)674 b(their)g(e)-48 b(y)g(eline)p 0.15 0.15 0.15
TeXcolorrgb 70083 60377 a
tx@Dict begin (0) BOL end
 70083 60377 a -8000 61015 a
SDict begin H.S end

-8000 61015 a -8000 61015 a
SDict begin 13.6 H.A end
 -8000 61015 a -8000 61015
a
SDict begin [/View [/FitH -32768]/Dest (Item.24) cvn /DEST pdfmark
end
 -8000 61015 a 0.15 0.15 0.15 TeXcolorrgb 2598 x Fa(2.)p
0.15 0.15 0.15 TeXcolorrgb 2934 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 0 0.6 0 TeXcolorrgb Fb(H)p 0.15 0.15 0.15
TeXcolorrgb 1183 w Fa(is)674 b(going)g(to)g(count)f(bac)-48
b(kw)-36 b(ards)674 b(from)g(100,)f(with)1373 b @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 0.4  setrgbcolor    7.30356  2 div 7.988  0.1368  add
2 div 2 copy 0.1368  sub 4 2 roll Pyth 0.5 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0 0 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0 0.4 TeXcolorrgb Fb(S)p 0.15 0.15 0.15
TeXcolorrgb 1373 w Fa(opening)673 b(e)-48 b(y)g(es)673
b(on)-3553 66624 y(e)-73 b(v)-61 b(en)674 b(n)-24 b(umbers)674
b(and)f(closing)h(on)g(odd)p 0.15 0.15 0.15 TeXcolorrgb
33345 66624 a
tx@Dict begin (0) BOL end
 33345 66624 a -8000 67163 a
SDict begin H.S end
 -8000 67163
a -8000 67163 a
SDict begin 13.6 H.A end
 -8000 67163 a -8000 67163 a
SDict begin [/View [/FitH -32768]/Dest (Item.25) cvn /DEST pdfmark
end
 -8000 67163
a 0.15 0.15 0.15 TeXcolorrgb 2472 x Fa(3.)p 0.15 0.15 0.15
TeXcolorrgb 2934 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
0 0.6 0 TeXcolorrgb Fb(H)p 0.15 0.15 0.15 TeXcolorrgb
1183 w Fa(tells)1373 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 0.4  setrgbcolor    7.30356  2 div 7.988  0.1368  add
2 div 2 copy 0.1368  sub 4 2 roll Pyth 0.5 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0 0 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
0 0 0.4 TeXcolorrgb Fb(S)p 0.15 0.15 0.15 TeXcolorrgb
1373 w Fa(to)674 b(tak)-48 b(e)673 b(a)h(deep)f(breath)g(or)i(tw)-24
b(o)-97 b(,)673 b(then)h(star)97 b(ts)674 b(the)f(slo)-36
b(w)-3553 72646 y(countdo)g(wn)p 0.15 0.15 0.15 TeXcolorrgb
8808 72646 a
tx@Dict begin (0) BOL end
 8808 72646 a -8000 72674 a
SDict begin H.S end
 -8000 72674 a
-8000 72674 a
SDict begin 13.6 H.A end
 -8000 72674 a -8000 72674 a
SDict begin [/View [/FitH -32768]/Dest (Item.26) cvn /DEST pdfmark
end
 -8000 72674
a 0.15 0.15 0.15 TeXcolorrgb 2983 x Fa(4.)p 0.15 0.15 0.15
TeXcolorrgb 2934 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
0 0.6 0 TeXcolorrgb Fb(H)p 0.15 0.15 0.15 TeXcolorrgb
1183 w Fa(star)97 b(ts)674 b(to)g(introduce)g(suggestions)f(of)h
(relaxation)g(and)f(e)-48 b(y)g(elid)673 b(hea)-48 b(viness)-3553
78668 y(while)674 b(pausing)f(longer)h(with)g(e)-48 b(y)g(es)673
b(closed)p 0.15 0.15 0.15 TeXcolorrgb 37578 78668 a
tx@Dict begin (0) BOL end
 37578
78668 a -8000 79207 a
SDict begin H.S end
 -8000 79207 a -8000 79207 a
SDict begin 13.6 H.A end
 -8000
79207 a -8000 79207 a
SDict begin [/View [/FitH -32768]/Dest (Item.27) cvn /DEST pdfmark
end
 -8000 79207 a 0.15 0.15 0.15 TeXcolorrgb
2472 x Fa(5.)p 0.15 0.15 0.15 TeXcolorrgb 2934 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0.6 0 TeXcolorrgb Fb(H)p 0.15 0.15 0.15
TeXcolorrgb 1183 w Fa(can)h(introduce)g(confusion)f(b)-48
b(y)674 b(missing)g(out)g(later)g(n)-24 b(umbers)674
b(occasionally)p 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end

-8000 58000 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb eop end
%%Page: 7 7
TeXDict begin @landscape 7 6 bop 0.15 0.15 0.15 TeXcolorrgb
8000 5565 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 8000 5565 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb -8000 55565 a
tx@Dict begin InitOL /TheOL (0) def end
 -8000 55565 a -8000 55565 a
tx@Dict begin (0) BOL end

-8000 55565 a 2435 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 29.81319 397.48499 298.11374 .5 Frame
 gsave 0.98 0.98 0.98  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray   0. true 0.0 0.0 397.48499 29.81319 .5 Frame 
gsave 0.89 0.89 0.89  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0.20784 0.15686 0.65882  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 397.48499 29.81319 0.0 29.81319    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 1.5 SLW 0.20784 0.15686 0.65882
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial -8000 58000 a
tx@Dict begin { 3.97266 14.90659 } PutCoor PutBegin  end
 -8000 58000 a
-8000 60491 a
tx@Dict begin CP CP translate 0.225  0.225  scale NET  end
 -8000 60491 a 674 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.79999 SLW 0.20784 0.15686 0.65882  setrgbcolor  0.79999 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 98.61479 49.99924 moveto 98.61479
23.1496 76.84886 1.38367 49.99924 1.38367 curveto 23.1496 1.38367 1.38367
23.1496 1.38367 49.99924 curveto 1.38367 76.84886 23.1496 98.61479
49.99924 98.61479 curveto 76.84886 98.61479 98.61479 76.84886 98.61479
49.99924 curveto closepath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.79999 SLW 0.20784 0.15686
0.65882  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 7.8321 74.34442 moveto
16.52982 89.40929 32.60382 98.68962 50.00114 98.68962 curveto 24.6896
97.36012 3.77492 75.54367 5.24399 49.90396 curveto 6.56862 26.78497
26.5582 7.69743 50.00313 9.17511 curveto 70.92558 10.49376 88.18571
28.65613 86.69775 49.904 curveto 85.38655 68.62762 69.05135 84.06056
50.00307 82.55989 curveto 33.48085 81.25822 19.87427 66.74963 21.39099
49.90396 curveto 22.68015 35.58604 35.36371 23.80374 50.00311 25.3415
curveto 62.11348 26.6136 72.07582 37.47557 70.5092 49.904 curveto 69.26143
59.80287 60.21378 67.95435 50.0031 66.3455 curveto 42.32059 65.13503
35.95972 57.88515 37.63644 49.90398 curveto 38.78323 44.44524 44.27998
39.82254 50.00311 41.62604 curveto 53.21983 42.63972 56.27675 46.56267
54.17087 49.90399 curveto 53.38174 51.15607 50.0031 52.4209 50.04344
49.93275 curveto 47.90407 51.21997 50.68877 53.51355 52.16765 53.5709
curveto 56.11427 53.724 57.98317 49.11516 57.25269 45.82256 curveto
55.95302 39.96445 49.20125 37.51546 43.90045 39.25168 curveto 36.15019
41.79018 33.05205 50.9238 35.84499 58.18228 curveto 39.55704 67.8294
51.14024 71.58917 60.3368 67.72034 curveto 71.88347 62.86285 76.30902
48.80423 71.35553 37.6803 curveto 65.36757 24.23332 48.822 19.14018
35.77774 25.18272 curveto 20.4306 32.29202 14.66907 51.32997 21.80292
66.28946 curveto 30.02744 83.53607 51.56036 89.96631 68.43108 81.74004
curveto 87.57628 72.40471 94.67528 48.37581 85.35605 29.5971 curveto
74.91325 8.5544 48.3882 0.78668 27.70424 11.199 curveto 4.76506 22.7466
-3.67119 51.76747 7.83414 74.35432 curveto closepath gsave 1 1 1  setrgbcolor
 1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 94.75398 50.09451
moveto 93.42935 73.2135 73.43977 92.30101 49.99484 90.82336 curveto
29.07239 89.5047 11.81226 71.34233 13.30022 50.09445 curveto 14.6114
31.37085 30.94661 15.93791 49.9949 17.43858 curveto 66.5171 18.74023
80.1237 33.24884 78.60698 50.0945 curveto 77.31783 64.41243 64.63426
76.19473 49.99486 74.65697 curveto 37.8845 73.38486 27.92215 62.5229
29.48877 50.09447 curveto 30.73654 40.1956 39.7842 32.04411 49.99489
33.65295 curveto 57.67738 34.86345 64.03827 42.11333 62.36154 50.09448
curveto 61.21474 55.55322 55.71799 60.17593 49.99486 58.37242 curveto
46.77815 57.35875 43.72122 53.4358 45.82712 50.09448 curveto 46.61624
48.8424 49.99487 47.57758 50.03995 50.07393 curveto 47.90533 48.79492
47.31139 52.35333 48.00114 53.66277 curveto 49.84189 57.15718 54.7677
56.47128 57.25394 54.19235 curveto 61.67738 50.13774 60.42238 43.06607
56.26837 39.34354 curveto 50.19484 33.90086 40.73582 35.7846 35.84625
41.83261 curveto 29.34763 49.8709 31.88318 61.78214 39.83197 67.81216
curveto 49.812 75.38312 64.1999 72.18646 71.35677 62.33464 curveto
80.00821 50.42543 76.14622 33.54999 64.3911 25.2746 curveto 50.5607
15.53824 31.19258 20.0676 21.8042 33.72542 curveto 10.98044 49.47137
16.17816 71.33453 31.73769 81.83186 curveto 49.39491 93.74442 73.75406
87.8779 85.35728 70.41785 curveto 98.35942 50.85277 91.82393 23.99756
72.46461 11.29088 curveto 50.9945 -2.8012 21.64355 4.4032 7.83377 25.65729
curveto 16.52982 10.58917 32.60382 1.30882 49.99707 1.30882 curveto
75.30836 2.63835 96.22305 24.4548 94.75398 50.09451 curveto closepath
gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  0.8 SLW 0  setgray  newpath 27.54459 88.71352
moveto 8.18527 76.00684 1.64978 49.15163 14.65192 29.58655 curveto
26.25514 12.1265 50.61429 6.25998 68.27151 18.17253 curveto 83.83105
28.66986 89.02876 50.53302 78.20502 66.27898 curveto 68.81664 79.9368
49.44852 84.46616 35.6181 74.7298 curveto 23.86298 66.4544 20.00099
49.57896 28.65244 37.66975 curveto 35.8093 27.81793 50.1972 24.62128
60.17725 32.19221 curveto 68.12602 38.22224 70.66159 50.13348 64.16295
58.17178 curveto 59.27339 64.21977 49.81436 66.10352 43.74083 60.66084
curveto 39.58682 56.93832 38.33183 49.86664 42.75528 45.81203 curveto
45.2415 43.53311 50.16733 42.84721 52.00806 46.34163 curveto 52.69781
47.65106 52.10388 51.20946 49.91943 50.00032 curveto 52.09439 48.79118
49.30971 46.49762 47.83081 46.44025 curveto 43.88419 46.28716 42.01529
50.89601 42.74577 54.1886 curveto 44.04546 60.04672 50.79721 62.4957
56.09802 60.75949 curveto 63.84827 58.221 66.94641 49.08737 64.15347
41.82889 curveto 60.44142 32.18176 48.85822 28.422 39.66165 32.29083
curveto 28.115 37.14832 23.68944 51.20694 28.64293 62.33087 curveto
34.63089 75.77785 51.17645 80.87099 64.22072 74.82845 curveto 79.56786
67.71915 85.32939 48.6812 78.19556 33.72171 curveto 69.97102 16.47508
48.43811 10.04486 31.56738 18.27113 curveto 12.42218 27.60646 5.32318
51.63536 14.64241 70.41406 curveto 25.0852 91.45679 51.61026 99.2245
72.29422 88.81216 curveto 95.2334 77.26456 103.66966 48.2437 92.16534
25.65544 curveto 100.86406 40.71889 100.86406 59.27957 92.17007 74.34415
curveto 78.36566 95.6012 49.01471 102.8056 27.54459 88.71352 curveto
closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor  1.59998 SLW 0.20784
0.15686 0.65882  setrgbcolor  newpath 49.99924 14.60283 moveto 38.91061
25.69145 lineto 40.80235 27.58319 lineto 27.58234 40.80406 lineto 25.6906
38.91147 lineto 14.60197 49.99924 lineto 31.22424 66.62234 lineto 42.3137
55.53458 lineto 38.70251 51.92253 lineto 40.97124 49.65295 lineto 50.34636
59.02893 lineto 48.07764 61.29765 lineto 44.5901 57.81013 lineto 33.50064
68.89874 lineto 49.99924 85.39732 lineto 61.08784 74.30872 lineto 59.19696
72.41698 lineto 72.41527 59.19695 lineto 74.30786 61.0887 lineto 85.39734
49.99924 lineto 68.89874 33.5015 lineto 57.80928 44.5901 lineto 61.2968
48.07764 lineto 59.45197 49.92247 lineto 50.07684 40.5465 lineto 51.92082
38.70251 lineto 55.53203 42.3137 lineto 66.62234 31.22339 lineto 49.99924
14.60283 lineto closepath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath gsave 1 1 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.59998 SLW 0.20784 0.15686 0.65882  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-8000 60491 a
tx@Dict begin  CP CP translate 1 0.225 div 1 0.225 div scale NET  end
 -8000 60491 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
SDict begin [ {ThisPage}<</Trans << /S /Replace >> >> /PUT pdfmark
end
 -8000 58000 a -8000 58000 a
SDict begin H.S end
 -8000 58000
a -8000 58000 a
SDict begin 13.6 H.A end
 -8000 58000 a -8000 58000 a
SDict begin [/View [/FitH -32768]/Dest (slide.6) cvn /DEST pdfmark
end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 19.87546 253.39848 } PutCoor PutBegin  end
 -8000 58000 a 0.20784 0.15686 0.65882
TeXcolorrgb 22071 58369 a Ff(Cloc)-76 b(k)1064 b(face)p
0.15 0.15 0.15 TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 5.96202 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 391.52295 4.47151 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin  PutEnd  end
 -8000 58000
a -8000 58000 a
tx@Dict begin { 19.87546 229.54884 } PutCoor PutBegin  end
 -8000 58000 a -8000 58000 a
tx@Dict begin (1) BOL end
 -8000 58000
a 0.15 0.15 0.15 TeXcolorrgb -8000 58000 a
tx@Dict begin (0) BOL end
 -8000 58000
a -8000 58000 a
SDict begin H.S end
 -8000 58000 a -8000 58000 a
SDict begin 13.6 H.A end
 -8000 58000
a -8000 58000 a
SDict begin [/View [/FitH -32768]/Dest (Item.28) cvn /DEST pdfmark
end
 -8000 58000 a 0.15 0.15 0.15 TeXcolorrgb
2377 x Fa(1.)p 0.15 0.15 0.15 TeXcolorrgb 3123 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 0.4  setrgbcolor    7.30356  2 div 7.988  0.1368  add
2 div 2 copy 0.1368  sub 4 2 roll Pyth 0.5 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0 0 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0 0.4 TeXcolorrgb Fb(S)p 0.15 0.15 0.15
TeXcolorrgb 1373 w Fa(holds)674 b(imaginar)73 b(y)674
b(cloc)-48 b(k)674 b(at)g(ar)61 b(ms')674 b(length,)f(just)h(abo)-36
b(v)-61 b(e)674 b(their)g(e)-48 b(y)g(es)p 0.15 0.15 0.15
TeXcolorrgb 64023 60377 a
tx@Dict begin (0) BOL end
 64023 60377 a -8000 61015 a
SDict begin H.S end

-8000 61015 a -8000 61015 a
SDict begin 13.6 H.A end
 -8000 61015 a -8000 61015
a
SDict begin [/View [/FitH -32768]/Dest (Item.29) cvn /DEST pdfmark
end
 -8000 61015 a 0.15 0.15 0.15 TeXcolorrgb 2598 x Fa(2.)p
0.15 0.15 0.15 TeXcolorrgb 3123 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 0.4  setrgbcolor    7.30356  2 div 7.988  0.1368  add
2 div 2 copy 0.1368  sub 4 2 roll Pyth 0.5 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0 0 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 0 0 0.4 TeXcolorrgb Fb(S)p 0.15 0.15 0.15
TeXcolorrgb 1373 w Fa(imagines)674 b(the)g(cloc)-48 b(k)674
b(pointing)f(at)h(1)g(and)1182 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 0 0.6 0 TeXcolorrgb Fb(H)p 0.15 0.15 0.15
TeXcolorrgb 1184 w Fa(sa)-73 b(ys)674 b(\223One)-36 b(,)674
b(relaxing,)g(going)-3553 66624 y(deeper\224)p 0.15 0.15 0.15
TeXcolorrgb 5474 66624 a
tx@Dict begin (0) BOL end
 5474 66624 a -8000 67134 a
SDict begin H.S end
 -8000
67134 a -8000 67134 a
SDict begin 13.6 H.A end
 -8000 67134 a -8000 67134 a
SDict begin [/View [/FitH -32768]/Dest (Item.30) cvn /DEST pdfmark
end
 -8000
67134 a 0.15 0.15 0.15 TeXcolorrgb 2501 x Fa(3.)p 0.15 0.15 0.15
TeXcolorrgb 3123 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0 0.4  setrgbcolor    7.30356  2 div 7.988  0.1368  add
2 div 2 copy 0.1368  sub 4 2 roll Pyth 0.5 add  CLW 2 div add 0 360
arc closepath gsave 0.8 SLW 0 0 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
0 0 0.4 TeXcolorrgb Fb(S)p 0.15 0.15 0.15 TeXcolorrgb
1373 w Fa(imagines)g(the)g(cloc)-48 b(k)674 b(pointing)f(at)h(2)g(and)
1182 b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0.6 0
TeXcolorrgb Fb(H)p 0.15 0.15 0.15 TeXcolorrgb 1184 w
Fa(sa)-73 b(ys)674 b(\223T)-291 b(w)-24 b(o)-97 b(,)675
b(tw)-24 b(o)-97 b(,)673 b(relaxing,)-3553 72646 y(relaxing,)h(going)f
(deeper)-121 b(,)673 b(going)h(deeper\224)p 0.15 0.15 0.15
TeXcolorrgb 37289 72646 a
tx@Dict begin (0) BOL end
 37289 72646 a -8000 73185 a
SDict begin H.S end

-8000 73185 a -8000 73185 a
SDict begin 13.6 H.A end
 -8000 73185 a -8000 73185
a
SDict begin [/View [/FitH -32768]/Dest (Item.31) cvn /DEST pdfmark
end
 -8000 73185 a 0.15 0.15 0.15 TeXcolorrgb 2472 x Fa(4.)p
0.15 0.15 0.15 TeXcolorrgb 2425 w(.)402 b(.)g(.)g(and)639
b(contin)-24 b(ue)-36 b(,)644 b(repeating)638 b(each)h(par)97
b(t)638 b(the)g(appropr)36 b(iate)639 b(n)-24 b(umber)638
b(of)h(times)p 0.15 0.15 0.15 TeXcolorrgb 71200 75657
a
tx@Dict begin (0) BOL end
 71200 75657 a -8000 76196 a
SDict begin H.S end
 -8000 76196 a -8000 76196
a
SDict begin 13.6 H.A end
 -8000 76196 a -8000 76196 a
SDict begin [/View [/FitH -32768]/Dest (Item.32) cvn /DEST pdfmark
end
 -8000 76196 a 0.15 0.15 0.15
TeXcolorrgb 2472 x Fa(5.)p 0.15 0.15 0.15 TeXcolorrgb
2934 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0 0.6 0  setrgbcolor  0. true 2.3 neg 2.3 neg 10.20586 10.05254
.5 Frame  gsave 0.8 SLW 0 0.6 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0.6 0
TeXcolorrgb Fb(H)p 0.15 0.15 0.15 TeXcolorrgb 1183 w
Fa(can)674 b(mak)-48 b(e)674 b(suggestions)f(of)h(relaxation)g(and)f(e)
-48 b(y)g(e)673 b(closure)h(betw)-24 b(een)-3553 81679
y(n)g(umbers)p 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb 0.15 0.15 0.15 TeXcolorrgb -8000 58000 a
tx@Dict begin  PutEnd  end

-8000 58000 a 0.15 0.15 0.15 TeXcolorrgb 0.15 0.15 0.15
TeXcolorrgb eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
