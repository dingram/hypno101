%!PS-Adobe-2.0
%%Creator: dvips(k) 5.991 Copyright 2011 Radical Eye Software
%%Title: hypno-101.dvi
%%CreationDate: Wed Jul 11 18:27:57 2012
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: DejaVuSerif-Bold CMSY10 DejaVuSerif DejaVuSerif-Italic
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -P pdf -o /tmp/hypno-101_tmp1.ps hypno-101.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2012.07.11:1827
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 594 2011-10-31 18:13:18Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.09, 2011/10/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep div cvi def
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  XA Shift sub YA Shift sub moveto 
  gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
  Symbol show grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  showpoints 
    { ] aload /Points ED } 
    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    startAngle rotate Symbol show 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} 
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
    Symbol show 
    grestore
  }
  pathforall 
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 490 2011-04-23 09:25:30Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.01, 2011/04/23
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: dejavuserif_t1-type1.enc 0 0
% THIS FILE WAS AUTOMATICALLY GENERATED -- DO NOT EDIT

%%AutoEnc_6paffcekw62ffq4g6cgalfhbtd
% Encoding created by otftotfm on Wed Nov  2 22:52:39 2011
% Command line follows encoding
/AutoEnc_6paffcekw62ffq4g6cgalfhbtd [
%00
  /grave /acute /circumflex /tilde /dieresis /hungarumlaut /ring /caron
  /breve /macron /dotaccent /cedilla /ogonek /quotesinglbase /guilsinglleft /guilsinglright
%10
  /quotedblleft /quotedblright /quotedblbase /guillemotleft /guillemotright /endash /emdash /uni200C
  /.notdef /dotlessi /dotlessj /uniFB00 /fi /fl /uniFB03 /uniFB04
%20
  /uni2423 /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
  /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
%30
  /zero /one /two /three /four /five /six /seven
  /eight /nine /colon /semicolon /less /equal /greater /question
%40
  /at /A /B /C /D /E /F /G
  /H /I /J /K /L /M /N /O
%50
  /P /Q /R /S /T /U /V /W
  /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
%60
  /quoteleft /a /b /c /d /e /f /g
  /h /i /j /k /l /m /n /o
%70
  /p /q /r /s /t /u /v /w
  /x /y /z /braceleft /bar /braceright /asciitilde /hyphen
%80
  /Abreve /Aogonek /Cacute /Ccaron /Dcaron /Ecaron /Eogonek /Gbreve
  /Lacute /Lcaron /Lslash /Nacute /Ncaron /Eng /Ohungarumlaut /Racute
%90
  /Rcaron /Sacute /Scaron /Scedilla /Tcaron /Tcommaaccent /Uhungarumlaut /Uring
  /Ydieresis /Zacute /Zcaron /Zdotaccent /IJ /Idotaccent /dcroat /section
%A0
  /abreve /aogonek /cacute /ccaron /dcaron /ecaron /eogonek /gbreve
  /lacute /lcaron /lslash /nacute /ncaron /eng /ohungarumlaut /racute
%B0
  /rcaron /sacute /scaron /scedilla /tcaron /tcommaaccent /uhungarumlaut /uring
  /ydieresis /zacute /zcaron /zdotaccent /ij /exclamdown /questiondown /sterling
%C0
  /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
  /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
%D0
  /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /OE
  /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /.notdef
%E0
  /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
  /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
%F0
  /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /oe
  /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /germandbls
] def
% Command line: 'otftotfm --encoding=fontools_t1 --pl
% --map-file=DejaVuSerif.map --no-updmap --no-type1 --coding-scheme=EXTENDED
% TEX FONT ENCODING - LATIN --feature=kern DejaVuSerif-Bold.ttf
% DejaVuSerif-Bold-tlf-t1'

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: DejaVuSerif-Italic
%!PS-AdobeFont-1.0: DejaVuSerif-Italic 2.33
%%Title: DejaVuSerif-Italic
%Version: 2.33
%%CreationDate: Tue Jul 26 17:07:22 2011
%%Creator: ,,,
%Copyright: Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
%Copyright: DejaVu changes are in public domain
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.000488281 0 0 0.000488281 0 0 ]readonly def
/FontName /DejaVuSerif-Italic def
/FontBBox {-1719 -710 3381 2272 }readonly def
/PaintType 0 def
/FontInfo 11 dict dup begin
/version (2.33) readonly def
/Notice (Copyright \050c\051 2003 by Bitstream, Inc. All Rights Reserved.\012DejaVu changes are in public domain\012) readonly def
% Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
% DejaVu changes are in public domain
/FullName (DejaVu Serif Italic) readonly def
/FamilyName (DejaVu Serif) readonly def
/Weight (Book) readonly def
/FSType 0 def
/ItalicAngle -11 def
/isFixedPitch false def
/UnderlinePosition -85 def
/UnderlineThickness 90 def
/ascent 1556 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE373DCBE8503A9C1BDDCDE3976B9A
FF31FADC784CD99E8D913C26819A4962BC428320D924CB0D4BE15E2EA33CD98F
3A3090D3A2B1C56F2D8E679576FAF3FC1A79261690287D7B9444B1B4E36B6E78
13E34916336239067A606618EB045356D480135F7C325841F7B5598118DE9F10
DC40B14F98881CE9249D25473504F621ACEEFEEC415938B11B1EA0DB33CD14DD
BF0F9224FBD2D8BDC80385967061093CBA04EF9F2CC7611612A7B40A88C5F557
0EA7B75CAEE65197D76E2EAFF968FAFF7C1105A090B0608803BE84E398A71073
17422E75FFAC10C7B78D88AE4656E8670F0CFE203076E26559330DB36E3DA818
0A35DF5545775638CA918D7B724A11C790C00416AB08EE446A6726C97D3397B0
0314EBC91B4BC45217722F1100A3B5EBB57C058C16BF371859A9BA53CBAA8070
38B0A8751C786BAB5043C284D16223CDC59398518D50ABF8F3285652A955C253
9EA5F707EBCCED2A37868AB64C6DCF6546DF5654A7B54F720D9B626D88F2993B
DD32706AC49259CFBC2FF04BDCC56EEA526E0250565FD845B7D4D9DF3EF185CA
AE724EBF1165BFEA7D20DC8F30D93CB8B4BDEEA3F37D794B6F6219DB4A85D9FB
331D84CF11D7FE9A46DDE1E08DDD898CE5599C6775CE143CDCDF73E2CD7FB751
BB4EAA22B3436A8AEE73B93CE71A7D64F9875B90B84A0378482C9093DED58B05
C7FC1631E35F7232D1D25D8FBF8954E5B33866BA86201A7951ACA6FBC88A1E74
4C3366072E854BF5305F61AC3C4375742D1316DFD48181563BE1E496980FA645
76EFD0EE2BAAC777BC8C22A340435D518C58463A49E183740ABE3227853E7FC7
0FF9AF7E0C63759864AA2E1BDC9142AA9CD24BBA3364285DA21FF67D3E0D37C4
2371062F5BF8F9EAEE120490D6AD034DEEB108A6B381109035EA4DDDCFB2A005
553868AC67E1E940AB513E1E41FF5F497F52AFA059C626D779AE4ABCC120900B
AAEC4EBEF3BA611650539FBAFAFF5443EBFCCEFB2147917E6A9F644B0BDFDF21
97162103433B454905ACECA48EEDBF777AC02AC4BEF34869642C9AD6127ECD52
12AB846D1450EAA29C556BB121C9C4AC3C940F1EB91146E0A7F170C2333880BC
6D7845E32595B2F9E2050D2B8D3D75F2AD74231D87A3C5991A3F5D1C8456C9A9
5A35F30C2F37FE3916C7DC06B77C08DE7E6FCF51FF4D26EFBDCA16B5626CE6C6
F7EEED4FBF4631E830A06D7A8D86790A680C47C2D1DD26BBBF1E3CD527980F6C
4739C00C2EC20CE1F46C903788C0226806023D73A86D4B8F95B72450041AADC1
919AB52F2165758281D989454CF561A84C97860B8D2A85B146F5805A7CE00D16
3E3C34545135279298C54FD39A960E69814BF4066F589316BA47F8F8F30C27FD
032A2AA9965B0597FCD470D69B9CB4E0E6F914D5BBAA4A98268E1B4DB4900ED7
FB585D63C3DF849ED5FC9B054EA6AB0149E04B8C4302D4A56D8A347EB5D3D2A0
E12CF7E35C8772C5B1A6B545E61F3171CED2010C988BD5437BC3C9B4D5254B36
8E4DD7213D2FCE31DECB963AE3D31F9B35A4A6ADE35ED5283961517E1E2E6E31
7BD9FDB42DBDCE82C93C71126926B9F8E9653E25F47EE74F4049290AAE529429
CA03557A9B8306D976E5EE6F7270FED4449563D2B97615D16887455E43D2FF67
752CD12DAAE57248F81B9FD153B122DB2F44289E5B8296A1093827BD3E127C20
31A3197B4C1A3759A381AE2CEE579A8DDBAE510AD6C9B3C7841540C8D2A499CD
1E377CD81BB642DF5F3B367E903158C2DFC11F715B047748856573801B26A718
980D36AF645F7E80DFB78EE950A877ADC1B84A0EEEFF7499D4A4959FA1BA70D3
DE122C74E2D07F135B33442DBEA6C0F74720F9A0B495847BA1F3896EFEB1048E
980F5A16B50B723A3018A5324994CDA85D9EDAC3DC42794B09481A7089CC45A2
C18A54AEB9CAF270DF2858636E571EBEA7BA976FCE899416BCEC92F4A7418CA8
0B35D3FAA66A46727CB1A0BC620E1B14489B73BF349741A5E15DF72BE6E28527
C05909C897B6B2E47F0576C92BD88F0DA00F757B2FF77463F8186365B317A5F5
6D23B74D9107E2A2D5C2C26E79D6B96DC6A65760E4501B14D3BEA359ACD21A40
8C8EE01EC592B1E306F1F60C17B04C13E3C20E089A6C6BC14BF893C29F61FD23
0BEEA63DD2B6CAD25A911B562367CF82E245712F148827033F3F1C0D11122E05
FE8BCCA62B12230255B5DC112BE3E6B0246E8E14850278761A368889725B0171
CAB9447B6774A330A75974BE76B05ACC3FCB47F4EDB70BC19AE14556EEA6D6A3
1AAAFC7466D2B9A4B2260AD20B602268DA0F0CC24BE660E5639866C9187A8803
98355FD303D10FB649B16AA3285456246A5A421CE1E955AA105D51471C5B7C47
2985E1E00DF456B3876946BC49E0A827E41BF56FC0CACB7842FF8F2DD10AE4A3
E1A7699603EFD017803E471242D6B97C538102B14A91222012637AF1D8DF9A0C
2937A3D7449E2659C0CF7CE35C322ACDA0B29EA3F63DB6F525E4813DA1C73AD0
398BD2FB74B4255299C8F0B0DCD7C6412EF9C5AF0A2193B8E0138EA71C81BA60
59BD057359ED3CD47A324CF587A4B3262405C9E753315B7B157B3DFE0FDA0F71
6F2F2927609219F27B108EEDE1127CCD90ED4FF3CE3E82F5B333E4833BD3A126
5221287185860BD79689DE66AB4144D73A3B10D7A3B85B60A60745696FFABB07
F44C52D830C5CE6089CAF571855A5086B98077A1E07CFE95B30BE896DCDFC069
0BB5B0D5945B3F7F124B923C1FAE68E5F5D9A868EB031F7DA4409F4AEAF38A53
5D931342ADA5ADD4EF1810E41C156EE20CC477571A18859AC3A74AF5B4B003EB
4396A0C3CAA4D0722AA10686F262B7DB8A7B1B948DBEEB188FC1D2A797122B9B
78C1F92F5CCBFCB72818B1E1EA494A80DA0121CEA84B511618E9D0552CC3784B
DB595B1F2C787A199EED810BA309AFF4B63059229C6E306C0756FBED2FF26246
33953D92285348D38BEF6048018106FF6776432F67F7002CD76005E64BB1CDC3
E641C66533433157C6C959600AE0F4280FF4D463AE1D9FEBAD065332B3168C04
6DA7AC6E66F4A9A08A98ADFAEE4711E4FD4268E70CBC5ECAB6F8601CE65E911F
57ECE585FA39D8FB6D93C81F3D76A76D288134981510B78B693DD292CD282FE9
CC3804E23ECF0BA98367C4A7DBDAD921F1434838F6D8E21D133D13A75ADA846D
0A6FA8A0C1230DF428AE05DACB2F34D7233D2B33A9BFADD6D0E03029FDFA95D7
0D991A20A5A862A7A728BD3A8C878491E7A0F1AD7105B1B506801D76818B60E0
B04DDB3EA71A2791D4F3FA5E7C0703FC2C93C5EB02DF2EEF2B6C8D74033C21FB
251F854DC13616E1A9E22445B6CCE04A1CD1C66E50757D480B56351386067E2F
8A211131C712BFA8528235F1A602CB799F8D564C18FE7483103E4E562E889010
F219C1F30B85B78F3F32CEAED568F0CCD395AAB91442ADEA8174064B3EFF00FB
3086E4DDD6B1E84342A2B831D48E2F2EAC65A47427A34CD7C577BFDA61214110
CC3FE5C892B5667CACE7D67677EFA1AD43755AD8904E7C063B3859EF3391F075
F1080F6EE2B9567FD4993ADA941FBAEE9A2A47EE9575E4E3DBDCBB617CE64466
DF58F9DFE73AFE850CC222FA0ECC9EE2613B339BD8F6E5C846DC5141E642FDBA
58B0E8AEEA84816E8C9CB947FDD259B1BDBBBEF73390FACCC79421C4C4A1B01E
FD02A87D5B2AB39A97E6ADB7DEBA6F71E8B9C7D44A7AE32D16398216F197695E
B338006CF423A8A1D0A5DC3C2F4B9BBD9F47D4A2E8D0FF7C231496DC0E7B18A9
E13B98E53AF023E7B552073DD8ACDEEFB3D9D98CE75658B632AAE7D5BE89FC88
7DAA7C4F66B334C15B98EAB0DC869523D3016D45C4650421070C80E288C095D8
BD20CCD0590904EDFB01DFEC8E166498AA88D85F018F88977566E90F777A07B7
AD566A66879DF69139B6BFD1D0F81E00B74A4510F9FD6A2A878B065E6F6972A6
C313F8AB65E7623166F516E7BCC1142485B1D7835060C4F1E8482AF90DAB2654
B101FCCE14EFAC729B2C55852B56B996BDCA0C4873159D3E14C519414E56AD37
F194566008ADD04E6F2B1FF9D34913771FA40103886020036D883325FB8ABE90
84AE51432BEF7CEF6A3BF6050234E293FC06B0A33EECC3EBFB023CE14335714B
E65683FF583E66A4DE2F139EBB8C03C5690130C97973AA4D40CBB60EDDAEEC1F
233D1645D12BB170645AF75534E6DCD097F61B9D2A3F37E0199EA6F2036B2E5A
C4ED2D34BC4A246581E688AC225AF2D19493BA76745E38444432BBAEF32B9BDC
7314F560168019A6F03BA39258C66B75A776640E8857C06877D3459E8660198C
189B126317F7ECB75B7B53BEC994D15C7E8F9C6890ADF6C693EC660FF0E46355
6ED6DDE7232D310BA0A33BD624933FB07E9F4A0AD7075DB073E1E6AB862B2776
8E29E9EE9740DA1A76207A14487FE4908E0DD9BD52A507764E05698324842246
C4DACB32FA759D59E0E4307AC105033A4693565FEE55DE922B4A793278CDF446
D8AEA79FFA606506C11AB66C6DB01A57DC9D5241C0FF101E99D7F264AC03F3D7
EBDF63DACA30FD7A97EC5E907B5AE1E208616803C2A3895FEAA6D3E81CC7CCE9
DC65529319EF2FB6093C41BDE285D7311454AB232BEBA4BD853E4670D3FED784
91C5BCC0FCC7585EF3C780EB6F53FDDB689D8794B812D546F288D2BFA376A854
04060EFBC17A5E9D0768D553B8792AAC122676581B4E4A578AE336C782CDB43C
3101700B30EB242227583E1D2FA256DE82AAD35DE860AE47D8F44620F52A1F86
6F9A2A07B2C81998DD05108FAA7B4D2433FC69F6E6BE010930461A7741DC302C
47137EDAD3219B5666B66E854965AA890FB3B482092485AE32E93893D228BD31
BC4A8D40A4E3DD8957217F9A34A4A711EF4BAD7B866DD4B7F12DA30B7D90C1E3
6A102E81FC795B09A320A26C5C367486EA986F31F6F9450BF21781EE559E8B85
F3B91B40EC2A66B8B14F49F72336FEADBD079B430DA38C6CE99FD4A4D6AE61A2
6916BE2D62BF28B50ACACF7F481A489A290B93C713016B7F0D764AE2920A82BC
A6C8C5C3A7310D2A612183F9EF89D9E89B3E405D192BEE8CD4CA07ADB5C26FB9
B660F77444E7EB0E8060B4EFACADA1878554CFF107B3B4DC9548FA4F52E27C26
3198F0AABC32A4DD17D054DBE4E9C240E522B8A5A731BA48A2D0164CF3504EDC
87A20CD4B3C6CF732FCEACD874F5F3F7F7CA9007433FBE2CD9D38CBA349096A2
77AB3AEED6679964D00AEE7B64D2897ADBA76D7827EBF4108B6FF9E4D7F9F426
CC8DFD61B56FDC2B4D1B52924D30D0DF716D58B19C1C70C429B23F6913CD1B65
55A42D3C7AE4FC81FCE3802023C8E14AC54FE3ECAA816890C27239E80ADDEE21
9768A4BD1017B83B6B0DAFC7F9C21F0923F6ACDEDF20530C23666C134719954B
666BD840165E01DEEAB372E96E5AA1A5D71063B34E6169968FA34ACDEC564722
109C0FA96E09FC2BB8B0F21537EEA7EF11619C1905305500915A807023AE71AC
518D708D372B7436676952806740BE067904B136C2B6B3BD8AFADFD5B5198E3E
D7FD2E525B35E90E78E536702753E7CC21C77863B5FE169C931C76E589FE0F23
F301633CC8A51450E21552CE44696F0E7B47A4F1C6E320D45009E02E7A37259D
8AFFB9F861420BF86287D0099FF9F570AB6A3A61DAA92A2FA020AB1A4BA1B68B
1153BCCDF7803BE3B4AB6A7EA1C6182B041F9AE7F6929633114AFEF487B4F3C0
B17F538C6D5BCD4C8792261DA2F7ED6E5D05FB6EBBAC1981A7DBBDDAB8B9727C
3E69B103C8FB0CD8900E0DDA1AEA5FEC9984CFE63E6282D2D488B6512E37AB4C
C00082B1878813DDD71BC6F707AE3878772EA5EB39E689450C0CF01BD753D418
5094C1B5E21AFF4CEBD076109AFDCFBA7C2F5A4A00BB0AF56057B7CAC8F3B1AA
277E909915B2419C59467ED8B07EF8416F674E211667D27028B1B2D42B4EF7AD
19A6A8FD6B1DF7BAE4A20B7E6C77D8EE3E2179672B4DB7EFE7106D7E06B2B57A
7E1924E88BE11DBA732FA150EDDC0F7A2E3A71E45E0226586217A2F44A8C30DE
22622C63FE21DC29ACEAC586BD8D6405DDE6487C9DA3BDD2E9EFA67589526BD7
BEF4B467FE1728EE77C1463DDEEBCE9A708C4B99F05C7E477B42BED5DB587A18
46AAC3780DA493ECB76E8AD025D0F52957099F97801F17A5902516B261C0B147
B5F64BC49170CE57667264CD351A6D32C26E47484CF1B078EB23F318C84FF921
DA05CA70CE688C8FF59843D691801C17B66ED70B9E5A2E33B9E37E9D2B266904
4BE108764DCA10A12A221A1F1E752D00BE3B85631F391A7488692A48F557075E
AE29FDB85B98A508973695959EA86B5E662D5C279C6909C295B6186236EE9F32
20EFB7BE5B501E69F13DA5B5027FB0719DF9411C388E15BFF65071B4BEA4C29E
2D0955AEB9C3A68B5508683BB7645A406BB57A1C2D4BEBB7DA991A994DFC7471
66C60182B9482737775272E903E75D1D98B0A62DF47F5D09E5797208F8881442
0FFCAFB89430EAEAF9D24853495E5659E98CBBCF3F5F0145C18B32F88C79AAED
E51FFA07E218F4941852BEED3661D27CB425253B0BF5666728D2D9A5C6BB9658
ED7CF8E6B37848E73F70F44CEABA55CD71FD2D3690A55A31A21CB9F3A4C0E998
8B53802399B6E22D8BA9230C4D518855DA74741A249103EEA2CB59608AA9C053
DE43015176D8B520374F1824C0BB9210FCD2DB74A70D8B82BEC9A24508A20472
139C11D99BFBE3F19706594CE9B9D31BC0E18B58A73225FD3F61C1E77CE3FC89
452957D4D4F3706A4B08559B7AB839B3A131D4F8AADC0405493BB9F1D7D4EFB8
E992AE5C11033B9E4ABEE0C93892C18BB56A3EA67F673743657704AC8357A9A0
98AB727A6C3E07427732318FB475CFB3118191C68AA6ACD8B73AEE7AB5D764B3
1A3F2880EC12A71DF8A3DE3783BE45CE0A1BBC429BA4DD33C317914BE4EAA81A
3191CE33DD5F7CEABFF720D4619FC4585FAE13F6013DC2AA19FE6D266B7C736A
8FF114F8048FB2AC67FB9E753C3FAD4DFDE9A6DA80A5A1CD6AA017C76E6246D9
F2A090096A286D38B7CCCCE08F4F218EE72C0452046B01B3E6B31A58989FFADB
0A795D2C2C6D44A680E566E753ACF85A4CFD49783FA209DE6960549AC18C1A41
B238AABE015B8881191DD23092F6D53D5C1CD68EBD038E098D32CB249E7AD49F
AE659BE3B79EBE269ACA32F86F59B0978B9B9383FCBD4D2EB8CE539FC07D9D5A
AE10EBEEB27C28AED5E3C9B39C6A9876779CD7F22CD75A3E296079D081E4C57D
4AD491BB00CE0BB3D6183C9AAE641E41A265C666F029712F83299C4DA83926D6
17401494E30EDEE101787C102051375750570CC8FC4EDDF2C94B08B2706111AB
7D342E8BDAE2843DAEE0AB50F6C970DAF12DD6C9325BC57B6F77FE77AE27ADC3
41D18A7AA33BA557FA8C21536C6CD50F6F4EC0EC1154AA360CC88559E381028E
090BF48869227D89E2465D88BF22262A06AC0CA4EECC03D853B86EE9D6D64C66
C1F1D1A411866221201AE726E3CC68B6E130AFD65411C4B7C3FE2474E6D2D038
63B5BD758A2D1C866A284B6B5E9B8662D1E2E85D8173A9E474E7475D03534B62
650F556ACF90B5C581CB81A633552B83867BFB409BBDA957C67CE6D92E2DB149
A0E0992E6C0E12988BD352C289FCC52AA75C86F475BDE461576FBA75F032E16E
1670467E02BDF2109185B29027A6530B88E6815A0F338993949F3C664470AFB2
592B5485D9EF0057507A1B2F92E79443A489F60485EF94D9F209F8B2DA6AF0C6
903A688D189E1442585BD20B737640F3A29CF3B055ED2D9879CE07BD8982C31A
471B49153930BD20FD20DC08EFF66FDD025186507256F7F70D55AEA91394ED68
2BD25FD6EFDF692554D46BCFBE74D4A89FC82FFEDFCED3A0EB5A8C229616709E
DD4096C1D4D817E396C0E054064B3E173C14293A79645C7F3E359DE5E3A7FC56
43B5EA52C15F5AEF6F3D61FEA776369098744ABEF7DD9C5953ABFA381D0F9F5B
279256E801391A949FB7671F3DCB141F5395AD9CB286C8B6C07D7DE2ADDB423B
67AFA3772B4B9303B1B444BFD0A2E0DABBF55B076E157727BB8331B85E8B3D5C
8945AAF3F9E64E2EEBE0E82A93C1D6CA5EEDA4FA3059151FD7506F9AF778B4A8
AC4B74D356F94193EE7169D5E104BDA920F3D8C391A5FDDF2318F6D505E8FA52
1F1FA52FFDEF81158A47BD89E38372CE2D82290BD895D56E47C08B520AD822DC
04982DCAD312CE4EBE815CDA6DB45A2972D906C53B7C1E0B5F7006777AD11B35
67663F7FF162F64ED65962C52C7A22BF7AF3BC490D204F779264257FFA0AFA05
C2842C534A411593D10A73460AEFC1EA268D4264FA4C353F3BFB7C57E0A3DEC9
0982E28A8D951207D7C494A7B2784E050A11FE8B1CC2CF1EE514D77041F132E0
0B13A76A105AB3EB6E486499B844379760DFA626612E7199553D3194EACC2427
DACC2C14EB92E2F97FC88E8FDDA774EBDBE7A953AC0D00CFC5CF8008EFBE21C3
8F9927527A4AAC3ACAEC38F69A904DCDEE56EA78FE086797F74F876028A65635
9E2893B59E81369BBB557FAEF2B8883F578DA60EAB40A16786F6245A907E7370
EAF4260A698AF73C67D4E5526B66BC38B0CC9669D8D3BCEAEC9258D51E366EC3
8928BFBF73E85DA1EF9EB934479F0419EF5000C021434CC2FDC35A4FDC88E365
F40B9D576708B6BE33B08E86B537A0CC012744A4BEA7FA46C14DB12BD2AF5BAD
E8DEFA9BA347858D3BB8EB28A7C6F669AB662DE1E3AC0A662937874153DA92EA
F57D6D9CAAC78333DC61135BA3E5397F55DF844F9EFE1E760903FCF680106924
58D1034D72FC882D95B42EF3C49DF42264477D48E5D1B1CA9524457069D85468
9ADC65E6392F65251B4A2D0D33D3D98D9ED750A11AF32C0D836F5C8E2AA1237A
2A3B90C01A3A170BD2F9696162D5E636F7535DD0522F8F045946921D5ED344F7
B9757955138DA2C7131A73F3A25BFF8FA085EEA42B12AADAD97EE23922F1A25B
3421F4AB7F9881955BDB0AD3FDECF6BBAE9CC424E277788953475AEB85C963B6
B554263016D1DAC8CE1540946D3EA0CEAC72D968371521C9E6A8801F32D21722
6E080143A8E35F88E3464A38D29ED62AC8639359548F49F5DD637806C51D4153
C8D50004B5612395461652E3B2D6B3BCCE3F5D699B3E248CB0114FFE3B3A960D
601FF23C0F633E2B85300045018A3498A8A37BF1F9C5C075430490AEA44D1C90
6490C0B96915C2ADD25EBF77DBC319F814A38BC01860F68BD84BB1AA7F88CB97
755F3116CE5E9F6A43919B8002474F27E4916B43DE80ED1D02F6E4D208B014C0
AE5E6B7F441AD12126999FA71ECFDD70607C4FFA2DA5F4A3A92158C3CD718576
504F3B9D2603204AD54BC9810C839CC30C496B072E2A32866596E215003C1631
6EDB46C22E108595967AFFF258D7599452856D5620F1206A3FDBC62113885869
579A7DF09D792221D3D05E19DDA12F3AC3AC19601CFE32E4FD82A99BD4AE7D32
1C91DA7A975C3CB34FD7FC8E312A6FAB2EEF9CCDC0D80A7CA3E11AD0416D0C67
688F27FCA99CD1D6D8F639604D9FA9D15E437FC6852BCB4D2842D040D7975473
8C7E66D77CA64AA2EDC679ADAE9EF55674A96B29C2F588D217E122A929D7D654
09A065B0841133F434711AE9C5EAB9E4769336F918DFC2F1CF573BF3F8EC5BBD
41F675F0C340796F421E63130D01DEA618BD74F66598FCCEDC84493C1478FDFC
8344AE7507E2C62ECA4C3EF29948A6B4F92C439FDC8F59AAC8AAD43751416333
00549D0DE355BF9736395C609B315ACC4F49566EDF37EE388D1DEEEFC2CA7907
FC34C9375C9C68C9280B1B3C036DCDB28BC205F182FBB33670743AE37D58A951
8615EC886218BAB5F7CBAF859089FC14440C04DD616BE4218E690D5614DEF844
2FD817264DE24CD2C632CCDC147C7C18040443B40B3F3301C8D57EECCAA98DDC
63A7EB8B565D7FF2B6769CB1367B30E6B09E4A8785BEECEDC6674AE689480F13
2305E5A2CAC0DAFBC40851F97690F67792DAF2410F193EBE858C6B2319D1BF28
1990AA5FA0EFE1D8127A8D50398A9AD2B26B9B343329E622A0801518AE013748
EF5879638250E227FB0ADF0CBA452D2D6C23FB8CF651A7798C58CF327A7A4CDC
B4DAC6C83A858307703A6F79AC6ED05FAAC5784B901DE5AC2088ED5D37F3F178
A3591E2B70F647AD9B8361B4569A079F2F389059DCBC132F76EEF3C7DC52331D
F29D5FED7CDFBF9998C5F193E054A99C73DA19135989865FA5A4339748717F52
1DC033649EAA130E8C9DF6DDC54796E433D02484EB4B9E3AACED1BD756051CE1
ED882DB34E1768C8AC899FBC39219543AEE346A7BD024F68B5F0DB5390EA23F5
FB3963CCE29430939923F73AA4A1B8DCD067A4C16051CBFBF2B46F01012CC94E
2FB30C1E4411918E892630F7B59F4353D9020ADF5271790BBBB6BA3D4E22B146
00616D034B3F80AD2AD5D4E1DAE678029CC028DB4829A0CCC2D98CFA8E2EA951
7AC5FF1A9E33AD5279513FDB8D3E5253808D085F082F84A35063986A42B542FA
3D0FCCC10C6940EE1CA2B2B5C34C07B05F97EDFF93D8E174301EEBD0977F8659
B40D7E85F74D046AEA3C5994AD78F325BDD982640406DC1B9087BCC556026166
1FE67FA9951314DCD80E8F9615BC7A089E266CB3065F73BBA0C07A8CB6EB0F39
D597AC47789BE3B39BCD655A60561C997893782E1CAF14031DE9D944B5F40A8A
1C2ED11A538528B5E6EE8DA7DD5419C01F4EAFF7E0A94F45A70642E33901BBCF
8217B679DC18C78E4D82CCAE8A5DFB43734456123A818F61C00FF3C928E44129
4358D48B80580CE804C115D400DEDA7EBB0886F0FDDE4C5502B0C2E72C8F2837
1D202C7DBEE6061035EC984B19E3380AF2ABFCC8785D5EC16AB224272F39ED8C
44ACEA139721F3103C56A3AFE7390F3A465372AEE51BCDAE41B25AF5664D6F91
F52C9B9B9EEA58E12234E1989AF98A367D383E2D0B01A1AD95AEC9EE980A61B6
CC7E133E834E4590F08FCEEBD7CA01CB56E4A8051D583BAFDAE491950C8C6685
442ADD3B155D2546BD09A10D2B68DC9FB986620AEF072D50E1936E0DA5CA97EA
5ACEA91A4B0DC2B372C5945C3D3461989C42084C7808181BC91DECCB9D94D827
07417BF6F6BE0F3A0AC9521DF68F3E0AD675C986249A99521F548205022EB82F
C5598792E6234F89FE506189C22E9F973007E3329B26721BD21D81447901661F
067274AAFB586524398F9A7EC207A030FFDEEC74F6237573925F50085CBCEA58
85A831ACC7B80942D7B3DE21F80AA86430C519C7027151778E89279A6E30A559
232E815F383B0A25B444940CBDBD3C7C6C68EDD11A210659A39038B705DE11C4
6C18E4D5B0DA3A77EB569AF967CBF902D0E10FC7AB7FE15EAAC8E06C8324FD28
29A59BA784B5DFF628ABA72089EECF1F5B9A1D79CE19D85CCFFBB9F0C48BF24D
419817B1F0774794C9DFF4A260D6F1559E2504D276E2666199F0E9189A298EEC
33D5F831D38B7781691C7B7DBD6463C5143F3E14D39AA9B5CF39134CE445F2E7
C4FEE742AD1083A47D9A4FC3255AA158617026B46BB5042A9D0DD78EB75AAF36
97E3478C59A101C214E49C482C80463EC47B4464646EB331C1AF573CAF391D04
E2579E3493E21899A75E5CED3DEA144474868E1800947EE35AC6D3FA697104A9
0AD8D2AE473EA8991CA226B7D98C06388472915736114F8960A5CFAEFA039CCE
77213CF11081D6CF027B38091C339DFA7885BF02751DF2BCFF089BF5E0062206
62CB8FA46B9E2F3D350BC1BFC6328B500DC6514EFB52B77201E711423EEA28CB
589F608CF77F2790B2ABD4196B84CF7F6DAF6923CDBF47F7F7579D6AAFE2D12F
DE3B37A242492C66225D69F8550504C6EFA0FE031D1FE7491BD080DEA1E730EC
DC1A40686D66849797A135F03AF178A9EEFAD9497AFC770DB792C81557C02A63
B018BC5B855863A04DAAD83E31FC817D64E836C40D5700A106977D0753233A2C
A72FB4BB65E5684FFB4762F586E14C025605DFA946A7C1434C3CD060A0059643
607E116A819D42ABC7548CB77FD5484C6EB4DEAE334D03A6860169D1CCFFC50F
6D77C0642323325FA15F046670FAC1C61B92467C458641CF5927887CD3EDFD61
B60FAC50AC88DA8AF39B6A6E6821FD7A54E884F526E2E9FEE1D706CE199BBF85
8DAC8770778620192CE64F2B8C207363E1CCA0CD4E3569C80F6316F35863A67F
6B7C34A4DF45E4779AC31B68395CB2B07D5C27F232D2AAB899AA4404654FE6EB
9935E02C9D4A42A705CB5510661FE4E18C961736615D484E9ACEDCEC63B62C06
4BE8307914986FEECA4DDB87943BD71519B1B963979FCA76A858A0FF3CEB5A59
A4FBCCB6D6CBAF3FA9085930E76FF539ABE356A644ED3CC1D9122182CFFF10A9
A87231D231841F16528E522D57129AECE189556B3C0C4CFB149EF74F10C7526A
B6831A9DF6DABC9702BB06DF62507A1D811D4B86AFF04F0DB2201636F84FA2AA
CF1E299AB2BFCF0CCBC511D268C7608829AE42F33C66D5B387272D5D79B716B1
9B4F890B2B1B4827E844D6206CFF2D510752A75284FE1D6BA13B142AA5F33479
37E1EFBE6E659F73A552518B94C813A8B6FC625CEF5EDBED5F0DEB6B32C9E4FF
8B43B66BCAE485F1F00B7B0B836A39EB612E6F888D9DEAAADE59601D0DE0E239
888BF6EA15AEC9C0043E94788BB2B97F6731BEF4C3CF70199949A70CE90359BE
A8CA4E663ADCDE8D75AE1F9625CDD9424ED40E197F640282B04EE248D1B275B0
4FD6D1BD75022967A7F7D18F297EF444958B6A9A95605D03713159BD9345ED06
B1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: DejaVuSerif-Bold
%!PS-AdobeFont-1.0: DejaVuSerif-Bold 2.33
%%Title: DejaVuSerif-Bold
%Version: 2.33
%%CreationDate: Tue Jul 26 17:07:04 2011
%%Creator: ,,,
%Copyright: Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
%Copyright: DejaVu changes are in public domain
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.000488281 0 0 0.000488281 0 0 ]readonly def
/FontName /DejaVuSerif-Bold def
/FontBBox {-1712 -797 3678 2345 }readonly def
/PaintType 0 def
/FontInfo 11 dict dup begin
/version (2.33) readonly def
/Notice (Copyright \050c\051 2003 by Bitstream, Inc. All Rights Reserved.\012DejaVu changes are in public domain\012) readonly def
% Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
% DejaVu changes are in public domain
/FullName (DejaVu Serif Bold) readonly def
/FamilyName (DejaVu Serif) readonly def
/Weight (Bold) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -85 def
/UnderlineThickness 90 def
/ascent 1556 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE366EF37D4823F376DD9F7E4CBB15
DA8E93E91E84D36BA5A5B06F3A46B45692ED11C8FC76C0B0B3157F699878E2ED
D89511CBE105EB42FD76309DA91EEEE85F1AED9920648285111A1690C4AE2638
C0601A7DBC8D2D41CA8C4F9DC7A6AA5C51015D8BA926831892381DCA7E61E230
5BB3BD5632D276B929D97D4836F9703461BED94450CDD2660430A0D13F49EB47
72EB0371E38B92F488FD6E19C944811D4AA52CCC359210320B484568E5060BC5
4D2FDAC73C49BA0168FB5B1B18DA73B90B191ADB82B09D7A67C7148505FD5A8C
A6110FC44E016E0BCA5CA8727E32D7CE20AC8674F4F7421EBBE7669A225FDE04
258B0C44618E679FCB9ABD7AFBDBAE825AF06C35A619F50ED90F6AD57F8CE97A
0F39416A5EA6390B9D809081821D81DB4CEFE8D7134C5EB76C13010C0FAFBA08
D415AAC188B18036E5FB2DE31A0C6645063867D5EB16D89559B4F44B0F8D56BE
E53F4313B44A00812E8657CF6F1C3EC33D3D3FBECD050BF2F2FB8891EE47E992
2B76503E5E74ECC4884BA3B4665A3F29E2827828712DA7484C6EEED1A7E80088
1D76836C78D8952A27E9B53834B073F665A73271E3388D98804187798EA34710
576B7F13EDB8C10C712533807667898F6AB0BBD80D1DF8402C7194ABF7672895
44AA3DA1F06793F85BA6A8BC677E5105793E25A56B1FF9C2E1356174B0F4B76D
F098272E811C6BAE1620F1F9F87DD03AE8FE3FA5C7D2C5E08F380DE015AB1563
D62BAA94AA30F34840313BFC85BD23067FBF900674CC81A7365DA9984BD6376E
BA8B9E1A42D02C311EDF679B218B41F084346F2BEB0C06E05A3B7E85B0568C67
C35861B94816CE97E30AFFF44E5366F69729246F4C1979A3B360E351C29A83FD
BDDF79405BA69A5549CD6AA51D903496989ABFE27861448CF976C217FEF53831
9EF801E5D2C2FD7451709370DE212D12AF1DB77EE2B6831C13462459034B865B
EA8FA83A9DE296B4F26E026FBEBF29947C941D1AA655E437505EA06DCD6F080A
B1E1C660A3F01AB1C2E09F25D875F4672031BC16C495F0C3EACCC35813AC4A96
BBCD4632AE26912FC4058EBFFAC4F06A98D4315B5CD829D4A2519C2FA404752C
8EFFA70DF2A9E7366B7DC8B127CAF386695E7DD9FE9AFEC61AEF51A2BA973618
9076D7A9062F7D124E813DE8BA527BAEF9C8585C34637966B710BD51188832C2
251A86D03D07A9DCE8F4FF74E71D29A83650624337709C12DE762B15EDADAB8C
EBEEA7F9EAB26C2BF9799348C16C8AEB2DC1024A85BC2E00490AEC73C9D503A8
D4AE95DDFAD109387DA777DB9830FF4BF11C225ECE0BC6B07696B7B9441B74E0
F9D317762A4DDDAA7EAEE12D127B1F0593E187015AC3DA984A6312972DD589F0
2E9734EE41EA19F8D85E4A0119AABA15652FD5DDB23E073F06EC6AC01802B977
B3D12E057B8F6D53B2CA3B8F457C7819E6733AF633332FB3D3FDF9E7F4AA916D
98B5B236BCB7B2EB1D31C6ED43C0A9507F079F11D0895808E4FC9DE9294B3924
09CA50342329961AF8A7B8B57A4D288A0B990394D885172CDDE336828C5C7E9A
A852264BE6AE1947CB46C3DD0862F0FBBD32320A4A285316A90DBE0C14A45C86
BE8581C5022080D44E19B1BA9FC68D7DDFAAE97D3A4FC85F59DC3DA36970F543
4C787969EE56FF89C7C8F62D0B1640FD2B5839971AECBE8C0B2A0F3D408C45B4
11D81403F06C9110C3BCA13BA9B4E3936EC26E0C19BBAABD1264CD29CBF54A03
BCB7F041C87B293A1904E40AC8208B9D8F5541D7508CCF47D0472946ED167DFA
6FD6DC36047613EFC7C1CD331BF1FE33474F32CECC3F5D06E754359C53D0C150
77E17CE13F78F47442959C4B9E57A6D1A43974CFC633315BDC46D8ADD727058D
047EBAEC3266B9215773BD7963AE764A0FF306EF32C8D8527D30B073692206BD
2D1702D5E69DACF16E052748906A7BAACB812696681A7F9814347ECCFAC78379
49B1DE5FBA6284076BD9A43195E2EE6FC8323E0B84CF97D4D7873323BB96E862
E46E6D1840404216137D3F85FA5AB6F8C2A21D74B276CFE534F5FA3D46042577
4F0772692D65F17C81C86000A99370C24B0915E8CE35A1830914E7EFB9253FB8
1F0356459220E355D4244577C519B406F9AE91F681638DCF9E4D82E76D1D6DFE
17475CD8FF28DACAFB858FBAE2994E849CEB49B4E110A50030F777BE81A26687
B8A3BF6D8C5EBF056B001BBF474DC180134FB646827FBAFD181A79A9A22166EB
B0F28A59EB80C8D6EF2E534E6176D8B832C9D6C1C48775C7AF4A3B85B8952D64
F673C6224BD76514AA1ABE39A43B0C9FB0BDBB1D2B21B27B051605695D907A75
0DCD1BA592785E1AED175C5C0056E6B45205EA417939B3E216AFD97195E63484
70368EB85D6555D5D9B88CD70D3F14F6BFE287F4961D893CE4C062D8ED0668D3
7561C11ABCB2F3153DEECA9EF9640BB138EB151EFA1D57E04DAC81CDFDA92469
F9E6C1DEE4FC0E5A866CFDD14826EEE710FE847AD74FEA8FD14EA894C90ECC2C
4931DF4535E0E689089ED80E9A60E20B6C600BF6D78CAA30F6903E0643AA930A
540C6A14FDE732B64EA7CC61182E69B47EA4012783B1ACCA2703C6AE2E48719D
4A5233D8B5BBD83D4E5A5C4A2C87D4E4319A9618582F906F293F50E21077D224
1A991E18A7351F963E6FBDF54C0D5858A7A91792B9E0F09206559E6DBC1B8A9A
ABDDA62A08E7F52DEF59910559E575F7F5EE060F29E72DB4732479D58DF8DF39
C0D56044CE46DC59FA4E060D03955CB7505505D76DAB9DF9C57941E4FDA6AC52
4A46B69FEBD48D9FFEB825CC43AB1DD27F05C023018A3101AFB5F60462CE8A58
2E2BE01D68177F8F70C8A173FAAD0BDAF7E1081B3673FC5E83D519BF105D2891
172DF407C5A8095EDEDCD5D302B29C3EC07B8797F675574DE2E1ACCDA6AF0B5B
D63BA0D9D20EBBBF04F2AD7FAF614FBA02B0643CBA5E2F47E3982DCEAAD6FA56
59449A8CFBAFDF5A871FFBAF066F314F7D35A19C7D7EC5D092FC1CD3404EBDB5
FEF70420B2961051998C010CB163AB69CCC50AE343C61B2541FCFAD20291B9B9
C20657442A7949159167494E2D74C9012A3909CF7FDB5C83C391E81235562DC0
DDE4D1AC707FE143D6DDBAEA79759AF7E916ABE131D652D8B6035E9848CB0A42
4439DCE8CF66FDEB7E795FABDE5A405E01E397D100BCBBE07C087F2F32E95B67
639E9ED4F404F22426A887682A595C89CDC119A7326154B5F17B9ECABDADEEF0
F098A94661A11E5831349E0CF7BC9D85C462FD8B91E68718280D830A73CD3C17
B36B321DC48CD0F10C1323ABAA9F46E52E434E73FD0BDEE6B6DC510F2E2F0446
37C8D65567F429F7A8D0B800CF2781926F903910DD39980B5CD75FB2BE1E5E40
F17770F4F79F2A83DC02A29E28E0AF799630D06C47151A80737CB2210894B945
69B1053CC9F137880CCD6105DAF4F8093E5056A9A6FEC4B735AA6B1B907FDF66
47CA050F3F7F292FE2328237203FD8568B99E002CAE40CC89D08E3124B51289F
76A77E7FECD0C0B8AD5960D248D10B675BA8502BC4ED047CA796467546536086
4AAC13616234983DFA628CBE962E7BFA9D825715FAE6C0003E1A0AC99A065B25
01578813499FE4824EFA1C3A925FA55DF00DC78E93DC743BE70096146E77FB30
47E34274F95ECE098D5A0BD62615EDA3F9374C3187D1D906E9DDE9F97EFCDE6C
B9472074570AD4F0826BC7C1A7400CD16A787B3F0974FFE1EB6A5F2EE1D52F5E
97BBE013E06E721951905CA797775E89ECF130A00C078104BC1DA4F36BF59A66
56BF3DF895F0A5721EA17D04535F9897722A59B36112FCF5AC8B45025062A961
4014A76852008EBBB7ECA4663671007DB10A780487D8EE067AFFC4F0F4B4327C
D55C345ACFB459AF3B050716FCAB3B8400836958940CB8B1CE9538F930419178
4A45CE0E22057A7BB2BE82A9C25C8E1D8854598D4CD9FDF1640EDAFC48EA5E21
AA47C2057421626C042CEFE62FBF56B85F7289D83A89B0E16423A8406A91A689
2A4E30FBFF37C5DA8C0A9F2EA70314B388E1BCC489D7203B64BFAF4968ECD0AF
6DB1EA8F1068E4EC483630080A93E142D45B6F03118E3BF2AA45FBF8927EB80C
12BA0BAEFA1593B64610DFE2C8F8143995B355ACF60CE20DD0118EC6F1CE4C8B
B8A2DFCD3DF14AAF39C135C96F65A6EF6BB80DFC78FDE7283533C5871C238C89
A3BCC8435788ABBE3E16D9420DAA3384E6BD73CA7BC065D66EDBAF6991651B94
066AEAA2C04CC8947FE1F6DF65104D3039B654F12A62C2F7BBCAF61BF18BAFCE
64A63DB17995DA12E9DC63A0AE86E25F50EC03E3813512E7B52C9E1B81A3A875
1B7B444CDECFD1D1E6EBAD40F6E5C82DE33894F69BA43F2B7FA8413D12C79DFB
002E84A5A4B7D422B5166741E4D383856A40B2FC7AD23B894722B95AAF1AAFAE
9C33773C4EE8CF233CCAC209E22FA3741C180940BA28A7DBB6DB8D49A3B7BBDF
92A3605103755A43CA9CDD482C9F58B9262E82ACFDEFF23C5586F1678AC51E19
289B016E99BB190AA03C4600104F39FE681F48B18A502CD0DF2CB76A18E9B851
F8E13CA963CABCE0334D4DE7CDDC68151F68B5B56FBEE678FC75A9C8C9E32BD3
528BF503841577F4675F2A2C6AFF9112EEF5C848D7DFCEC8440D12FB0D61DA48
62A2546A118AD85CB36B5B0952C39B8F5289AA97D0F6E4216254CA055C063E7E
49D2618F36EC160719B5AC253A5F4DFDAC0A0C8EA09AFFEDF53E459A3C5ECABF
BCDE9967A4A4069844CC754238576EDB7992EEE8406A082F1A28605E8A4551F4
85C5BC88DC2CF6DE8544ACC2392FB864C990285637ABADF579CBA1CBA9FAD91B
0044338DBEDC425588147A2867676D5163A5F21A91588826C4037DBB8BFB85F9
190072D92E9959C80EBE90292172E0786405E3D26E8CC080426CA26819A75381
425315540F0000771DBBB09113493A047661D1F9729657D5FAC5F03D6A6FD280
C52ADF035261BBDB42172EDB5FE230CED8EA98F5D1CFCDFA3BA167226859C4F1
145E925C47DB91215612A00ED889A957F557D2B5692B73B4B443BD21780029AE
B4D5AA5FED77719AA84994364F7A4E1B0866E116F4675AB99FA9787A61CC88B7
8AE0C40615945A49AA6F97E09BB2D55473103E29AA10144B9EF8CACFCD25F537
A7CBD5E0C128A5C5CF9724F473BB049466F725322B7673E6084BA7890CB7BE7F
79AEBFD1595A8FBF7989DFC9B6635AB59BC9CF5A696D33ADBFB151D8BE2B4869
0CD10E006215F3617272B5FA8F8D732B636C3EAD9378398DD9BCE4B51BF0FE3A
80276CD9F2B05DCF7B6262E3453B896EB409B40EE6FEEB8F77DB7D76574770F2
FB07C09BF758BA2F94677B7D95C7536CEFF84861EE60DE79496DE812144B5CD2
CC0CD4A6798737F473066E8CB8FF7AD319233F5725EBE7A1885A08286F35FA06
509BD88A2069240DF5A0243B54330DBA0702C7BA365A40ED4FBA068D87488337
D6B8A49B01A33D0CB7304DF09CBAA650F5915CF01822BD9DD4EB0CDDA0842B78
29307BFD8A0ABFB660F4B858C01A0C1652637459D6D816F39A44BB36F464F6D5
CF812C75DC682C289E0FA63332DB2B087F00E9F64918C9BE0B97C401595681B5
6ADBA11E7E120FFFCA8F49BA4E185A533C640724610D7BE23D55705AEE3B3BF7
46E4D85ECCBC801F6EC84B5CA0BC9E3E17E540756C01B1C4192BB26C9B91BF73
C3DADFC93EE37E675551A292C56E2BF5B93A6FFE68E8E4E4FA1E20C2C724C13A
A6818E25EC2812BF790F25D7874904C2BB6B5D5FCAD78064C1EBFB7F91657BA1
9428105F1C1829F0D7E29359723DBE0D946628A5EA2C1F80F809DFCDAF3F8D05
1AD5C04C594D6170C3FD61607BBB47F05673FC5369E62D3264A16FD88ECBDFB9
AE8B861BECC8202D041EE363A854650A750E5FCBE8D2C9CA4B08565DF70512C1
8D1951924586AD745404F06771645EE0BB2581812A2CD9BB92B547079F1F1544
B817AA0223558BB65D35CC0E2554B3A1CDFF0DBCAC036115ACC2E101DD04779D
1D7DA7C626EA03A2E073BA2DC76132130B5A1F4DF0E05B45734126D7F49B7BB3
9453ED710A8BA282C09691A325F773014BC05ADA18DB26B5E2953814FBE4ACBB
8C414A91DAFF185D0570830CFCEEDE48CCB7B8DA9755A9AA6CCB3E787B46158B
822607B97D7DFDEC3E034432A1DED8D4862D3D4AF2D4B3A53C10FCB2CCAB9E7E
3193A7EE5ED54A58F8B1EC7B78C45A426E330D058CE29B9DFD1C375F33D47A94
92929B5170AA9EBAF61AA7A2A977AB60BEA8748A8653448BC073037F8DA04A1E
1146CD805086771A19A76ADE573451A5A22BCBF0D6A339181F19FBD60BBB7E8B
04C7627E9FDC68EBCD92FB394DC80A7AD93402B93119BD2BEA37B990615F15E2
D1F372EE885859BB1AAEDE284E1FFA7253B2BDC4688FD8CFAB30C1E17237B8D7
2C960315B16E8E26434217AB8EF8BCDB8C2F7706DBB0186A6CB635330CDF1CC0
433BEDDD7C7D7A5C744FE748C93FA63C009B32D4E532BA176D271788738D21D6
FD8DA36148F7335B28849C632B37208A06F0B5025594367389246E71CC07379D
B5684FE50309423615F8E26C28C29A9A571DAF8B4BF622CD4F50CBB134AF18AF
C4CDBE2AD8BB94446086FE93D6960362AFA908FCC2037CF7911EA78C4CE6A48F
CC2E18C95CF27DC1EA30BBBCDC325315865D1073E6B7C8EF07F5A3E47BBE8EC3
12768DDD750D624F71B13D4FFA05D3D8CAA7EA0717F584F5A361D284CC48F56C
20D4B77CF77AD15AACB90B2C6E01D43CE307AE5A8D534203F339909B87218068
07C4B280EB85F467B09C837C252C1E7486E04A86D2A9F714E12ADEC865F14E14
DB2DE27C8BD35600775FF26CC271E12C6719EE4E00576DA30BB94BF0DFD10BDC
484CE123E6C8880CB5BD7AD7C8F6C422BEC958588A7D406CCBAEC4238AA0D5D9
A2ECE770360A69D958A16D141D240A959F59D58589C4A0A0D686D244B14D4689
F7CCC9C4270280D8C45D72F102616EBAEA0C8445E6C0FF9CA58062DEAF622A3E
24E43AC32915E2DD45B63858D38A7F62A3C9E6E90584A16F424CE18375EB248C
7E8DF9ACCF1AA5B6BD55A0F850BA7FBB0E80A8600920D018804D712E93B820EC
F4658380D3F464753D6434A2A9985E8DB1F08A0243100B39A4A9CF565FF9B216
151ACF02B0890CD212138F8D0049FDE1F9A87D1D275972F33932D153F7FBFE92
A4F2807BE51C6CD09D71994EE172309C15E58406E9F016C9CD7700D2371B4DF7
F2D24A25623FB0919A561A8A0FB206B6AFBB97EB505BEB707D168C974B4997CD
1925601F4B9A0F510060E9C3D90C83B298522C38B3A0770AA0ADA9158A2774F9
BDD6C2CDF16E6E31E18066BC3EF96FA6E4452CCEE6FF4916014F0A17F332C36C
21FEDF792ED6B4804CD113FD6C74FBB8BA56078C6F7CD4635845C8DECFA73B07
BBE7B7A79CAA6905D49CECD3549B632110B10D1CF05E62C70957C44FD2199DB0
F994C41173ABB09DDB665765E9C677148469D8A7D570A360AA8D68F720E7D412
986CCD4999938C1194C60AC0FBF1DA0E2B3A74A97E4BC6903E6BA3C278724B25
27774F245D3DB5038C62F3DBEE507F79A3B1272085C4A0F9B78E4B041DAB2230
27F979ED51478849BF758C3203E19DD04A9FA170BD23E1BC82201D2A49562A5D
BAF7829F26AE4BDDEA76E41BEFC5A8F562ADCECDCD6D6DE859F14EBA00889B34
680BD9D61DB322C4D47D2283DBFB189B6578EF999F25ECA2EADDCC7CF18185F0
56EF13FFCD8C2DDE7A60B8CB96E5D1EB0B9563E272E3D2ABCCBC64A14C8AE567
37FAFD38D3EDD94C7EA917B3D0F9F54D4FCF37F2EA5414472D2E1E72EB6E20DE
8096399754F948E4D3DD9B3405AE9761ED41D0C98E561001051A26F3196FC295
24EA8E056E1531E07465AFA65BB659F742EAF18494A0E49872C2CEF6D98A7F51
4932342917B787EAB3391CB620CACD3A22A7881910197E470E7277AAFACDF76B
0B411FF88F3A7CE3E107FA359F65ACB1B4ABBEB288895220C4E87E1C0F0DF0AD
2986119B8135619D34F7539AB063EAAA687591852C131AAF9EFAD7CE0257919E
EB58CF7931149B6CFA3CC38C0F14A4424E00738F4D305CE85F7416979CD2644D
92D082436FEB29E12D9F23D28DFA29E0566BC4400B72EC09A99E846384818A44
E541E4E108DFE5E96C64F6E4BC4E3FB452F92DE7F4553BF893C527351E25CC98
1E526F1D803C93B2A2A07D4200535F51BE3697B845D254B0F9C1787304D67AA4
B0F56017059D02B6A736712541A117E690134A5915D13634B978B88CAAD4D543
B49841D3CAA4C16EE8F2F9A7D5DF58F59DF85714824E939267229AAFDE9C8C38
7F15F064F42FE3561FE070C55664EFEFDC9AD662E551942EB20A51694E5EC481
D8E9EF87B1A4743B4C506F4F4A5A37C01FA41DBFBFB965C82A64DAB17A35CF2E
4C380E50E1797F855826EAB926A0528F1F6990A6723DEA77257E1938AD3C1830
CC3107EC9AEA1A84224E1BEFDA839D71B13B9D7CF074B203700E347996176892
5254C03FA4A95A2283DD7C392F9C631B18DD0F4EABE5B9422B3CE88E98CAD55A
823A176D8387CA420A441980D3E8666043259ABCD57891E7F42C3CF6E78046CA
0B3AAE98A934A369BB558B366A02AD194E29C31962FFED37AA64ABBF52B46CDE
17FB65DE01DAFB33F78AA2C3B1EECD4C531159CE0ACEDD11F7C35A6AC6CD1836
9260DDBB2AC10BC690D77EEC2BABBCF15F65E4462C1B02971D7BC262167EFF4E
8D5CCC5907CD71FC691BA20A0CA1C0442D50ABEA49F57124C87F8C73DE3B805A
31F7B99A44D2966877CD97DD0109A165066FC5E4DE68ED3594A153D2A8470905
4F39D525173AF9D23A13A2AD86B6500029D4B3A4CD4A983EB668BFEEBA3E9DEE
0B5977E2DF36A0C4650E27186B7994460F8745D356E668A7DEBC090E2D17C2BB
2A5B95C74E8A034E0D127BD7489259C08D43F1F368DDFC99D4CEF5CDA729F63C
3B79D46F04510B870E8B02E5D7FD2E6A4C530BEEF47AFF584AE58FE4D0567E6D
FB9A9116BE4FA65FE194C008E4A136254F7CA64E897C1FC7044C7407BD9943C0
BB7E69F8F055B22C7A5BCF585874F70E711ACC7DEAD5367CC024F537B106132B
E7463F1D219AEB202A18609B0829B8708A74090992DB69EC28800B9CF9A3F50C
7723C309E86D08D9470B9A6972E5CCF8051DE33D6A452546DAF9024381ADFD70
A1420EC17C4D591725E1DDB0CD4A35542CD4F368A2679830491BAB215571C044
14671457BDD466F462C2F7B701555CB0E4836674B0FFE7ED62A8DAA4ADF669D6
0D8ED03051DF90A58EC647390249C650231CC439A456CB3C669A9BB074252BDB
DDFFE2F94C817C7F7170650FDB189E8BE4FC5BB8479D74B550E283D454FC449C
ADB233560528BA6CA1264AADA1AF2EC737F01E60268517F1857924960919CA52
647F3B9B8FAE791F56987B7BFC8A856B0E903D079C6682983EE7D650CE1DB605
9E6E13D1D265B6E8BD4581B70D267827410A305D2DE0A9ABBAD964197FDC6B98
3247A969107C5AB8EBD55E6ABE44B3FCFCDF52B82C63260045B57E5AA7CFE7F0
4EC5C845A6888082CF324D6A4219B7F4B80F2B46475E70EE9F908DA6017829E0
74E8086763588F41099BA4E8F23F39A75ED006AA52A23114FD630D217E27643D
0173473298E05D39AC0DDDA3DA9B2830A6D250B1A80E5987AD0A59962E57B57E
66E977EA13AC63F7EB2F2BFAFFD353E3494D33552B73F9C8739FD271505E79CE
7C6E68AC14EEB7D5B335142FAFA3A14EAED8AF1E2046A71A59F056B37F056671
37213AEA9725A34CE745B5DB81D85D1B802EC1EC2558B011897D9C8B35F019D4
152A80FCBA60E7518B3E99D3AF05CA35E65B731227171280E05A0C16B47949F1
FF10A79154D2D0F4AD45139C5F99DC6CAAFCF52983DD048E774F7189A75015AF
81B45F690AFD82865D0FE2D708B726ABDED54A164319050D74A9FC2EE5438674
9A19D1AB02A283E85FE9A3D69776F0568F98F68B7D056BA7060212A1058F0B05
B4FAA0CD5FB8719517B7520E85EF02CF70EA81E944BB78B2510FD5E96397AE77
436362151A9384AE7724A29B7E72A8C018D1ACB262E70EC9BEF8C4560FE2F8F6
3562352D63EDD50BA51EAD8C3BC599A91E7C5434EA867C346CC4F184DF0ECCDE
62F27DEE6BFC5E79120ECC8B9520F90CC716E3E0FE8D8BFD3506531C79202D3A
B929B32AEC0947D1ECB82B90FB04F1751E8155D046D0C8BBE8B77A3EA2591E65
1BE480828E7F5B7335A2A07B20BF381D94A2EDD5B21E328A19B91D4E7A110791
B605FFDCD79451F048485550B0CA93094791A3BA2EE2238CD62114AC92BAB811
63F911543E043B4E4411720E20FB5F3F4E4E7BC009094E7866A24E5B18C3D309
F6ECDBC6BC64399DFD6BFB8953C0FB1E45117ED1FE4BBDE98EDBBA4E1A4F2DCF
05534ADC9093EC89B975E7707A6C14E3F7990BD3851541BDDF9656738696A679
EE627D4FF852EB06A1440F5A721C419C1F2D5B78988070CDDB60B0658E41A9E2
8B49E189CCD6758BB5F600CE0661A000DCAE341E6D6FAC78424A9DD183928F91
EB13E7BB5FDB2F2C71C6B0B117AA039E23F4CFC91B0A48553A7A28D1067D4947
F8501B061371500AC7FA2630BECCA0318EECE752351966C8074201A780CFBF1A
2E4C910FCA60F42C07AC275269F90A77674208D614EEF049816690D4557FC6B5
9258558854484428AB34653AAC6A9C8576E0FA09785EF5F810D6AA3F5D34E232
5C51C8A21E06037F698463D3A185272FCCDA3C00BB584ECC2F5D7BD92293B12C
D4D7D51E4730636AA798893C8F3733FD4B9FDEE9731B96C145435B3E463EA9C1
2F90E2BACF6409D12E90D1BBBB4BD84130D816DB1255CB2548E07BB788B39CDF
906B1A059A11169A5B2C76EA5A51B30D3B25734FC5CBAECF18719808E068518D
4023F285AB08FBBA9C37ABAEB9007C440C820DEDBBD00C5F48DF6EABA12A474E
AE72AF06EA37D47C37C5AA30FB632438C9804862ABCD1BEA3DEDCEC2ECE5648B
EC3EB501C175FDF1F06C39E4E61136472EEDB930465FAA315DBD5636CBBD065B
D7A4D16A34EA61BEED88C4466015B6729B97CE4A9701A8E5F050F70FFCEA8465
D06BC006484C6265D4832579D8327E107B6409F3AA3672C66C81B3B0012236CF
B65C98826F5364E94556FE1C71C5688E4A4674D3597E04C53F7D7957D49C7A4F
03E49A7E5582F63AE7A69331932247DEFD87B2400D2F7C13BCE767C23631A8D4
CB1614A35F9AAE1AC272EDA8A146AA0C86A7A0BF5ECC7CD0BEE233FC63CF4998
0F0736857D9B7041B7BAD07F7CAB0B3E70E95DA34107071A497E405DB4DB0511
7191BFFBB1DF5E6C15E7C36981723ABDFCA754D1A51863063592559C2034CA98
C6D1B895D7145B79D5EA71A6996465609C033D525D51D31CD0CE94F665B1A989
FD78E8AF223EA4CBA0DE430B77778906CCD5BA1A85AB58C3DBE99A3FD44154B4
FC04E017597D1E99ED342D03E0C4B5D0A21DD41C399072B08EA7FD325496990F
E31E58128CEB7E5C4DDF9422879682A8D0D249CDBAB31345F45FCE24247C1F7A
4478EDF4992A9502A237B54B62EE3D14BC066767276E74269CA013E0FD1432DB
F960CC5AD8CB12C2C7240355ED6CB82C8D8E354D0FB31A6BEA0A39EF17AD301B
E23E5FD7B77495AF13BF857345CF74C9658C1360A82FF27EDE5220B14C9AF0F3
1275DF573E4A830E9342674F814BAE3BBDFFCCAA3EFA2BF0762C9605CFAC6A5F
3EF9A9280384C5533F7843E6670B24924A1638DCD31FB2283B5F192975AADB6E
27FA797876A169C6C28E3394A8764C9E185E8609A92942B5CF2DD974B5722EB2
26454ED2621A96F3414D8B6EFD08CAD4892A7C0E0344E6E5EAD35247BC3F98D0
52A8B13D00F2CCDE7BE9ED6E4E7F4EE6236C07308DAA03A08A1FF80FD881C0B2
CFA746E35419719E389930B4995515BC062E54AEAE145278921876C126309F50
DDE29E0D3C6014BD8C262249CE196052170B61CDC0BA85B1853404FF0280A54C
E7F58FF8AF3D4A1037B93CCA2F676038F36525D6C28B74D4A6B4E9FD1138DE82
241D47663D6B56106DF09A44A94A510C56EAD7845593CB37D909A40F36DBB2DE
C1835A3C0A827E974E1B8452166FF01B1497BD7024F4EA466D6F42D9458873ED
27D851A94ABD066FFA0C1E746C793E02DB9E6774778D2EEBAEA4A88D11C13595
D786FB9A2EFB9F3E5410C27DC740932ED2DDC1A725E21A9062FF79045A0C75F4
DD299E87A2FCB993C501B79BB7F6EAD4AA35B1565C79FA59EAEC116092166C90
766D52716A7C0A02AA42C7B26AC02ABB7404E9D5273CB046CD1DDB838A400EEC
045E9C607E7930EE814DF8F5103D9E21400BA7521CF91FDA1B8B2D9CA5DAA789
EF4F1E99AE5F00B4983DD3B93A1C8220BE00CE5FA77E9A28228846472D9C1DBB
B8BF871F179453BE6560AE396FA17CAB23E588338C468E39A0698E978CDA882F
F3BE52293D2F0573C1929AB9E02C5E5A2DF72C4400D44A052ACD2B44574480A0
751FD4F70D98EAF50682D6E861600D218D1C64784057C1779D4851F972EDAC5A
4EF333ADC94C46E3F4A413743A21F890AA6AA89D3641F89427945FB6C06A7A23
2D409094A6A371E3930088A04D480710D369A370646458B3B44DBB07CAA8DB9B
42F7775ADC522660B449D2780E059B1560A53CC567228DAD8786B9CF1965DB04
8AC861D574B4BF62E0C0CF263C9E86CF880DEF9CD32D2BCB62131A30C46774F5
8F7A15FBD58935C8DD76930E677A51B8E222707A3CF9C2B33789FF07AF889DD1
07F682D9DC577A4ADEDF37E0ECC48EDD64E27D9DF59905EBFC67A632D44E2DC3
9D72212225440F1E86ED1706A241F48B5CF21EAEBD71F8FD30AFE1EE624DDF05
C9B556FBBE5C2E1D8CCF80DE13D5F53859F982A12243E279C1969F25E607D584
9DA43CA3F9C5E73F7F558F96583FB3E2367D704AE83349548C937B9772B38180
87728DC205980AB017CCA3E396DE38C87C7F7FA018D38B0F37668C66F3520E11
BD88D622A156493360392D2990351DC39CBEAA8ED97803044BAC1BCA0CBB58CD
834BE775D7A177FFD625F99DE45E9DA7F6845C5AB30749D6A866CF71B18B9299
A1BD940617C4BABE6A0A4F9688F321E6F42A57A10423EF82B45D97BFFA7E18E6
1AEF622BC2BFA641AB5E72EFE6D62CB151351C0C9ECF14A0C4C6241700676CA3
0C72F58C5BBFCC3E8535DCD5DB443AD9369FE2B6B81FCE53D6A2C18AB0E2E2BA
ADAC58C079F084D17A7730800BDFE57EF292D63B7FF2C1DFB99DBE380F66BD84
0C858298C68FB3334814C8ACDE45C52287A57D5B07546F8B629893E78B477AAF
3699CD119E86991C4E047648C6F07CE0FC78CEB9675D60D2399DBF695508EA2D
1734B2D856CD8D220F5B7C3A71EAD4AEEBFF66CD655C67C121919E3542B33690
DA521C994C019AA3C82AEE881E842D6F0481CEA036CDC6631BD8DC598FD4E568
FC0F184379C6F7E219CD1A56246FF4C7D0A897AB0862B99AF7F84EF34C7AEB69
0F046D4A24B9718C7367B495C9B89DF49E834CD59CE6D86FFC52565A6F07CE15
C3A99FDF06FFCF30A3275E4CB8EA42DD85160731214C7DC67503E41343CE028A
DF51DF6E19A3D52FDFDE0E96B569AA92E985A268EC64FE71BC77F6926F58669D
9928CEA2E7A3543A33607E196D3B0D3899D5582BF8D69C91DF52B2E8F8B0D9BF
89BBC65D0C6D0212F241F2401D079E72A8C7B93F359219DBEE83AA0585EE0CC8
AAE56C6FEDA0D9D23935D110F586CEEAE58136E604CBF3675FC4D8A1E3D2132D
C85268A5C016172C6715E4749E62F397DAEE458E60E6058ADDAA14EA57388812
D375C476E7792B57EE11F02EF002DB3F4900B22B2A6A72FED0B13267168AE053
3F2B554DE764FFA72EFF5941683FBDD91BA7562839A39D9342B9AA98A5389108
594E13C4E9700401797333DA0492035691B72917301A13A6361FFFEEAC6894F0
3C8A0C7253142397BB76566DB34BF05E88E4FFF84788BDD0CFEEB17056D552A2
E5620B7EF51AD1DD6D3EC4073D4DB46914DE37F9021153A1EABD6DE04E45BA66
A7F8F66B3847AE95B8AE600D33566761960A2FC0292743546A10516421DB3307
403E946789F0A5D10F0D8C1D2F4E9F25C48C4A10B4C2C1DA6A1B749F2C8A1C2A
EF5FD2BA95D15B8C695EC7BAF995DC2092B1FB54E11F0AC42B057E8CDB9D4F98
39A0EB14E0CEDF0445B37E2486F037C3263D4154D37A04156B14FD0C34BE96D3
4729C2175FE49634DB13D7355DD1C7A537FF9F259B694126057DBD2C462F6237
32D0C21D179AC022B0C2FCF18B9331AECF62592125AA66434779DC80AFE5E70A
38506724B9B9C36E5AB4810F6CDB177AD4A921AF86D02A8E07015DE53C925C59
6316F75167F7E8631088EFD946B18C1A491D4C0CC0A9F0C24AC1F2C37FB933EF
08B8F4BFE1AE09F99DBA71A0FAC3541467CA67116D6914C8CE28B5A660C64D11
CFCB097A0844D5DFAA39C198C5CA1796DDAD2A52B8580D517BE237F2F8E4C236
69A165D59547832D85C5BCDE30D15CD9AE7F5A1EB84BB2C53DBF6940E4995506
C31733F01CC7EA57841A5777B02CFF33404DD699FFE239330BC58B9D2575D80E
69B93E3D0752327C27355F7BF512C3D1F15ECE4CCE7E21B2516DFC79C8EE4C50
386DB1AE3300C0E8177D4728410C592ED84F807A5A2149E7316D4D0564B5163B
9463D92F65679A9CA5C94ECCFC71567961B1F74559B6E2454177A81345FE1A04
753DE5AC3678A603434039DCC26A5B5601A183273F26BAD10D8943A553442834
4F7A7EB4B8140467283A92425398BBAA0874CA9E0B4264E5D3636BE807B20924
7FD3F03E2E650B86532D9562169F3CA624CE3BFA876B4A8B2011AB19A2E541F6
D2BCFA247874482DCFFAE786412C20B60CE66F202846B732009E02AEF819CED2
40D287403E942C1F7FBE46369DFDA7ED22F2859507C6592606D5DE396589E8E2
47B7FEF0F5F664D9EC551576E757E701332A6844050373BA94AD0B0BB7EA0143
735E25E3A3F7F6F33D080FEDEF6C34FAC407704D5E9FEF03A1EC233C8723AA0E
E17EE22F470053F09BD5C397491F7CF6C70E06020A73E4294D0F18C395623926
50FA17F463A62103E9BD9FE63AAA14466592F411642E0D34BC0A602190D64EF3
EB05FBCA026F4293652A0361590D34F40E6587CD9AD27C1D94C7F4CF12B1B1C4
E91D35DF7672252716176BBCB72BCAA0BA96C5826AF4F925D3792B198820D523
C4587E64A7714BD89B75A5D2AB400098588FD659E87DC0EA3E5E4B3B27C68176
BCACBF7E9859DEF32577607CD2F771F9BC208684136A7D571A9B7F1C02B95BAF
7E58ACE4998DDB8D83289C2A74E2788B89DDEF0A37EC183C4F1526CCE72033B3
73D936A28381C41D935D71124AE039A0F60ABD6AB1C0A1040E44592C6D68B7E8
3A953AD282264C3B206EE9EB9ECD3E8EF656942969C2CC79AAA068E726BA2A0E
36D1EDBE356E1CA990EB5B6EE383ECBB1566528CBC4F17EDE3AD28F24180A583
9E28FD5F045BFDC6553EE0FECE802CED998A2E7A8ED726A9B1B6471F99D536D9
D89548E756A2F9E04DABED9E4752A6CE53A68C0D40EB3E0E9CAA57F763F30D6F
9B5D9564B980FA0311898F9B935DD1741B08DF798524E8DA87AA538D039EA2BE
187222AA04BC6B882D53F7E15068884B114DC9C26B1D1BEB61C125CBADBACC2D
CF213E44FC6B6A4F0C96B9339C5FF5616691281CB0373B0EE16114545BE9CE12
659EC2C7B4756C985758CCB148C76B1569EE9F02B19C8E702A0F7EE7EB023426
F45810BB732F1D72CF331A2162764638FE0264365D160E448FA14E834FC7FFB7
25025E3928A98B64A9E903050BE70FDBBF26C1BFE2000B5799A5B396B1FA25BF
E3F3455AFB739EB1FBDD034F17DCF01E32D9E4FF3DBB4E4AEB2A416C6BFD20D7
445F444584DD1DF86CF104C28D2BECACF1C31E964ED3EB3BEE96B427B953CB18
D71FC155E6F51FA1FA2B83E3C0A595EE1896612907B6C0F93C305B351D097056
DE775515B124985F7051F0AB0FCCDC0B598050F7D347B314ED121F97620C4747
E9FEEBD8F37FEEACB7E426CC4FAA5053131D27C19486EF83E6FCF2E6797EB9D1
AE0CB193D671E51D6E9C04F8A63CF75D6CF477705B067A3ACB5BB010733B669B
C7219D7691253FE160CA035A5FA87F5EE5FB83D6BA4DF7CB1412190DB67EC679
8EA6C37BEF22B0F0968740DCFB43069E177E6CD4E44BA51CBC6812BBA9D545D8
270A216F9318165C8940DABC22A00253B5556E95099B63225245FC7F9501A46F
58D8B81E0DE8DA91D4CD13AB7157BB35F1CDE93DE8A872B517A3CF91233E7750
EB6548F5F732D2B12AA417E1E2F69DA1D505C5504948B0C3A71C5E47E610F369
D472BDC9B4D7D15348891551339399F9AEF080C9C418690B06A6F335583C6564
16143604BBD1572045BBADD6A7F9AB8B00F16323FFF880DE25369CD6D5C2DE90
6D848A61DE8E76D2FC4F9CA43909A017184B55165315BECE59F04037B71595BE
09070118345D9918F14079FA43045FC2E1A3E44A6019F3BB7FD918A417F1849C
6C000C32CD71CD31873D54EE53B2C3BC55E7984D8EA23DACD3296421D1B5A65C
B71DFF4FB3C6446D18A22ED882E6C80D93EF3FBF9202995FE6F58A0C0669069D
21F725B583C3123A7129335DD3D4F49F02F746D4185322392F0AFE4D430A6E99
5118ACF8994124C25D9180C11B432C2501E5C1B374AD8840425ECBCEC5E4B331
6B263F1DB889CA2DD0F08DB10F5257FEEDEC9A52DC04004114693C56A49CBD4B
1D3A310D3AE05AB2E9FD443B21D88908A4DD729FD16A90053B668EA176C41139
AB6C8F21314B3FB76B5C18D005472268E31E2566B3562E89F13AC7E601831FA5
8BC35E1328AA677F15CC12A64B395A965B62F0359431A22F53801D1966CEF189
47E588D5887DC4D4B4C572C2B690EB3592AA317BC8938CCD654A0AE1C5E9DF4F
B843B870FFB54717066987A9C819402991081A83801CC19D883F2FC0B760B514
2CF3A801269E753D33CF92CA54DDAA925A02D3D86DF23983C2029E1E56227A00
A9801E83813202A3A843BE96D0B0D70C6EE74429B1A697A317C6218300781C13
9DE61BE27108103EEC7B3464930855D8387AF03588B550EB65A3B94CACE1975F
8DC11645FC7102438467C45FBB7CA13953E088C5A6221A1B4383400B326D8157
9CC5317E45890A0C6B6EADF42A8C1E67D142C963916133B5A83C6E3057404961
BF17E9B3E7E477783AAEB85B92B6C83ED407528DC0388AD35F8CA3865A52C531
874D439703BDF5BA905919CCBF1FCCD6CE005E92E374C2290FE0A823CDFDB65F
ECBDA4648A11FE49715F74946B1FAD0F80B86AD752C8E861BA6ACBDD605883DA
1DA4D0757DEB131364537BCA3AD227D514D67D14D70AEAD93AD3137C2B3C1280
0FF7B28E0DC8DE0490DC5AC6AD67FD2F06BD6769EACC073F0EC412530B4AC7FC
4FF0B96644E7CBDCCD321E6646116B93D3847603ECB98DF7012E8D80C29C60D7
C5EA89E6FDD477F42B7E9241E416D0BFDF77358C2C49B258479EF6A547392C06
4B1FF9F0CDDD33542DCF794E6032865874E5C3C90AED016E8E8385C1CE507483
2293A8417B409F3B5D6F2A6CE7216BCF023C576777C1C7B90FC394F9467E95DD
CFF9447474B15B4910B3E59BD690BF731504477188FE9A2C0608019E27B4C41F
8BDB3B78B6A83DC1D2864685C0DFB208584CB70C0DAA84ECAC3D2683893AC3C9
370C76F0941967813F4FE6E7588DF036C85FDF3944CEEA36FF5FEB25832E2B81
3FA8150BD4F377FA28968A94C978E8D65A423D29D7318D9469D6EF238134DEE1
72FF7DFCC585AF950E68B6157CC96BDF11EDFAA0BB4C3C77ECCB7489DBD4CEBA
FDCDFF29B32F600CBAA21DA6D53BC918037DDD83EEC0DDB044914AA548F084D3
ADA3B1D6804CE31043389DD7263D9B6D1C912A1C3714EDA6FCB9553E9CFD24B9
13AB7D19B36F07074B92826C4A4A2951321E75539D39DDF170B1371067C88C40
214C1C68D5F8CFA602FF1E4FE5D66EA396F62AB83474DBACBFB24FE10509FF5F
A972740A4DD668D0E672FF67F085AD41147F9A8038B508B8254BBCE6A66CA4D1
F5C206FA7555738CCED0CA07DFB143C8E3DFEF590BCF1A9FA51CD6B9BD6B791A
7B6F4CF7F4B79C9368CA00423A86C576A4179674780D1BAC9CD29FB61382567B
59721E5FA25C4E41FA36E783D18DEF982787855182FD61322F2E3308FB569EC4
6A1A5B2C61C27C92075B8A5791FC1DC1AE4352064818495745A2B1EA8EB4DC05
5EFCA1D8EF7FE565B664893D98532DFFA7A34F62DD9E4F5A80B176332F2375A7
064AC6BC96B0B16FFD253E6C8CF5415112E1B5B8F63EA41EC52E5291248224BC
76BE54D80AA100ACDC52839893C65A60DE46A4930B8F6EE18996A5AC67E6549D
8AC520DE225EC02785F5F484AF283C2BC1CC2EEB43456A3DD9C70131E63A376D
E4D9B86F844522582A0C157BB2E5B715E655337CEBC0F05ECB1223046CB2DE61
3D46382B3E025602E231EC6C28C1E9D470DD7EA7D55594FE5B728027B0782B67
EAD884B48A451B45AD2C533E57682B702C6DDB4BF5FCD860549586D3E1AC7663
267DE1B9AF0760C35DC22E1B04EB8F0CF62829CC675AF0E501729313E73C0C7E
967B89FD1507461E557C6A85A4FF6C02D73865109304D19CEBA6BF366941F0E2
7F0BB225FE605658EEA4586EC618C7CAF015F8E84DA8301761229FA7C25A5943
92530F4F4E774F50941F4059F4C1FF04AF10056A1FD3B0908915980B180D9777
EFC8B26193B8C958EE80AF8187611FBE3B7A93C490D451EFB9D8682D1C7605E3
664F748A2637CD3A80A71BFF80444A54112BF640182EEA94298CCC06C527EDAD
B561834F13E08CE86D0C907B4E71250B782A599130D2A1C49A8A9BB0DE1EA22C
CCF3BE404C1DD8301E14193F342B2495725D0D01D5EB8269F072D5473C859E82
10F47EBB74E205609F544E143F160CE46AC050C931DBEBC18133348087E9D99B
E13A8EF443A7DF4E0846A68DE7F14F45F746EEB4DAAC3D198BEC1F6EAD3EF76E
3C8E16CEFF14328D377BA943EDBACCA6778D6801E7B590555BE66751C17249A3
CBC4631C04C2EEA0CB0E209C0BD24886CE7F0391F89A92C79539FB3798FC0320
84A9F8820F18B32FDC5AD3F39129C981C310369369A06F20BF1F87F685FFACE8
A5B08E2E04CEE6F034862E7E8F55BE1E9D3B45B035B04022D934D6F21641DB33
EDD24BB7FAA2A4DCB35B970860C0D596130ED0C84EA6BA536CB940C7FE162847
1DA862232E02FC2A85B3CC3F11CEDA788C708CC478D764C396E4F879CBD56752
7C7A5CD3217480C59558661A4B8260E658731922B88A3643B9776EFC5CD7ECB1
65F219C0B2AE80C0A3A725EE486917F147C4760161F352B2ED9C761BBDFA5CD2
D7556D8AF1F20F964ABBD0F5131F1924A7EFD6C98E053D16DA8EA58AD6567B49
9B89AC5478689A0FED078DF541FDEE63FAEF8B18F32750C1F26605BD5BB98731
0AEFB071D8168ED0FCAF23E0723883CDE6631A6E2AE9E66E5079A97AE2AF005B
E17EABE918D30B55E8E3E97D6CADAD715A7F143C55F833F089DFB3E683DEDD10
B3476C17C26A8DD12C72F212BFD63AD54E63B8D388E2829E1FF30D76561377D1
250850178C5C12FEF4A1227E4F431993C3F6C9FB83ACC5787FE9318A6B176A15
F7E19887FE59
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: DejaVuSerif
%!PS-AdobeFont-1.0: DejaVuSerif 2.33
%%Title: DejaVuSerif
%Version: 2.33
%%CreationDate: Tue Jul 26 17:07:32 2011
%%Creator: ,,,
%Copyright: Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
%Copyright: DejaVu changes are in public domain
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.000488281 0 0 0.000488281 0 0 ]readonly def
/FontName /DejaVuSerif def
/FontBBox {-1576 -710 3439 2272 }readonly def
/PaintType 0 def
/FontInfo 11 dict dup begin
/version (2.33) readonly def
/Notice (Copyright \050c\051 2003 by Bitstream, Inc. All Rights Reserved.\012DejaVu changes are in public domain\012) readonly def
% Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
% DejaVu changes are in public domain
/FullName (DejaVu Serif) readonly def
/FamilyName (DejaVu Serif) readonly def
/Weight (Book) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -85 def
/UnderlineThickness 90 def
/ascent 1556 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE373DCBE8503A9C1BDDCDE3976B9A
FF31FADC784CD99E8D913C26819A4962BC428320D924CB0D4BE15E2EA33CD98F
3A3090D3A2B1C56F2D8E679576FAF3FC1A79261690287D7B9444B1B4E36B6E78
13E34916336239067A606618EB045356D480135F7C325841F7B5598118DE9F10
DC40B14F98881CE9249D25473504F621ACEEFEEC415938B11B1EA0DB33CD14DD
BF0F9224FBD2D8BDC80385967061093CBA04EF9F2CC7611612A7B40A88C5F557
0EA7B75CAEE65197D76E2EAFF968FAFF7C1105A090B0608803BE84E398A71073
17422E75FFAC10C7B78D88AE4656E8670F0CFE203076E26559330DB36E3DA818
0A35DF5545775638CA918D7B724A11C790C00416AB08EE446A6726C97D3397B0
0314EBC91B4BC45217722F1100A3B5EBB57C058C16BF371859A9BA53CBAA8070
38B0A8751C786BAB5043C284D16223CDC59398518D50ABF8F3285652A955C253
9EA5F707EBCCED2A37868AB64C6DCF6546DF5654A7B54F720D9B626D88F2993B
DD32706AC49259CFBC2FF04BDCC56EEA526E0250565FD845B7D4D9DF3EF185CA
AE724EBF1165BFEA7D20DC8F30D93CB8B4BDEEA3F37D794B6F6219DB4A85D9FB
331D84CF11D7FE9A46DDE1E08DDD898CE5599C6775CE143CDCDF73E2CD7FB751
BB4EAA22B3436A8AEE73B93CE71A7D64F9875B90B84A0378482C9093DED58B05
C7FC1631E35F7232D1D25D8FBF8954E5B33866BA86201A7951ACA6FBC88A1E74
4C3366072E854BF5305F61AC3C4375742D1316DFD48181563BE1E496980FA645
76EFD0EE2BAAC777BC8C22A340435D518C58463A49E183740ABE3227853E7FC7
0FF9AF7E0C63759864AA2E1BDC9142AA9CD24BBA3364285DA21FF67D3E0D37C4
2371062F5BF8F9EAEE120490D6AD034DEEB108A6B381109035EA4DDDCFB2A005
553868AC67E1E940AB513E1E41FF5F497F52AFA059C626D779AE4ABCC120900B
AAEC4EBEF3BA611650539FBAFAFF5443EBFCCEFB2147917E6A9F644B0BDFDF21
97162103433B454905ACECA48EEDBF777AC02AC4BEF34869642C9AD6127ECD52
12AB846D1450EAA29C556BB121C9C4AC3C940F1EB91146E0A7F170C2333880BC
6D7845E32595B2F9E2050D2B8D3D75F2AD74231D87A3C5991A3F5D1C8456C9A9
5A35F30C2F37FE3916C7DC06B77C08DE7E6FCF51FF4D26EFBDCA16B5626CE6C6
F7EEED4FBF4631E830A06D7A8D86790A680C47C2D1DD26BBBF1E3CD527980F6C
4739C00C2EC20CE1F46C903788C0226806023D73A86D4B8F95B72450041AADC1
919AB52F2165758281D989454CF561A84C97860B8D2A85B146F5805A7CE00D16
3E3C34545135279298C54FD39A960E69814BF4066F589316BA47F8F8F30C27FD
032A2AA9965B0597FCD470D69B9CB4E0E6F914D5BBAA4A98268E1B4DB4900ED7
FB585D63C3DF849ED5FC9B054EA6AB0149E04B8C4302D4A56D8A347EB5D3D2A0
E12CF7E35C8772C5B1A6B545E61F3171CED2010C988BD5437BC3C9B4D5254B36
8E4DD7213D2FCE31DECB963AE3D31F9B35A4A6ADE35ED5283961517E1E2E6E31
7BD9FDB42DBDCE82C93C71126926B9F8E9653E25F47EE74F4049290AAE529429
CA03557A9B8306D976E5EE6F7270FED4449563D2B97615D16887455E43D2FF67
752CD12DAAE57248F81B9FD153B122DB2F44289E5B8296A1093827BD3E127C20
31A3197B4C1A3759A381AE2CEE579A8DDBAE510AD6C9B3C7841540C8D2A499CD
1E377CD81BB642DF5F3B367E903158C2DFC11F715B047748856573801B26A718
980D36AF645F7E80DFB78EE950A877ADC1B84A0EEEFF7499D4A4959FA1BA70D3
DE122C74E2D07F135B33442DBEA6C0F74720F9A0B495847BA1F3896EFEB1048E
980F5A16B50B723A3018A5324994CDA85D9EDAC3DC42794B09481A7089CC45A2
C18A54AEB9CAF270DF2858636E571EBEA7BA976FCE899416BCEC92F4A7418CA8
0B35D3FAA66A46727CB1A0BC620E1B14489B73BF349741A5E15DF72BE6E28527
C05909C897B6B2E47F0576C92BD88F0DA00F757B2FF77463F8186365B317A5F5
6D23B74D9107E2A2D5C2C26E79D6B96DC6A65760E4501B14D3BEA359ACD21A40
8C8EE01EC592B1E306F1F60C17B04C13E3C20E089A6C6BC14BF893C29F61FD23
0BEEA63DD2B6CAD25A911B562367CF82E245712F148827033F3F1C0D11122E05
FE8BCCA62B12230255B5DC112BE3E6B0246E8E14850278761A368889725B0171
CAB9447B6774A330A75974BE76B05ACC3FCB47F4EDB70BC19AE14556EEA6D6A3
1AAAFC7466D2B9A4B2260AD20B602268DA0F0CC24BE660E5639866C9187A8803
98355FD303D10FB649B16AA3285456246A5A421CE1E955AA105D51471C5B7C47
2985E1E00DF456B3876946BC49E0A827E41BF56FC0CACB7842FF8F2DD10AE4A3
E1A7699603EFD017803E471242D6B97C538102B14A91222012637AF1D8DF9A0C
2937A3D7449E2659C0CF7CE35C322ACDA0B29EA3F63DB6F525E4813DA1C73AD0
398BD2FB74B4255299C8F0B0DCD7C6412EF9C5AF0A2193B8E0138EA71C81BA60
59BD057359ED3CD47A324CF587A4B3262405C9E753315B7B157B3DFE0FDA0F71
6F2F2927609219F27B108EEDE1127CCD90ED4FF3CE3E82F5B333E4833BD3A126
5221287185860BD79689DE66AB4144D73A3B10D7A3B85B60A60745696FFABB07
F44C52D830C5CE6089CAF571855A5086B98077A1E07CFE95B30BE896DCDFC069
0BB5B0D5945B3F7F124B923C1FAE68E5F5D9A868EB031F7DA4409F4AEAF38A53
5D931342ADA5ADD4EF1810E41C156EE20CC477571A18859AC3A74AF5B4B003EB
4396A0C3CAA4D0722AA10686F262B7DB8A7B1B948DBEEB188FC1D2A797122B9B
78C1F92F5CCBFCB72818B1E1EA494A80DA0121CEA84B511618E9D0552CC3784B
DB595B1F2C787A199EED810BA309AFF4B63059229C6E306C0756FBED2FF26246
33953D92285348D38BEF6048018106FF6776432F67F7002CD76005E64BB1CDC3
E641C66533433157C6C959600AE0F4280FF4D463AE1D9FEBAD065332B3168C04
6DA7AC6E66F4A9A08A98ADFAEE4711E4FD4268E70CBC5ECAB6F8601CE65E911F
57ECE585FA39D8FB6D93C81F3D76A76D288134981510B78B693DD292CD282FE9
CC3804E23ECF0BA98367C4A7DBDAD921F1434838F6D8E21D133D13A75ADA846D
0A6FA8A0C1230DF428AE05DACB2F34D7233D2B33A9BFADD6D0E03029FDFA95D7
0D991A20A5A862A7A728BD3A8C878491E7A0F1AD7105B1B506801D76818B60E0
B04DDB3EA71A2791D4F3FA5E7C0703FC2C93C5EB02DF2EEF2B6C8D74033C21FB
251F854DC13616E1A9E22445B6CCE04A1CD1C66E50757D480B56351386067E2F
8A211131C712BFA8528235F1A602CB799F8D564C18FE7483103E4E562E889010
F219C1F30B85B78F3F32CEAED568F0CCD395AAB91442ADEA8174064B3EFF00FB
3086E4DDD6B1E84342A2B831D48E2F2EAC65A47427A34CD7C577BFDA61214110
CC3FE5C892B5667CACE7D67677EFA1AD43755AD8904E7C063B3859EF3391F075
F1080F6EE2B9567FD4993ADA941FBAEE9A2A47EE9575E4E3DBDCBB617CE64466
DF58F9DFE73AFE850CC222FA0ECC9EE2613B339BD8F6E5C846DC5141E642FDBA
58B0E8AEEA84816E8C9CB947FDD259B1BDBBBEF73390FACCC79421C4C4A1B01E
FD02A87D5B2AB39A97E6ADB7DEBA6F71E8B9C7D44A7AE32D16398216F197695E
B338006CF423A8A1D0A5DC3C2F4B9BBD9F47D4A2E8D0FF7C231496DC0E7B18A9
E13B98E53AF023E7B552073DD8ACDEEFB3D9D98CE75658B632AAE7D5BE89FC88
7DAA7C4F66B334C15B98EAB0DC869523D3016D45C4650421070C80E288C095D8
BD20CCD0590904EDFB01DFEC8E166498AA88D85F018F88977566E90F777A07B7
AD566A66879DF69139B6BFD1D0F81E00B74A4510F9FD6A2A878B065E6F6972A6
C313F8AB65E7623166F516E7BCC1142485B1D7835060C4F1E8482AF90DAB2654
B101FCCE14EFAC729B2C55852B56B996BDCA0C4873159D3E14C519414E56AD37
F194566008ADD04E6F2B1FF9D34913771FA40103886020036D883325FB8ABE90
84AE51432BEF7CEF6A3BF6050234E293FC06B0A33EECC3EBFB023CE14335714B
E65683FF583E66A4DE2F139EBB8C03C5690130C97973AA4D40CBB60EDDAEEC1F
233D1645D12BB170645AF75534E6DCD097F61B9D2A3F37E0199EA6F2036B2E5A
C4ED2D34BC4A246581E688AC225AF2D19493BA76745E38444432BBAEF32B9BDC
7314F560168019A6F03BA39258C66B75A776640E8857C06877D3459E8660198C
189B126317F7ECB75B7B53BEC994D15C7E8F9C6890ADF6C693EC660FF0E46355
6ED6DDE7232D310BA0A33BD624933FB07E9F4A0AD7075DB073E1E6AB862B2776
8E29E9EE9740DA1A76207A14487FE4908E0DD9BD52A507764E05698324842246
C4DACB32FA759D59E0E4307AC105033A4693565FEE55DE922B4A793278CDF446
D8AEA79FFA606506C11AB66C6DB01A57DC9D5241C0FF101E99D7F264AC03F3D7
EBDF63DACA30FD7A97EC5E907B5AE1E208616803C2A3895FEAA6D3E81CC7CCE9
DC65529319EF2FB6093C41BDE285D7311454AB232BEBA4BD853E4670D3FED784
91C5BCC0FCC7585EF3C780EB6F53FDDB689D8794B812D546F288D2BFA376A854
04060EFBC17A5E9D0768D553B8792AAC122676581B4E4A578AE336C782CDB43C
3101700B30EB242227583E1D2FA256DE82AAD35DE860AE47D8F44620F52A1F86
6F9A2A07B2C81998DD05108FAA7B4D2433FC69F6E6BE010930461A7741DC302C
47137EDAD3219B5666B66E854965AA890FB3B482092485AE32E93893D228BD31
BC4A8D40A4E3DD8957217F9A34A4A711EF4BAD7B866DD4B7F12DA30B7D90C1E3
6A102E81FC795B09A320A26C5C367486EA986F31F6F9450BF21781EE559E8B85
F3B91B40EC2A66B8B14F49F72336FEADBD079B430DA38C6CE99FD4A4D6AE61A2
6916BE2D62BF28B50ACACF7F481A489A290B93C713016B7F0D764AE2920A82BC
A6C8C5C3A7310D2A612183F9EF89D9E89B3E405D192BEE8CD4CA07ADB5C26FB9
B660F77444E7EB0E8060B4EFACADA1878554CFF107B3B4DC9548FA4F52E27C26
3198F0AABC32A4DD17D054DBE4E9C240E522B8A5A731BA48A2D0164CF3504EDC
87A20CD4B3C6CF732FCEACD874F5F3F7F7CA9007433FBE2CD9D38CBA349096A2
77AB3AEED6679964D00AEE7B64D2897ADBA76D7827EBF4108B6FF9E4D7F9F426
CC8DFD61B56FDC2B4D1B52924D30D0DF716D58B19C1C70C429B23F6913CD1B65
55A42D3C7AE4FC81FCE3802023C8E14AC54FE3ECAA816890C27239E80ADDEE21
9768A4BD1017B83B6B0DAFC7F9C21F0923F6ACDEDF20530C23666C134719954B
666BD840165E01DEEAB372E96E5AA1A5D71063B34E6169968FA34ACDEC564722
109C0FA96E09FC2BB8B0F21537EEA7EF11619C1905305500915A807023AE71AC
518D708D372B7436676952806740BE067904B136C2B6B3BD8AFADFD5B5198E3E
D7FD2E525B35E90E78E536702753E7CC21C77863B5FE169C931C76E589FE0F23
F301633CC8A51450E21552CE44696F0E7B47A4F1C6E320D45009E02E7A37259D
8AFFB9F861420BF86287D0099FF9F570AB6A3A61DAA92A2FA020AB1A4BA1B68B
1153BCCDF7803BE3B4AB6A7EA1C6182B041F9AE7F6929633114AFEF487B4F3C0
B17F538C6D5BCD4C8792261DA2F7ED6E5D05FB6EBBAC1981A7DBBDDAB8B9727C
3E69B103C8FB0CD8900E0DDA1AEA5FEC9984CFE63E6282D2D488B6512E37AB4C
C00082B1878813DDD71BC6F707AE3878772EA5EB39E689450C0CF01BD753D418
5094C1B5E21AFF4CEBD076109AFDCFBA7C2F5A4A00BB0AF56057B7CAC8F3B1AA
277E909915B2419C59467ED8B07EF8416F674E211667D27028B1B2D42B4EF7AD
19A6A8FD6B1DF7BAE4A20B7E6C77D8EE3E2179672B4DB7EFE7106D7E06B2B57A
7E1924E88BE11DBA732FA150EDDC0F7A2E3A71E45E0226586217A2F44A8C30DE
22622C63FE21DC29ACEAC586BD8D6405DDE6487C9DA3BDD2E9EFA67589526BD7
BEF4B467FE1728EE77C1463DDEEBCE9A708C4B99F05C7E477B42BED5DB587A18
46AAC3780DA493ECB76E8AD025D0F52957099F97801F17A5902516B261C0B147
B5F64BC49170CE57667264CD351A6D32C26E47484CF1B078EB23F318C84FF921
DA05CA70CE688C8FF59843D691801C17B66ED70B9E5A2E33B9E37E9D2B266904
4BE108764DCA10A12A221A1F1E752D00BE3B85631F391A7488692A48F557075E
AE29FDB85B98A508973695959EA86B5E662D5C279C6909C295B6186236EE9F32
20EFB7BE5B501E69F13DA5B5027FB0719DF9411C388E15BFF65071B4BEA4C29E
2D0955AEB9C3A68B5508683BB7645A406BB57A1C2D4BEBB7DA991A994DFC7471
66C60182B9482737775272E903E75D1D98B0A62DF47F5D09E5797208F8881442
0FFCAFB89430EAEAF9D24853495E5659E98CBBCF3F5F0145C18B32F88C79AAED
E51FFA07E218F4941852BEED3661D27CB425253B0BF5666728D2D9A5C6BB9658
ED7CF8E6B37848E73F70F44CEABA55CD71FD2D3690A55A31A21CB9F3A4C0E998
8B53802399B6E22D8BA9230C4D518855DA74741A249103EEA2CB59608AA9C053
DE43015176D8B520374F1824C0BB9210FCD2DB74A70D8B82BEC9A24508A20472
139C11D99BFBE3F19706594CE9B9D31BC0E18B58A73225FD3F61C1E77CE3FC89
452957D4D4F3706A4B08559B7AB839B3A131D4F8AADC0405493BB9F1D7D4EFB8
E992AE5C11033B9E4ABEE0C93892C18BB56A3EA67F673743657704AC8357A9A0
98AB727A6C3E07427732318FB475CFB3118191C68AA6ACD8B73AEE7AB5D764B3
1A3F2880EC12A71DF8A3DE3783BE45CE0A1BBC429BA4DD33C317914BE4EAA81A
3191CE33DD5F7CEABFF720D4619FC4585FAE13F6013DC2AA19FE6D266B7C736A
8FF114F8048FB2AC67FB9E753C3FAD4DFDE9A6DA80A5A1CD6AA017C76E6246D9
F2A090096A286D38B7CCCCE08F4F218EE72C0452046B01B3E6B31A58989FFADB
0A795D2C2C6D44A680E566E753ACF85A4CFD49783FA209DE6960549AC18C1A41
B238AABE015B8881191DD23092F6D53D5C1CD68EBD038E098D32CB249E7AD49F
AE659BE3B79EBE269ACA32F86F59B0978B9B9383FCBD4D2EB8CE539FC07D9D5A
AE10EBEEB27C28AED5E3C9B39C6A9876779CD7F22CD75A3E296079D081E4C57D
4AD491BB00CE0BB3D6183C9AAE641E41A265C666F029712F83299C4DA83926D6
17401494E30EDEE101787C102051375750570CC8FC4EDDF2C94B08B2706111AB
7D342E8BDAE2843DAEE0AB50F6C970DAF12DD6C9325BC57B6F77FE77AE27ADC3
41D18A7AA33BA557FA8C21536C6CD50F6F4EC0EC1154AA360CC88559E381028E
090BF48869227D89E2465D88BF22262A06AC0CA4EECC03D853B86EE9D6D64C66
C1F1D1A411866221201AE726E3CC68B6E130AFD65411C4B7C3FE2474E6D2D038
63B5BD758A2D1C866A284B6B5E9B8662D1E2E85D8173A9E474E7475D03534B62
650F556ACF90B5C581CB81A633552B83867BFB409BBDA957C67CE6D92E2DB149
A0E0992E6C0E12988BD352C289FCC52AA75C86F475BDE461576FBA75F032E16E
1670467E02BDF2109185B29027A6530B88E6815A0F338993949F3C664470AFB2
592B5485D9EBCD6D81115175D675B22BB386849388A89D09865F4E10CF10F9A0
8B1A43F576ED709EECA9908C7332AC97BE9EECFD70936E6A2CE63F646323E354
6D6A29B60E86360C270404E9582D61CC0D79DE6CAF69F35F72117A3C1FF486AC
03EDEBBAED08984504DF932243878AA5E11F657F898F5FB67AE5FF5608C53CB0
DA138A7622A931DA293B082C862FCD5BDDF45F1FCDDB633D81E7CD05AB901B83
EF45364D29A1B73A0AE437A04351998F897CDB6778149FD68DDD49E05F5F34F2
7A7F069E5D755199FDB77D13657D02E52A6C3105BDFCCA4B178B543BB870A6B0
A27C3FE0952C8436D8F3FB9FECD4CF36A6E4AB567E41FEAFAA5F39269A9DBE9A
1931B73F09457859EDAFD61E7768236FC0A430494BE31FC56F48648689B5A0FA
8DAEE8CCC5B3CC8C6D447CB520B59E53117FB961AD0BDD708C34E6B895AABBC2
39980A38968FF9B815E5DC93846CCC8A07CED7AFAA1FF2602705B806A15BA338
7B41DFD3667327F3E6293ECACFDB1628E0ECC7907533B8946985F94B7AC7BC75
4CF91970F994A568836ECFD4A813D3CDCFB8DA1A144B64689DA6E2BF4E17B0A1
E55DE3A63A26665375E9C805A494EC04B1881ADF855A6BA3DB8F48A4EDB138BB
352FBF9CAC0DE5C85743FD5405015978D9CB3B26CB5F05EC5FB630B21464C962
FB52FAE7BB7B1AECBA92325205A1ED91DE7655EFDC4FFFB8C6040C7736376F69
A88AEFBDCA03AA5F701B6F80BBCDF2C427C40A51597F0B1BF2B2800BF5C0E809
417B53C6E9D69E9E1CFA40623C76B845F0C002461A8CA681AC1647378A87920F
FB9506835ABE178C700E87C65EE09931388098844D25AE04094C5E824AB9EC28
7540D764A4635FC4B7AFF3E972A0DAC2856178AAAC167196E667C3909D9FE6F1
1280C7420BA4D4D91998FD4ADF2C0246520F72049A5A0C9BBE3735C27171CDA9
EB68258834EFB1FE38F35B2F234418B14215E6F8D2048C012FDD87766CA14875
2BA42BCAF2D3DE6D83690B5BDF1F7BC3433619B0DFFB9191999EB989A910B118
5A9F60E43610FC378550CAE4CC878C8642C312100730E9CDF50F9BEA486909C2
36F9BE6691B79CE6954A21623BBDDB25A076ED79F93A32BFDB9ED169EC10C9A0
D0F640612184FB2D885A27F014F873B58E5993E03F17481F0C12C6483B23ED66
1497AF176D151E10211DE7E2CDC9CB9E9FDD489083E9086E5E6FB0E4F846CFE8
AD594E04BC5F5F507D2FC0597E3C1F99CCCC6C3D94E9717F1AF0CF8F3BFB2D51
4E068BBCD0A8428193A806569BB6C55AF7087BA48AB42E34BE28EFDA0033AB98
15DE44CF5FED24E7EFF51F9AF38546753CBFC60D9A6290582228C8CD7450EEFF
16F6B54CAC9583D70D9AAE0959BE049D2304F09D4F61B32855B1EC21364E41E7
DA1BD8D126D7952C05E7DB694E5EAE034C86796F9DC1FA4A0C571508810235C5
CEF2101CF12B4CC17DE64CB727D9E4D8C139D1C87B8342EBC93B398E51BE6253
5D78659F78714179D143ECA046663B07B4D9CFCEFFA78929F4CFB5CB2B3A55AB
410B15C50A4067581406FC7FD769D02B21EC6690E091DCD78737C660F2A4A0E0
57E17284CA69A6FF45E64BF92BE5F919B5A24D1EEF79D48792029916C0C31168
2D35AD13D79CAA8F91378CEE85D1132331009322AEB19E823FDBDA86513EAD24
8BE57B5F5EB3B81CE36C233F3159FDD6C163D71B0C9F9EC4807D1C2E4BADFDC9
BD66DCB0BD61C42740DB9690FAC4DAF017A777AFC408189383B7F21B9E69E2B6
1C813A5F19FD093BB6531100AE04316685304F54925C264DFA0A5947731C613C
EC8B95CD826A3187C1CBB0237F4598BB85B3A96E23F163B3EF4F613874F81DAC
45235D1850266D0415EF6141F50FC338D5385D64248DA3FD2CB03DE9CF858484
0ED72426F2000EE2CE9538114ADC1BD1429DF5346F354FB87057E55C12DB0A91
A191A39B52CC2498DE49A6EA1BE2B40CDE2506F37150DFC839BCE63FF8850C63
A7BF53EE182410317E9A9CC96454904FB9E7BC9FCBF61CF0541D414D951551F4
FE0058099EA81387A9F765DB23EDC9544E7D7AFC087EC234CEEFD0F1BB4BE246
68B7FB1607D8873BE5391D8A102053B9F6AF3BFDCE89287A812536BA28B2511B
D4F473ABD30D9981919CF11F9CAE813D95353F31235306174E84F2FF83DA8A80
5530E1BE3BD87C25EF3FF118C6BA977AEF6ECD2C2A7A03FABD257B04985B3FBD
29DF1CC33387AD4BB4495747A4A65B5D594ED0D2A5F365BC26CC5BAEEB287045
AC207182A28E64223E6603E8115FC1E42587877E49FE4C327642BCC3A4BDC553
FBC5A550B020794A06F390B7DB029397B11DD6D60C7BE5C8B3A7A93226FB39FD
05CBC85F4035CFBB0D61EEA7299B6779E588FF01A584E7344E6E531F8BBB558C
99791FDD8015B944B8FA988D881B20682B3B8ED5A76D17C23AA946C0E5C6AFC5
88B7E3C61E457DF1B0A92DB018BAA4BEEF9E1C76FB8FDF39BACC74BDADCF24A4
1F0A72B945867148EF746C36601F133A3B5009119E1D524E62971EAC84865617
F774D7486EA66D00AEB4CF601F6FB1352A5686D233DE467F08F1E0F8ED78A5E1
38E1E931230BDC828439514B87556B11EDCC96CB17FDC3E6CAB953CEAC29A128
222E65F3E29147C32A4F00EA669AAE2DE0783C964A2DD7421871328D95283A3F
DEB6313BBD803455D37786F5415D9F8402E45496D7CB722566972280BC551871
9BDE45169B0BB698C2F2EA0BA4076CFF262758C27951757B76C06A537E530172
75F9116A1AB2D8786BC0D0653933C6538EFC42EDDA137E5D0310BE8029831229
02301AA93251D6316C41F695807F3BC8A261F1C47C4E740A6068314C63BF1552
65E2B79D3E2D7B22A24327BB9867FD9E90448B492C9F3813221DC143186BF0B2
5EDEA2A28ADF671F7B6FB0F6C156DF5E2482E0B89EFB6C449C172832EA2CE62F
F1EA9EA4C612810E31C19D9D6F98F27B72B79483A2B6939A4640242A681897D4
43A5319D37F67E172661F6A8FA0D4D3BCAFA6953259E8C14A6C00E4FF8515B8C
6C27F7E845239ECC04224607135D4567FC53D6F22C62FE661F3E1B8761756089
5F443DA8CBDDE3DD98EAB24D35AD50C2C00E90C1BB4A6BB860C3B82837AAE7C9
4457403D7C0133ADD59C2075409045A5BEE183D0BE83E133462790B84B8B0051
3AF1AC0E12670D2C70C4213D7EE8928C36B29CA8CD755B2586422D639FCCF4F2
474B0B9C993BBAF0DD4BC68A322971F6A0B8C2FA887BFD5F3B2C23FCEA734DB8
06D9C695EDEC4479DD86672800ABC7ED728A75C56EDA009299ABE0EB2261E7AE
20273B0A8EECECFBC4034E5AAAD381A33A2CC6580E5F9A4DAF9794AE6D1A9DF6
79A6274E36BEB8606041ED5920C42E6F594BB6BD8944EAB1F5B95046971501CB
2BEFF2F1E327B84302F2B87160155F156774E4BAAFDCA05FD793C728D10DEBAC
77C666A47BA0CD8ACB48246907889DE999CA35070BEC5774D0566D413EE32955
3FE07A7BE56F9120C3256916C42DC5789F8E693AE48CE2CA81E13B7C453BD70E
99547501CB839155AC7BDDD91F5FB23FD02A1C62BE007A94B2DECC0D49E834EE
ABBAD52C790830C5DEF5F404A7E2D1D4EB5458C48EE307577AB97CFAF898CB6E
437748D733AE1B34BD0B313216CB9CDDFAFEA69773F7B7A037CE320F39D98104
9B77E4E23313A4C1BDB004494CE4FF48D9DA305BDF5A6A4E8C0A8E992D5FF1ED
BA6B2E66849C4508600B9427059F59BE29035FB913D52B27E56F28FD90AF07DE
1610FF9156777DF3641B62C6CE501E2F361A7C39730EBFE644A415C178876B54
91D3FB87AFAB660953BFCF48B84EF3B6D2960760062DD11B062B5C8E151BBD1D
4D8381B6201EDC4044FD42986F4B2E731E1938CA7A2DFFC1AFAF8B3335E7A87A
754E0B22A449C7DB4543D13474FFA2E87B206D87C1BF38652A5188350246AD65
4A49204F1367F4307EE7B71DACB9BBF442CFED86209257D030B50AC5806B42D4
10158874F49E85D026DFBED9FFDD2F9BF087F9D6B62CC333E89F3386FE53B511
D3DBA219B50EC227305E0AAAFC5C3A5DB37BAECD2048E45C2981AC768C950167
935869EC0E79B936403F8535CD77CF24904F25089271338828DC2362B4E84BC6
DE3A4A629F9592184EF4AE54D3D78E8C0AE2D4A6E1558329147D6D47925B144B
587369191909204EECED5531A44FA9260939586A9E36799C7822398C82C22A63
5BAB5D9FB381741B9CFF603DA5764A6244BFA0338B0E76D4F510B78B2041AE4A
D4DB9C5DE94D2796BAAAEC0961C4405E9AD3190D8EBA71B744282FDC842F372B
279213979D25397D9961C8D76F3D1937AB06E5B2EDC952456DDF225F42137BB8
42857A9D0ED3A8F9733395671A7597A72224B39667FAFE8DEAE79B8CED7A0F16
309E626DDAEFE33E4C6725EEDB1C2C9D78866901235C66B0375A4E531CCE1A08
A96B8D7CD242F34F4F47FAC184362866F8B534249B0DCF136135495743403148
569D9741436D2B084C042C45D3003547D36E0DA51E215709FF69322D42C893A3
0CA7AC3617AD77C899FE86E54B8BDB1490AC76FF84E41D77EBBB6D56A1F0E30A
ED1773930B00BEDE46A2AC2CC0416C519B3871FA4F8513F79A2DB895347DA481
708D687A5A3979932880E1D795723DA5F3715EDF3EA5A33679F89A16E010F2D8
FD5B2369EA1716CA92C6D2DC5384FD9D97555016870DDB23E448FCA5F6F2A579
66EBCF2F775DC5EAFF923CDEEE191D05A95E51B59A6CAEFFD0CF691CACFD46DE
8BDD5A511E385E67821B716B4ADA3819B0B97125B182A35F2D14974CE1F6E100
DBCB02F1F58F6607ED0DC50AF2DD3484D3BC242962C8C0A698D0D13FCF3DEAF3
D72A882B5B448901545CBA6F90B8E9A693C7DC4996F3C7F523CBC47BEF8F5452
2B871034FDD8A680C99DA8106E7746196D6A4873034C830DE0D9B90BC9A9ED1D
14858BBA6F56EA90E0C0C7AA5D7147004EEECC0E33A6B027FBA6B19B94E5BE97
4AEB670A7EF505537887148E9D34331B814559719BA5BEB45AC5AA7866DA9645
5615A186CF1F2C284300351449C68B5256E273557AF3D6B5B7B1DADA745F325C
57D4DCCD7B4B5AE321A10165050047E7814DCC076B02DE3C012740FB521E5FAF
EB70FBAD7A62A5EB177E103921FB6582F8E9ED87EECB0CBC587EF94C1A99353A
46CD71442CD50F30E7347326E36A72D970EA89739982B5AC859190A68EBEF6C2
7AC845341805DB4130290176B368F8FE798D67C0357252682CE2E33CDAC6E846
45F9D4026CC670E417BE7D921E209977BA78EE1FAA76C6230ED8945FA5DFE89D
3ECB9ED75ECED8F4A04C59F5CEB3110E47BEB06FDE2F09D49FB339A8691BE988
D57DA00A3255A2FCAFFADABFDC209098477C27427DA168FBDC29D0F70AB350C6
426D138BB1F8C8E867D874D582A2AD580012900E918E5AE0BDF5F0D9276CB18A
DC12A759D24E81C2649643880CC018F17ADF64B0AB41102ED3C035D2B5128AF8
454EA7BABEA8C3C7C79D153BE8198632CCD1617D70CCD42B00987934F5D69405
7A644D958E71202CCE7F7298036E5E7D15D3C156294C812D38E5C2EFCBE3B6FE
1AE3C444391DFF40AFC6587B0877306D44B13525E615E5799BD66B2596E75696
F109BC410AC027AFEB0D953161EEF0BBE5B1791161F36EF9FFC86470E15FBFC0
85A5E58EE0E7270BA7CA1A96E747999379F1D2B087BA5B476336559C8676D720
EFE0C68F38803F844C856C831353E34985CB0ADA129044D32DCF7FB8DA4D1EC8
CF59F8C456260FDD0A5A75C28E97C4FE74479B926D7A68B456B8CBC347C950D9
80F18BF2DCC19B0B9EAF973A1B6993164F2F646147E3972311400B36ABF7569A
153A783C56203963C634E4595B822D2E70626C5B17DB7DD55C107C36AB3CB076
39CCB875866A3D3285FB501422435CE00FF158D04ECDDAA23AB22B91CDC5EAC5
1418AE590CC11371942564EFD558BF5BB666080B9925B898441EAB05ACFC1F46
D01DD1D65C1D50D79446C6306C311D841D00E5997462E4886461F03226D126D3
E447DFE46D974A12B5B62884780CF9A628A5B4B928222FDF4C27482D83EA2E96
B8ADD27413AC0C94916027172BE6D14FB830BC93F7ED7B5F0732BCF1B0C2FB95
E0ADDF37ADBE2BB842AECDA960DDE607644FCBA99F0021492129DC620FC3661B
1C74EA521E00EB4128AA83C402985B0D2B01EFCED16EF62E2E60D0C28D045D83
9066909D6729970601782B21BBB207BC5CF2C144883512CA23F0259B207C0655
FE43E90268C5FCBA02A6BE923AAEE3868C7619D511EDDBC454A148CE685F1BD8
31B4271EE5F5BAF9B15715DD6342BF1CC66AABE82E2466A87EAE1E82D737EFC2
07DAFE09907AD0C6BE560104D45C73EB01FC5FD5B69756556A2629663807FAAB
EB11661A68068857FB65DE901C65197EF81E8C708D4CDCE2D29AB1227A0B02BF
F94AAA61B0BBE571E089B910E8139D6902B1166263DA955B4F965A5D09646BB6
027B50DE831CF642BF6DC08850D239232A0ACBAD86FC3A71711470DED4D5B61C
B5E66B1A25FD84EBA37786C937FCD1BCF8A5E108FA4C13CD21EF15A906F0533B
F39986A2C0724C88DF3BE48CC4826515D02758FAF60BB13A90B8B9652538F967
8FA065F0078D0581E1588CE0EEF28109EB2E1F20078A58CDD4F89D40E8F20220
E2A5C1EE6E940BC820120D78037B8D817DF6AAE4EDDF9C68A072E6BA5F9AB15E
39F3D72F62ECE22AD9702E0E2A7796C609FE7A9F107DE4CDA43A4BC8111421F9
EEB2E6D935E341CD577F0FA0716A4F3B03B50C2897786FAF0041AB65820F3367
F607ACACBC2DBBD0778614E9B3EAA1240960BDA99328611D8EE117418500AB5E
AD1F7FEC85ADE2B262707AC74993F05E4A42CD25F56E1B7D10869521223ABAFE
D8D64798FF0F14AB8F94FEF03594A11B619A16FFA85BB728E68D03882DA0C650
29815AE8B5FE44F9D03C614EC2A1F8653C2ABF30E9AEAF5C7270F0031FF15217
D7A7205A16D746E83B0E8CE6E71170D86B0F37CA83C3F3DF00814B05A33B8FE3
CAB6C022142C1C9F3CB4E3A15784DB8D4203E4ABAB690160E5180BCBDAF668AD
FEB849B116BBAF38F6071BA8D526C4806C95548EB27D3A5B72CCC0C88F6FF203
56057F83EE96F7CF54531E2CE3670DC21C48D6452C3446A4E1B9957F62A66D2A
3C4A88651F499CE91ACF73D351D5CF30D8A49F6911851855884D53D2BEF9CF0B
8F364FA02753722452F95104787182032614ADBFB375067A9C2CBABA5C14665E
75A580A07AE3FFFBB204C6D598CE33650C941C27689356F016E68F1097BD7E4A
E8FB8EE52C08317D687163171249CE1D324C9FA8A14AFC052837674338D1D089
9C398CDF72D0920559632203E0A5472AEED87F0D5E902A5E2AA8211081DEDE39
951B7EC9B8F91D3597D2B5C46982BC949FC337741F9C2A268276D52914B8E3FC
D2A6C79ACCE7620E7A902EF90F7AC408889E24EB28BAEBA47D72EE31663973DC
DDE3E8AE7681839A3D7114C3A046CAC12FE1E77B53BBA55AFD722C452AAE0884
4C940B925044530B336C1DE8B8B1D40D4132847968E95B372AC250DE7324E488
EC51CF81FF2C501A7544CEAEF0C75D70FBA5ECF618D2E7A4646E2B11E8786895
2261368ED39B0806AB048BB436314DF9CC16DB6129EA3FCB344ABA7E7C6090AE
9DA6B804E52051E07C7592758D2EB86327EFAD0AB5B2FBCFE8F5A2EEE5828C88
B3D646AEA2901EA233E1EA4B3C29E24A0E8525449E38665E5328107E46F7845F
E306B00E162A9D69701B32516B0211C8544B22BEEB1B6DCC16FD19BA559FD126
B90123B3443E20B2EBA817BC2DA84968AD1267BF97299913BDB38F99284B8F81
F67E1D9309CBAB6AD4F89BE0FEEF22FC4D0A4B033B97B94DF06992491F9A6EFA
73102289B850567155BE34410F65A223D08721FD97124A6CA3E49B29DFA3A027
543DEB2AE9911047C543DDCE40B03DDC2338B27506D604F42AFE6F4D911B87A6
E3CA0590AAE2212835348616B08A7A96048FBE4450944D1F603F6EF5B3612E3D
7976D9729D035B6CE5088E3E7F0AD556B5DDB395AA96BB130B6B931C05568C25
9DEC42EF8C7459D5482E7D9DC9D6F4BE157A2F436B8CDE84AFAE0CA827135F1F
F2811CA4E92C73D4D3445ADBDDADE18CCCE62FEE189E8ED4A65BBB714648B39E
7840A4B18CBAF290E543E981B42B7A0906F20D80DB428B03C88E88ADD6F5C0BA
8297B3172ED34AD41500640A4392E813F23DE6F69C50449D223F1D63F36A5C0D
CF0B7BA569A9316A5932EF031ABB436E1F49434245A5BAB4FF85DCD564795B4F
660A922617123196D54A4D0BBB2B0F22F047822313FD81A56A02F79430E78EEE
0341F54BDA1D9851ECD5064648D023901A690A3B214A5467A5D6957A31DC258A
B4EB1ED7E42578DC39AB7CA620877219C357754035FFAB7BA0776BBB1F898C2E
CA59D63832367602FEF714887B7BECBA42CD9850BE1F7C04C40488EA00CA69FD
1A9C768EA980D75538F40EAA91659975EC776641DA8CD48E7681ACB344693317
96468C33ADFFB4B9C9F721046E6251B444E831930F08F586A85131664155574C
28C98B8C04BD11E0535E9EE3919965079CF23D3B7B484E6BA3D81C4E8D31C1FB
09E0D4BEA993C6E8298EAD49735F927EB5E977C7EF30FDE788BDF710205705E9
4F0948748BC0DF5FBE6072DA902D359ACC717584065C1A2496E050DB8A4A224D
0ADCAEA863AD4064739FECC02BAD5FC17C033E140744265857F0E6D8CA3BFA4E
1C136DE78C2925767507B0E05FA1C84E749A04D3F88EDF38CF6194AF036EB309
0451311D2E0315E7E133A5880AE784071E6B3E2101F0B663DE14DB1ABF8B751B
946740BE4BF01A7ACD72330ABC9E413D1DC2AC834169083FA1EEA841E5ED4DBB
C73231DA05B8B2A0DBE1DA08769C8BC0E182385853BA36522CFE03377249BB36
F27129E5E93EDC061D348F162C03BEDCDF052C6776B627A600BE050E645BEC59
B1DB14A6EECC6AF8FDA7DF54973E9F237FD4F509708D4C043017B3ED999D79D9
06CCE3DD6D2642911FB5137597F9697B34F364EDE7648A99D75B0C6E5665DF19
3233FB4633FEBDFEC77B2D7410BD44BAB276A22A7F706EA676E3B32BF69E4A1F
F27FCF565E8219C397D246BC15C0F4E46BC102A5371334CDC01EFB707AC25F7C
9EC4EFA511952C6F3ED3A26B7E8BAA8EDB383DDC0BC6740305C4006040DC2BD0
DDDFB684C57458BD2527808DCC5C70B9B6835CC697BCEA1E3B3DF163CE00DDB2
1095A28DE97A6A7C0EDA3E239C23A9BC94D2BB2581629D0C9CEE52EAC5415682
32CEF707373F07E753AE55712F2E5C5D07D84EB3FA60EED514882C79251115EB
490BFB9C965B8D886352EA88F4538F64D0A08C138EAEE72D20F59CBA547FF68C
17B43A9DBCAEE0CDDFA60D1C41E5D2321D9C87D0727A88730D6AE8D68D1D5B53
0C884868B7868772430D9A0B82D4C0E326AF1777FD532A369531C4F38A56E588
EDC522B8682FB988983C1298ED156A0881303EB6FA40F62EC9CEA9092D339FF5
C8076DD23496F7739B7AC62EA37CCC1DCFA6067B19044BD68048F44664D1AC51
9CE9B1A2C0601C57F5B7B1717C456ED996C6B9DE9E1771A81D118AA458EAD2F0
7C2FC32BD8C69DB194030EDA74259DE884C96BB923B1EC8208BD7DCEAB0FC229
36292B7D758B40E87EFB947F6EF31DCC61CDDFC39A27718081913B63E6969C1A
2E0A8226817F537D5034448653395BB0F6F040352A877F875BE5113B3CC5C384
E1FFF8996D4287293DEA96BC70B99CDA0699595E3D66AE1107044B8F10BEEC97
AB3161CEF742D92E6155A7ED352738AFD93AA2B545716DCEC01F7A80C3ACC17C
B6A528591EF09EFD0AC01C286AE887979C2FA424A13E91220E40F1187E46A7E1
CDBDBC5A0541FF5E194CEC0F3A909C9E8EC0A385D4A16B2BECF9DC186E0B3479
EC564EB9E63BE5CD7C0286D6A0CA26D77F403C06D65B7394BF1FC7D06D3FCA49
DAFF8E6C6A79D4E8BFF1463DDD942178D252686D6685A64DA21CE46D1EE38D60
03BEB288D35EB11730B3D450F35A5681980B77285AF53F0C37CE00142A969283
EA26038579CEFDB790588725A20039A6566635F2328E9CEAB7009DB20905E27D
47F0624CC89AC82466ADF5E032058F1FFA5FBFF226D3739A9150AB31AA85EC4C
4EAB9167F8A268857C7C013561FCE2D5CC58CFB186696DB6EE551326C4450B4A
FA8AFB0FAE8E8F1399304DEFA7BBE40EE65BBA5AF39B237C53D32176E0B17A5F
655AB092B2CC43211B9B6F9110AD2795D667D3E495794B2EE284052ABE342D42
D52C383193734662065DD5653C091F958CA2F70B882B5EFF2CB573B8C287112D
2AD99FEAB93017F0FD74C95042B4E88B99BF90C760D537A5F601A5C52EBC1C6A
538AB48C7CF874F7614562322EDB6B87A3754B4CD266B9B4E40E5BCC6F9D38A9
8AEC711A55C6C0D8C4939BEF42166C1B312E8C20CB3F080B08A69416DA43B711
C1B4759C59A2CB5645DE059368B5AFEB6756F385F6BB6116420CFAAE8DE28CFE
D91459D645C92FFDC31792D7A3034BAFB367CE721AA7121C80D154E0955DF11A
E09D3AD2D7AA13FDD13235C6D108916318648507B20F4C7F0EB0944693E0B9D1
8A14E9DDD500A588EC97AB519981AC8E76FAF802C174E1A50B703B5A9586C03F
C96F53AB319CF38A1BBE0C7FBEA056326E41636E17D93855AB2692269E14A11B
A6A5BC7DECE20029034C88696777748F5205B1E8D3345EB3D72595DA20999469
2572B00ECC1EF8BC3F5BEEB210E4A52724E729C277E902195DB14838653245AA
60D404B3187D0FEB65CF565A912A654D7FA85F2E06AC34A1963C88484F620003
3392BBDB3D0B7724D12DCD08C323F8920A6BC3812322B8BF3B64173D827C5D4F
2D6944A68175A656514425E96DD970D81D4E941B8A93AC42FCD811F7C7966D21
12DB9A3120411A82EBCE52AFFAD95E18348CBAE03FF8269ECC9C3CBC78B6BDB8
255F9F771F4DF75FF3339974B377BB84AD85C2EA398861D4FC7989EE78FFB2B3
7BD4CB3EC67FF81E7E675E33DF12D2DFA60982CBC90F930688C94329B65E14F0
65B299D96938F3FDF31D90D499E39E83E4AD91AEFE55D4A9117794FB0DF0D9E5
64C44EC932424FC707DCE60BFEDEFB8BC7A1AEE0A56BE8085D76D15EB463666E
0802C209D365B57F677A92DCCC2FDC7D9D38A8E9A887E9C2F9C851B762DECA00
97C31BE05D7E582F3777E1EEFEC6A3066883AB1D2D1A624F58B382C2FE2DECA6
AE8458D107C9DC1D4D8A059876405158D9422E934429B55AE8AB2104226D4929
EE7C9DC63EA8F9780763E889B13FB2BC0F992150FBCBB57A61678941A29AEA23
86CEEE705025E4C3C51BC3E784E53A157C5192135A7055198A6678913D0E2591
E896938B584450D9E008CDD0202DB1B3CECFDF6C30433079988159D4FE0AD659
F75DA3AC2A2BF8AB44095DF77B2944603F47BEFFD06259B256CD1A08F62A5533
4AE7040D28E2027A98BF9148F4B1118179748A71164A0C54D49D520611165AAF
3711B005AD3DFBE56FD608D7EBE52F670153C12D459B6D919E9782026DC6A0B4
50AAF945F0281B5A24CC391AE3E1616B5B5E4B670FA2BC64D7FD59BA1F9102D5
A13492C763050D8E3ED64E59297C3A4D95D4D5188EBD111ADAF13004B95BB6A1
F91E0A34182971A143737D515EC7EBDAB4AF1ECBA1C6E90B4B6726FC81BDA50F
C3126234044386036954E9BE82394B7893BA19E9B52F29C4A4A908677E909606
528BCB2CC60D4001A032465003A5310E04016C3AE50698C63E30C2751FA0C386
F50D2C9FC7F252AD669BB39A19492923F15CECF5CDC5C944756DF6511AE59142
12BA387D89E0A76B65FC2E3E2F572F339F48F22FBDB31B32E27C8600DD7695F1
FEF8041C8357BFC56893182C034354025F5404AAB4EF904FFEF935954AFB9BD2
041241B1BC8519EB6921C1425C9328C360FD1FFE12027F79F212F19C2A54F995
DC870ABBEA04BBABAA8BE01DB2E526AC429EE5BB7DD09C9B2F9CF07D450B0C05
DC94EA274219DDCE0C4FF0EA209B5AAE73A04E1194CDEBD673BD2C25E906446D
35CFCA31CE3807506FF35794D027CE342A66A4C27C0A4243D8AD0BAFCF511263
B3A79824A37390769F2EDD55DCB71F7BF097E4599421048329FB29BAE351A07A
FD98E1E4278F219307C670A0EC3C0082531B743058E2AC340C0B9077AE267FFB
931B4DCC6D7122DFADAD09EA3A0EF203F2C695AEB08870DB22CBA2D2D284F098
26DAF8507BCAD3A71BA2D3F48A9951FD6B2822789384F7D9EE82641B2F9D76CE
FFEF39857DA6CE0F074DF55E0355AA31705F62B0E0C454C8C57735031B7A58D1
CC858BC7B4D3189EC47C7C4C9C8FA62A078F4F1683F37E5F7B8FBF22416095FA
79F354B447141CD77CD1AD6B8D17AFDDDF8365C942CE42FFB593697B786ECFEA
320CD49838B5DAD1C03476F53E778AADBE7A7DEEBAF82FB456AF386968075705
C5F72EE6028B3EF04E8F9515381036DCBE190745456BCB4D2B769B5AB1AD492E
C2E938F27FDFB4A04177FB9384FCC804315C355A4BB092D34EBD78372EB52861
03B7E529108C25F0B0A3F808E890D1582864CFF3AAE36FE01A3E5E6CC49C79CA
23DC10ED8071EDF520FBE4C835B057D5953BA549C0742D661C8D6BA1F3B59405
5F56769DE68B5A430916F45E36D0FBB705DB05B1567601F30C7FF2B337B41232
EC7CC4F97EA3795353BE2AD76F615F8936F163FAF95D90410021306E10589DED
76D36F643201F5FF971324F72468AA5AD6D13FFC9817D8E6C27396ED7A19900D
A297793079CBAB764EE2CDB4BFB44B8B81D92F63481CCEFBF4264ED8900D17D9
64D11C226D966A6798BF0B806FDBCCA4518DD1E541D723E41815EA7476356F91
248AB53FB92DB9DA8CCC5D4C8BAB8FEE3BB7AB14D465CB0E4F622144E415EA54
E08AF6B93B5BBD0F42D0CBEE87AE6D68A4C0336BE904ECD31172AB56D3CB4062
A0131EE8196600DAF4DBFEC49C4BD62027E9CEA0F386D14195BEEFB3B9A269A5
87593874C7C6A72CE792F5C883A8D0A79774CF420783677F8866473BD4828B56
BAEEFC0E0DB0CCBAAC72E5937241C4221FE7AC577A2E135403EFAD52472E9760
2424CC86C82450C3D53730EE75F1CE4473166C04DF344F9F3A90FFBFA4BEB47F
4F7572F11F702BC27EA9510BA2D4BAA94F59502DE7D31A2BB9B1494A567EB501
6EA36C45F006BF7BEA6217AD612CEBA426EE4DDAF9A20FB32533CF4A100B0C0E
C8E11F1496E10B4AC47B7AA1240E911E90918329C51B5B4E9FDECA7817AE2B29
3114B07A729355B1CA091C2E9BC6059F3AA22CFDDC29409ADE33D6640B858627
43A6451AFF488EBB29B293905951355C4D4A4F65BF1A71EA7E46B58DE9FE4AA8
0F52668004A58C8D2BC06C5F920C866AF0FC76BC1B1FD420957905FA6172F75B
C7865FB71DE3F49E2D6E5CBA9F47D591269CD9D9B9600F500E3EB0EAA684D03E
7415C80F0190E33399F0347B27755E9200A33474DEAC4ADB7FF6B751D3816531
ECDD6CF5BEC042A999E8ED6A11315A7926538D22E4854A274C7478DDAB6B10F2
CB000A0D128B232D9A9E24006A4FCB9FDE7EED6688DEA3B2A11DF0545AAD1344
94AFBEFD9D51E4DADF8F24A9DEED6D18D629AFF0357AA99B59A29F51E7340E01
D5876BA691F65E7315F87A826B3A258926C04B94AF46A320A0932B65C1FF7776
FC2AD3CC8496259C1F58563A4B14DBD67299AE5B408F7C31A53640E45FADCD43
61133B9769CCFA21FDF0DC77CA7AC67CBFAA34A116281B01B6D90EE76A7C997C
39DC72471B7831EBC8ADB7492BF5BA8160DABC41DA079DA4A751DF9A6109796D
191BADA591816E90A4E899E0B7AD32E22A432EE212F87AF3D6C9A578996AAF95
7B963C159EDAD2B14BBA9894075CFD59AD713BC6DA67172869F9E4359B75F27C
0256E0E8995675B9DF64FDA4CED248E08BFD87A911D1923202825FE2567C7459
D83199040AB64EEB27424B26CA8C6C74FBF9E64E2EEBE0E82A93C1D6CA5EEDA4
FA3059151C4CBCC3139AC539ACBDA49DF3575CCFABEA87FF6E8186B648E9FE49
A53A3812D7DBF47D9E8A2D353B48627891C696083C2A380E5EF5098DF574EDDC
C3F0F4130A40AF8079FE4A63F8243ADF0C07C6C16AD3E33C17669D89FCCBCDF8
423D79C383ABB001990A07F8B008FCFEF55C2FEBF81838DB34A0F6F874E8BB47
973D8D20D858127601B32A15B6727F4289C6C81A102A7E38178ED36221E23E88
76F02ECD0ACEEA511B20D4D5F72565C43F022989DB60C6599D53A3367BA3C28D
B6183AE68F6564178DC0367FF2B563D1D646046174516991A196A915CE6918CE
B96E3B151C8AA138B59EECB77CB5BE8C9A7418389C6BDDDDC754114ADA73978E
9616FE099066621A67E74232CA1AB41DFF39D1558AFA51A6FDABF03BB3E3B0FE
32175F338397FCF8347448BE6E53709C51019EB4FED063631BB3176D06C17FCC
1069527F86804DA275D8C6F885EA226ED41247EA6A3F7747839BC4D6C9E9BC86
B140640EF54E8B5A6DC2AE4C627276365855F11CBBA6D747BFCF45A49045BDF7
8DA021349902332707106BBB5D307960EF16351ACA662221E1EB8A14C45F6900
1E24261089F5EA4C2C5059BFB3F5AA27D10E337086144AB09286BE3825A6E497
487AA4432468CF994F92CBD51443ED5564F7248B3AA76C9E30FF31BFC9CB7232
89282191932D1F99D05F42C8CD14E65B2068CC40344D489CFB91D1E9D4911967
C11B5470133F24B7EB6B0A4C88BD415FF70F0BF582E05DE31ADAE0B467F3CDF0
CDE12200B62FD553359825162DDFB5AEB07D0372ADB519233DD4BB1E32E3308C
0665DCDB8453CCFADA24266BE73CA1B36B4B2F2784D24F8B1E3B1E07277D77FC
DF7E4E239BA6F6C7272B77E369C150915AE1A7B21172D02E3D78E253519DC094
11034B25DD61707292E5C5A6EA04FCECBBE13660D5360139F38D1C9869B878D1
2E4DA9E19D723986D7A820D03FFBBCD41AFBEEB764E93FADD0A308C5B83AEB41
64DB120EA26E12DE2777D5CC84335A776EC13A25F0B85F0EA2FB54C4AF675E8A
439D4D1FC4034B7B00924FBC7A164417237A280E41FEC653F131CB4AD5EE08CA
3293FA4F4C6B851E02E5912DB8937D1A4497FC262B6D2B266FB7345BA41EB70A
BE3EF27CBC6F12EA3B2680901393FE87AC239F5DA6BD25908C20527C35F23B2F
B06496EA462C2031D3C4FE7CA13C47550B39DF3DBC13329090DC59354FBA9BE0
6C70A3D6471A1F8D2A1F257E423086707AD2510CDFD0D1DB3168F736647968BD
A608B66BAE07DEC4257E7C6CFB158905238F53B5565761668A6EA34CABAFA33A
79A0F09D23C61FD5E78CBFE7A6F095480314679B3B196396E0155C3941E7C204
40AB54DBC904C56F6FBBC63A744DA0776A594A9275834F2E56C9A5C9BD35B8B2
88FACF7A68C932D2853045D5A283D7A2C7CAA60C3A169EF907F74C96954AE3C9
4BD04AC854BFBB3D873D26672DD8BC9C4DF4A034CF2FA7D9FF944DCCE92FADA4
6EBE4A677B979E4739AEE6D7F0F17E613C8EB4385862257D5F9A763FAD73966C
A2B53DB31F0659208BB467DEDED13A24A54B466A6C6F2A78A166ABBC2E734581
506FBF423892110DF214C7795ABB3E0B74D89DBC02EA14FC9743F598E3281DFD
253D08A28F4F965C8009F2965D6AC9C1B17CA48DFE86F1A234FDF8ADEB552B7E
7E10AA577ED3D559005C7B11E20DF09B4D1B004E09B4CA8677A959917DF9DFE5
A1678B9658F8649182BA4DD7D16E5DC259E3F50837036B8C0C6594B95B3D8EDC
0ACD268DE68310F453DE2305088E8CF3615342A3944DE09291239E7CFFD239B9
09FD3907279BF57D4634F96E28C1F94FC02C79B3E9EAAE86546D798871D0640D
0ACC03CD2BD48F18EC823A5D4FC58E7B4B80EE209CC66F763542D242050EE1FD
5980C4BAE5F79C3543E3592283C6770B4087ED9EB76ABFB567731D1FBE56DE14
5488C0306C6EE589C2E71F0433B9B823929EFCA683A83C9AD337F4726906EB3D
588F93D2104797EF15C2A291A8A4132F4D574134DF098958044139C99AB8C5D4
00FAC3275DE7A1CB64B5D1B5FA98029D7CF7FDBC86DF51766E9C7E5A37B8131D
0E7217417576A3705713EAEEEE1320F333318578A66ABFCF67C881D0505BCD77
E2ABCBC82747DC91D37EB7053EF47F70A766D4A7C77052B8E4B50592004B7A91
9C87157F3D1D88FB42BAC6FD78AED20509831C8F989E562F3B216F115B58CA9C
45F4A65AD191D10EFA43706D36E58C3CD3D3E5ED6594295E2B6A268011EC16CE
11295A433299E528814E6E8D8D97203CE6C0948921CCF469407FE804B9870C5A
196311D05ACA7E345D335B1A19BD17350298B477A20551B5A6AB42AC88BB7374
CBD51F233A15310E486B0FA6BCAE45606BD4843394B093F59779FD25C9BFFCCA
3F9780929F9485A47BDFEEEC5FD38E84E77498C5087F819A32F5E471C140BE3A
0BE94372D46AA0FF1A8B742ECF1421FC2C85ECF7B151EA73F60DCCF0EA376228
12D29512258DC00922DE031A5C7C09EC90527815C05CCE9D7F319478F2C14EB5
7363A2824DA75818EA1D74F1D755A63175C6A7F96B1A25898130FA92AEE970FF
7AF33358C3B347F2EA01AE1B3A5A1FF5F18CE5E69FECCA950663DDAD6FBAD208
B9832A48BD10E6E8ADCEC6146617D1A50217A80ECE4BCA40A55B7274B02C9856
56769378655FF0F36B9586CB4D5DB1A1AC8CD543C0FDE9B95ABE1A326CF0EE85
EAA515733A0DA8A203CD48D631D13AEB86B1CBAE57668CC9A2A995974F312C6C
6A8885A281095990AE48656659F9FBFF25EC06D195F4686CB36D8BF2C4FA7C7F
1AE28C79B473E3D11D61D3D5C0C0008366F15075E77111C32D8249DFF80DA712
FD8F82461A3CEE2A4DFCF0380F70173846B0136D55056BBEA319409BF8F416D6
DC8B50E5E5425BB214CB6E539F2FC7C560152395D2843A59BEA62D906D7F33BD
B8AB11D7CF95235C731BBF7DCBC246FED0186A6555E93CA8E6A4800687063A53
88CB75D0DB1C2DADE256D18B389EE05E9EDAB9836B8AE524C3812FC809137964
30CAFF19340648959DBDB014E64B7E961DE7235255F3269FE03D7D12C947C7D1
724EA087CB0D5B3F70F3DA4B974349DD9567BEEF8A4949575EA592D393F94EBC
679ED5F7A7FEF9E1437B4C8E3C3F77CD9BDF56AE7E6687980F2C671C177B2249
192786DB13D4078B48063A4A2C71FCDB8B2B90950D25983C35FBCFB3FDF82FC9
7A22DA2A2FA6AD40ED08030F6B2F79D48E002108D41E53D85041432C2AA23F86
0F9E246166DA3B5D38866AC636916B59BF2BA91DDCC8CD716476F0A8F821A72B
985436E51197AF297308F805750406F432EEE65A81D5388E68F124EDA8543972
CD19CE5FC8FC8904930155CC342AC5AF5BA3286FC8E0D1630291C06D00E9B4DB
5DD529302CFD7137EAAF9CC59CCF2395184C5A25E99BD2B04B7A4265D8BBD03B
49CFF08A88455AC6BF4B10AF39EB457D3AD1C7B7107E9F53CC8ED819EDC17D28
082CF78B811F47EA29AA61382DF986650746ED75B8697CEDAD765CDF45A378AA
28F1ED90A133FF4D140591E882D8CD89B214F2454E7148B46D5D0747C3BAA813
738C7F4CE5A989A5FA1D855FD77BD558D5572F35C0145AA89E10E0245B7FE3DE
82C48AFABE7E1C0743903A6831F618EEDB23CDAAFA6E707872C2FBE2D31ADB85
0B48E13B6A64B01D73170495C78FFCD7E544A9D88DADE01A86B14C2FDD28B0AB
951C37BF4CB687E9ECD9C34B39AAFC7F7A4E3478E02AE28BA6984E1D79642E2C
90637B0D05F4D54E3B9484F9B6E9B8AB37473DE377D3D8B268F31B384A35D7C5
8A01E7C4D8A0EDD3E312EB7741A9C56A01C08079AD27AD21856393279F33BC0E
057F676D4300E4794FF3E39BB1182ABCB5513BAE60299A282AFE64A2598358C1
6A9476D5619E17D56935561510CB7A202EFB0E6CE3DA0FFBCB96BE3587A75418
4170A40B204EF4FE433A0ED0F79CC69B03FE77DEFDD68AD3BDD2B6C6D48D2642
625949CE66E1A57B6DEB702E37FADF6421C75A0E955E21D087A4DC7D42B8FF10
A3AC570D7050F3BD2040FE171315C49FDCF28E8ED617FFFCE5719ADB819D9443
54C9A8A0B13FE62E34BFA1EA21DECC848C133C853F4D02E0C9EA4889D1F468FF
9C4AEFFDB313C82D28A8B17A24D9C8F94CA2AD0BF04D7556599150CC1E2503FB
85ADD5B1229F6C2E98B3BEE4E77A33D6D8C5D81D9C0172AC0EB86B41EB4FA0D3
950B66A3E05AF5234A10369D3152F29115D1CD77F943BFC1D4D4B4F3D36F753D
E341F2E63053FF95B2D0DA24ED09C25C58B7FB41DDC1CCE0D54EFCE64B39DDC6
322B4EAB43B7ACEEFC23D07CC5E9485BFF1450690D8BEA889563295442BC2CE5
AB435491DAC19AEDDBDFF0481796125DBCB0AFAB589374EE6B1659F5CDBDB85A
A6C00F67C801A30DC66247E610703AAC8C6AFF7F84409585FB62073108B09558
0BC940D11D8D035DFDC55CA726EB14F0F0C44A541D6790B921CFB2093E922F96
38D648D987FCAAD7B363AA526BDC84719B80AE67573854CC5F679F5DA6DF6983
9E8536EFFB376B34021C6EA8FD094FF10AA52D3A548A33C4E8879B4E658EA5BF
CB19B5E531FCCCFFD122F1E9708381E4E65D34D346AC965FEA33C89BE0CDB375
B0FF39B6AA8F4CE5AD4CC95533D573F7A6FAADE6416693E886AA2CC50585EEB8
00DCF3C4B5EC242CDC4E36361A8EA361786A81B246A50C2AD3DFE7CC487E31F7
C6CA2AC02448F49AFFAF36BEF2DF99F2B6E4D100CF8D14E77FB39D1C40AA9F12
F8A67C2149B6298AA1737091B83D023A5323009826BBB70C7AF2E28786F233F9
6DBD7DA4A5D38B6AEAF975FC044CBD3F888198871223E2DBB79E0829455362CA
8E89146B4D1FD58A5807E56226E01B6CAB527A2F60811EF400CFCB4D31C8DA23
0EF3D4C92C72A7A7BA1029F6AF93D0EF996914B2F82DC6C3B8596425137130B1
C460DBD57F3BA77A05536A6B611552A15C7F1D63CF1AA1F4E82694E26212A368
94D3E133574CB2BF862EB14DA3E43F231C5E285B171DD9050D79F368621113A6
F508884663DD8F9B68DAAC9AB04A819E4E694BE02496EFF55A882120BEA91F5F
F82AEA7B846BD1AF32344DFC34BB201D68C9C5CF8D7C0F0948CBAF0570BA8197
2079E9E3956F437A45DE7A62FB3B4F681951F1998528FB3659C5C1FD571CE6F3
5E932F1B3B748FE27F1B7702879893895D74B9DA0DA8CBE5222E5DAFE3323A0F
86A7E1D5F4492625660B3DCF4C9E5D16BF1BD6D6195AC8A32E3E205F03202D83
6FE52E48DED4B899461D7D9C91752473F9C0B18807A39F45286C8C2DB3A1B408
DCE723067AEAF841AC1F3D19D8CC7833E0995B34FF641BD92C6EC16CBB098691
29B37AFB805BC03249B76E9C43250BAA451AECECD948C7130AC805CDC6BF11CC
BB037E5AE6A296E55F493B9D804D9FCFB2F89CBFF3762AB45A1E36A8EC853E9A
4C924B92C2374AC9E0CC9F3FD59A04CB8420D01DB6549813C8D229D859BB4329
9EFE32B1B0F8D69B877F47DAF795A38FC9BB3A9AC6C16DBF17ED541A001E1170
D435519C65709A8B5AF5392C00A059939729AD5E8B6E93C86E0E8C712A249805
2C9AF2019A282357F54B2E442AA271E20E43AFFBECCB5811B8D526A336166410
6DC7D60957794B360D2A1478D3FE4DB6AC61D54571D359005A1C17387CF4674B
F003225537A63C1DEDA441429475327788B02EB083FE1438F7371D126047A6CD
9BA9560D1645C600F386BCA9966403898B1681919FBD9F8D252406FB4D91D44F
653DB1ED0AE116F2C9C0243C4C1C7DCF30F832EF8CDDE12F2C4A26E0FBA93073
7E85A04CA9443DF0B6B50C712B2B8A68E559143889DE46FA9C28C0D961820F23
A8F1E3C6FABA98534013BE6857CEF9CB8A9A0D5E321D58BB27F30EAB7450E8AC
A3FDEF1B886FDAD2278960D4444D026D9D52DC0D42EB1274F9C313C88906AF1E
AAD3D44B02D2B907C9044CB5991F413BF937A1BF597DBFBFC166FC2B3BB54F9D
04CF97BEB21FB8119AA733DB3F603C7B7428DD3B5272BECF2DA9285F80CBEEB1
BC6ED549F0F662252CD5AB3DE17E8B5C3A9744EAAC6B690C72D617C32E1BF194
FFB63A6851D7C6E843D55D0D492A309DC5A9AF8F9CC40200D93373EC87FA7679
406C22ECEEE4A79CA2A70397701771978B5B6C45D7F4E926F4913C86B6EAA36A
10E8FC530C9F1E90FC5E1227B2B3635E8F63F805A48A6D0C4BF559B911F320E9
477379C75E4E18DCC8F9B9F66876A40C9A3A0D27A6547BB12A234304F148FC56
DD8DE09B81E12F669773437BFC56A7E3C59A96C27C52DDF7FAF943F5BD411CB2
79146F6FE22AA87E99600DE5257D36B634465C5F3784D2A555C5B7D522F43C0F
BE7F7D761D58B43376964A8A557CE86D12A7FD89FC3A772B77B9EB434FD26D14
CE8BCAEFDF79C922F0649689925057947371628DA9D949F37A42EC29377961CA
BFA32DB66E0EA8D497DCE29C9EBCBB1976CF9C775C631D0B0976E9D9D2BF1684
9DB5FF43A8D8F603868B83282A78083F6D9076F2381E49D0871C4348C303962C
41C96600D873D1AB1C17CD5344FA36A0F04DB8D927427D1E50D28566DDC53F99
0449BC4D03E1D608333B3B310CA24736C96BEB2A2974F82DCFE3561CEF2314F6
33FA2BAF685187754AC614466825067B955FAA2EDE91B2C5E929889B0DD8D3AC
1C57AD038F302B7A9BBF655FCEE9AE776BB4948FB501B15A0B03427C9C3A4794
A5330D3DD42BBC67BC66D97AA2C438DA65F5A9EDC24661ECAEF6FBE501232A10
492283081EEF6C0EE8388A92B6EAAB8F6A1E8D430E37B42FCEC1129CC13C917A
76041EDDE0528EE94D3B9BE9EA22E7B1D51D7CF5D66E81CB7316F278E879560D
ACF34F48C917BB2EA82AC436BE41FEFAE6A28A5AC3F60A6AB7258E065D6A6786
0F37FD23FD77CF0C5BB7C72B28D068CC1860DD8144731D37B5775BD2FF7EAFDA
1CB5683C45295BE5382E9722B24761907F286FB6138254A9E0022B3B01E06F00
11B55F255DF0BF07A578D4B532133967EE740F151F996570816D5A9909180152
342E97C74671ACA7B43627E3AE5D03135612D0CF2DAAADF8D3D0351E90602B8F
8B4A6B35028F969C7E348F529D12305F9F8A1277DDBBD2B1DBB6F01BD6ABBA44
3E16AB923C20DEAC7CE0B8163670653FB807048C4360D8C4F7C7043A6D8E0239
30B062843E2F243A4F38C2EB74453102F4B6D97F87C9CFBB7F569CAB9852C594
739B7F24A6BA4103F7774CD1151823824D9735CA058E764991EEF0EAB7365C2A
40B6E7ECDA7895EE14967E1307B28E277C1E919A8454FCF6C40F5574047F9EA4
7121557FEA1D8BF20E4F4C0075785C241B1DE5C875174C380954730633ED1912
045084AC5BB986EACB5DC31DB5555BD3AA3BAAD7968D957CA406282D95F9BF82
93474EBAE318D88F7381B8FE6641CA054FE80AA78028CD0A097D66E7D27DAADB
9C8A36EC8AEEE5ADC1AE4CB0F9CCA8CC34F94FED65188F7A76A9DEA7F9BAD97D
5A5840F3E08C229618D2E7EFBCC51DEB6644EEFB6B0ECBC7F380E298BCD0E834
37CEC7188ABA864807ECBDFE05DF2A15B48EE568077DF6D458AEA2FB9E7EA584
9EF87E8779A2666AE0F902EF4E531E1356937ABA65865419B77EAE72DFE8D1ED
83E33394A65CB4346126EEA506B9AEA9B41EC29737E5FBF7155003DCE7670A5F
0E0AAE8DDE5356BA3E226907C3DED1BC6A7510E90F25FCD5B81033E9703149D3
5B24F006B011DBA3C22D30312EEE4198A50D440CEA9D0AB694B8400C41922152
20E8341B70DED5D83540E043039C49B38ADC1CE14A94DD0B50970B33C65992B3
61826FF443EECB1E498706AD23A45DED87872D51B532018481F5D8B811E0E08B
B030B07C5CC49A418F941826E76E83A02E33500AFFB70FB15C1108754E52EA03
49CD022A6D6EB3E24F5BEB692D1FBC57A6EDF90239345FEEB178995B29B6FBE8
EE38C1C8300B90D929599487C3846D73F7875F1C509382071F12B84F6CC45039
E409E0EE52C2920FE0D1945CF2FDED2EDF504A7A3F35727BCCAA5811A6838FF7
5C00E01E0905C111CDC5D3BECF7F2BBE855353E35B09963E8FDB34C2AEA8457A
BF6E1937502795E1E263E581AF74AB7EC2C07CFF73E1200094301CE7589509EC
05E34566C57D903FC7EE48BAF7E188BB9D384F6298A24B02B3D86A76E63F6387
154C62E09232D7731093FAE13798E11D4BF146C4D4EEFBD85262DA8B5D7D7E3F
76B2A194F2576292A1E1B1C87F3A7EBD5EDAA83699E3968F4FA5AEFFEB15E485
9C62B1DBF2400E73C4A47BA3FCBE77FA3F194321D709668171FAC32FCFFDE3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000 (hypno-101.dvi)
@start /Fa 139[445 568 529 2[667 713 4[354 3[655 1[620
709 660 97[{ AutoEnc_6paffcekw62ffq4g6cgalfhbtd ReEncodeFont }10
1106.96 /DejaVuSerif-Italic rf /Fb 134[643 1[953 643
805 511 623 583 1[774 738 805 1171 421 2[421 805 774
476 704 774 674 774 717 14[920 3[1012 4[518 4[960 881
936 859 6[409 36[553 21[{
 AutoEnc_6paffcekw62ffq4g6cgalfhbtd ReEncodeFont }30
1106.96 /DejaVuSerif-Bold rf /Fc 134[625 624 948 625
713 445 568 529 1[709 667 713 1050 354 671 343 354 713
709 410 655 709 620 709 660 9[1138 2[738 758 833 1[745
1[969 1133 735 2[437 965 884 768 808 888 847 814 799
1[593 4[373 704 3[704 2[704 704 1[373 352 374 352 2[432
432 352 985 8[738 738 786 9[566 566 16[{
 AutoEnc_6paffcekw62ffq4g6cgalfhbtd ReEncodeFont }60
1106.96 /DejaVuSerif rf /Fd 240[553 15[{}1 1106.96 /CMSY10
rf /Fe 134[772 3[966 614 748 700 1[929 886 966 1406 505
2[505 966 929 571 845 929 809 1[861 9[1492 3[959 2[999
6[621 1255 44[1090 27[{
 AutoEnc_6paffcekw62ffq4g6cgalfhbtd ReEncodeFont }24
1328.35 /DejaVuSerif-Bold rf /Ff 134[926 5[897 840 1[1115
1063 1159 4[606 3[1014 23[1764 4[1506 1[1132 1215 19[1109
1109 2[662 3[754 754 40[{
 AutoEnc_6paffcekw62ffq4g6cgalfhbtd ReEncodeFont }17
1594.02 /DejaVuSerif-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black -3276 -3276
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -3276 -3276 a -3276 -3276 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -3276 -3276 a 0 TeXcolorgray
2274 x @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.13333 0.26668 0.53333  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.13333 0.26668 0.53333  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 6.0 SLW 0.13333 0.26668 0.53333  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 509.14963 20.53954 509.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 6.0 SLW 0.13333 0.26668 0.53333
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray -3054 -1578 a
Ff(Hypnosis)555 b(101)g(\(pre-EMF\))p 0 TeXcolorgray
-3276 2789 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 4.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 510.14963 16.5999 510.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 4.0 SLW 0.12941 0.51765 0.46667
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray -3055 2370 a
Fe(W)-108 b(elcome)p 0 TeXcolorgray 0 TeXcolorgray -3276
5027 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Bit)352 b(about)e(me)i(&)g
(mindhackers)p 0 TeXcolorgray -3276 6222 a Fd(\017)p
0 TeXcolorgray 554 w Fc(P)-50 b(ersonal)352 b(intros)f(from)g
(everyone:)p 0 TeXcolorgray -1615 7861 a Fb(\025)p 0
TeXcolorgray 554 w Fc(Name,)g(member)-122 b(,)351 b(etc?)p
0 TeXcolorgray -1615 9056 a Fb(\025)p 0 TeXcolorgray
554 w Fc(How)g(did)g(people)g(\034nd)h(out)f(about)f(hypnosis/course?)p
0 TeXcolorgray -1615 10252 a Fb(\025)p 0 TeXcolorgray
554 w Fc(What)h(are)h(their)g(interests/reasons?)p 0
TeXcolorgray -1615 11447 a Fb(\025)p 0 TeXcolorgray 554
w Fc(Any)g(prior)g(experience)g(as)g(hypnotist/subject?)-3276
15233 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 4.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 510.14963 16.5999 510.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 4.0 SLW 0.12941 0.51765 0.46667
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray -3054 14815 a
Fe(Introduction)p 0 TeXcolorgray 0 TeXcolorgray -3276
17693 a Fd(\017)p 0 TeXcolorgray 554 w Fc(What)g(hypnosis)f(is)h(and)f
(is)h(not)p 0 TeXcolorgray -3276 18888 a Fd(\017)p 0
TeXcolorgray 554 w Fc(Reassurances)p 0 TeXcolorgray -3276
20084 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Brief)g(info)f(about)f(the)i
(origins)p 0 TeXcolorgray -3276 21279 a Fd(\017)p 0 TeXcolorgray
554 w Fc(1952)h(Hypnotism)e(Act)p 0 TeXcolorgray -3276
22475 a Fd(\017)p 0 TeXcolorgray 554 w Fb(Compare:)412
b Fc(clinical/informal/stage)350 b(hypnosis)p 0 TeXcolorgray
25043 22721 56 6135 v 0 TeXcolorgray 0 TeXcolorgray 26067
17693 a Fd(\017)p 0 TeXcolorgray 554 w Fc(NLP)i(&)g(meditation)p
0 TeXcolorgray 26067 18888 a Fd(\017)p 0 TeXcolorgray
554 w Fc(Di\033erences)g(between)f(people:)p 0 TeXcolorgray
27728 20559 a Fb(\025)p 0 TeXcolorgray 554 w Fc(Depth)f(of)i(trance)p
0 TeXcolorgray 27728 21754 a Fb(\025)p 0 TeXcolorgray
554 w Fc(Reactions)f(to)h(suggestions)-3276 26113 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 4.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 510.14963 17.4863 510.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 4.0 SLW 0.12941 0.51765 0.46667
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
0 TeXcolorgray -3054 25596 a Fe(W)-115 b(arnings)p 0
TeXcolorgray 0 TeXcolorgray -3276 28572 a Fd(\017)p 0
TeXcolorgray 554 w Fb(Be)386 b(alert)352 b Fc(for)f Fa(abreactions)p
0 TeXcolorgray -3276 29768 a Fd(\017)p 0 TeXcolorgray
554 w Fb(Beware)i Fc(\020taboos\021)p 0 TeXcolorgray
-1615 31572 a Fb(\025)p 0 TeXcolorgray 554 w Fc(Alcohol)p
0 TeXcolorgray -1615 32768 a Fb(\025)p 0 TeXcolorgray
554 w Fc(Cigarettes)p 0 TeXcolorgray -1615 33963 a Fb(\025)p
0 TeXcolorgray 554 w Fc(P)-45 b(ork)p 0 TeXcolorgray
-1615 35159 a Fb(\025)p 0 TeXcolorgray 554 w Fc(etc.)p
0 TeXcolorgray -3276 36963 a Fd(\017)p 0 TeXcolorgray
554 w Fb(Never)824 b Fc(use)812 b(potential)f(allergens)g(\(e.g.)g
(tasting)p 0 TeXcolorgray 25043 37209 56 9744 v 0 TeXcolorgray
27174 28572 a(peanut)351 b(butter\))p 0 TeXcolorgray
26067 29768 a Fd(\017)p 0 TeXcolorgray 0 0 0.5 TeXcolorrgb
554 w Fb(Do)386 b(not)p 0 TeXcolorgray 352 w Fc(age-regress)p
0 TeXcolorgray 26067 30963 a Fd(\017)p 0 TeXcolorgray
0 0 0.5 TeXcolorrgb 554 w Fb(Do)g(not)p 0 TeXcolorgray
352 w Fc(re-live)353 b(trauma)p 0 TeXcolorgray 26067
32159 a Fd(\017)p 0 TeXcolorgray 0 0 0.5 TeXcolorrgb
554 w Fb(Be)385 b(careful)p 0 TeXcolorgray 353 w Fc(not)351
b(to)g(rewrite)h(memories)p 0 TeXcolorgray 26067 33354
a Fd(\017)p 0 TeXcolorgray 554 w Fb(A)-45 b(void)352
b Fc(embarrassing)f(the)h(subject)p 0 TeXcolorgray 26067
34550 a Fd(\017)p 0 TeXcolorgray 554 w Fb(Remember:)412
b Fc(take)351 b(it)h(seriously)p 0 TeXcolorgray 26067
35746 a Fd(\017)p 0 TeXcolorgray 554 w Fb(Remember:)412
b Fc(it's)352 b(never)g(about)f(the)g(hypnotist)p 0 TeXcolorgray
26067 36941 a Fd(\017)p 0 TeXcolorgray 554 w Fc(The)h(subject)g(is)g
(the)g(one)f(that's)h(important)-3276 40503 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 4.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 510.14963 16.5999 510.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 4.0 SLW 0.12941 0.51765 0.46667
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
0 TeXcolorgray -3054 40085 a Fe(Practicals)p 0 TeXcolorgray
-3276 43397 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.66275 0.43529 0.21962  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.66275 0.43529 0.21962  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 2.0 SLW 0.66275 0.43529 0.21962  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 511.14963 13.942 511.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 2.0 SLW 0.66275 0.43529 0.21962
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
-3054 42930 a Fb(Imagination)385 b(demonstrations)p 0
TeXcolorgray 0 TeXcolorgray -3276 45699 a Fd(\017)p 0
TeXcolorgray 554 w Fc(Hand-clasp)352 b(lock)p 0 TeXcolorgray
-3276 46895 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Magnetic)g
(\034ngertips)p 0 TeXcolorgray 15262 47141 56 2549 v
0 TeXcolorgray 0 TeXcolorgray 16286 45699 a Fd(\017)p
0 TeXcolorgray 554 w Fc(Books)f(and)g(balloons)p 0 TeXcolorgray
16286 46895 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Backwards)g(force)p
0 TeXcolorgray 34824 47141 V 0 TeXcolorgray -3276 50533
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 4.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 510.14963 17.4863 510.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 4.0 SLW 0.12941 0.51765 0.46667
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray -3054 50017 a
Fe(Signs)462 b(of)h(hypnosis)p 0 TeXcolorgray 0.5 0 0
TeXcolorrgb -3276 52107 a Fb(No)386 b(hard)g(rules)p
0 TeXcolorgray 0 TeXcolorgray -3276 54631 a Fd(\017)p
0 TeXcolorgray 554 w Fc(Eyelid)352 b(\035utter)p 0 TeXcolorgray
-3276 55826 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Deep,)f(regular)h
(breathing)p 0 TeXcolorgray -3276 57022 a Fd(\017)p 0
TeXcolorgray 554 w Fc(Muscular)h(relaxation)e(\(inc.)h(face\))f(&)i
(twitches)p 0 TeXcolorgray 25043 57268 56 3744 v 0 TeXcolorgray
0 TeXcolorgray 26067 54631 a Fd(\017)p 0 TeXcolorgray
554 w Fc(Change)e(in)h(skin)g(colour)f(\(lighter/\035ushed\))p
0 TeXcolorgray 26067 55826 a Fd(\017)p 0 TeXcolorgray
554 w Fc(Reduced)h(movement)p 0 TeXcolorgray 26067 57022
a Fd(\017)p 0 TeXcolorgray 554 w Fc(T)-86 b(one)352 b(of)f(voice)h
(changes)f(\(slower/lower\))-3276 59981 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.66275 0.43529 0.21962  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.66275 0.43529 0.21962  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 2.0 SLW 0.66275 0.43529 0.21962  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 511.14963 13.942 511.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 2.0 SLW 0.66275 0.43529 0.21962
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
0 TeXcolorgray -3054 59513 a Fb(Induction)385 b(types)p
0 TeXcolorgray -3276 61397 a Fc(Go)352 b(through)f(the)g(di\033erent)h
(types,)g(with)f(explanations)g(and)h(demonstrations.)p
0 TeXcolorgray -3276 63921 a Fd(\017)p 0 TeXcolorgray
554 w Fc(Narrative)p 0 TeXcolorgray -3276 65116 a Fd(\017)p
0 TeXcolorgray 554 w Fc(Eye)h(\034xation)p 0 TeXcolorgray
-3276 66312 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Progressive)f(muscle)g
(relaxation)p 0 TeXcolorgray -3276 67507 a Fd(\017)p
0 TeXcolorgray 554 w Fc(Confusion)p 0 TeXcolorgray -3276
68703 a Fd(\017)p 0 TeXcolorgray 554 w Fc(\020Instant\021)p
0 TeXcolorgray 25043 68949 56 6135 v 0 TeXcolorgray 0
TeXcolorgray 26067 63921 a Fd(\017)p 0 TeXcolorgray 554
w Fc(Self)-39 b(-hypnosis)p 0 TeXcolorgray 26067 65116
a Fd(\017)p 0 TeXcolorgray 554 w Fb(Compare:)412 b Fc(Direct/indirect)p
0 TeXcolorgray 26067 66312 a Fd(\017)p 0 TeXcolorgray
554 w Fb(Compare:)g Fc(Physical/verbal/visual)p 0 TeXcolorgray
26067 67507 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Induction)351
b(vs.)h(deepener)p 0 TeXcolorgray 26067 68703 a Fd(\017)p
0 TeXcolorgray 554 w Fc(Switching)f(methods)-3276 71431
y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.66275 0.43529 0.21962  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.66275 0.43529 0.21962  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 2.0 SLW 0.66275 0.43529 0.21962  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 511.14963 11.862 511.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 2.0 SLW 0.66275 0.43529 0.21962
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray -3054 71194 a
Fb(Inductions)p 0 TeXcolorgray 0 TeXcolorgray -3276 73733
a Fd(\017)p 0 TeXcolorgray 554 w Fc(Staircase)p 0 TeXcolorgray
-3276 74929 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Even/odd)g(open/close)g
(eyes)p 0 TeXcolorgray 15262 75175 56 2549 v 0 TeXcolorgray
0 TeXcolorgray 16286 73733 a Fd(\017)p 0 TeXcolorgray
554 w Fc(Clock)g(face)p 0 TeXcolorgray 16286 74929 a
Fd(\017)p 0 TeXcolorgray 554 w Fc(Blackboard)p 0 TeXcolorgray
34824 75175 V 0 TeXcolorgray 0 TeXcolorgray 35848 73733
a Fd(\017)p 0 TeXcolorgray 554 w Fc(Hand)h(pressure)p
0 TeXcolorgray 35848 74929 a Fd(\017)p 0 TeXcolorgray
554 w Fc(Handshake)g(interrupt)p 0 TeXcolorgray 24719
80819 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -3276 -1340 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 512.14963 0.0 0.0 0.0    /Lineto /lineto load def
false 0  setlinejoin Line  gsave 1.0 SLW 0.12941 0.51765 0.46667  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  1.0  1.0 ] 0 0 add  DashLine
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 4.0 SLW 0.12941 0.51765 0.46667  setrgbcolor  /ArrowA { moveto } def
/ArrowB { } def  [ 510.14963 17.4863 510.14963 -0.5    /Lineto /lineto
load def false 0  setlinejoin Line  gsave 4.0 SLW 0.12941 0.51765 0.46667
 setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0
TeXcolorgray -3054 -1856 a Fe(Hypnotic)461 b(e\033ects)p
0 TeXcolorgray -3276 234 a Fc(Discuss)352 b(and)f(demonstrate)g(some)g
(hypnotic)g(e\033ects.)411 b(Examples:)p 0 TeXcolorgray
-3276 2758 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Eyelid)352
b(catalepsy)p 0 TeXcolorgray -3276 3953 a Fd(\017)p 0
TeXcolorgray 554 w Fc(Arm)g(catalepsy)p 0 TeXcolorgray
-1615 5392 a Fb(\025)p 0 TeXcolorgray 554 w Fc(Steel)g(bar)g
(\(hypnotic\))p 0 TeXcolorgray -1615 6588 a Fb(\025)p
0 TeXcolorgray 554 w Fc(Locked)f(in)h(place)f(\(waking\))p
0 TeXcolorgray 15262 6834 56 5183 v 0 TeXcolorgray 0
TeXcolorgray 16286 2758 a Fd(\017)p 0 TeXcolorgray 554
w Fc(Stuck)h(to)f(chair)p 0 TeXcolorgray 16286 3953 a
Fd(\017)p 0 TeXcolorgray 554 w Fc(Hot)h(seat)p 0 TeXcolorgray
16286 5149 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Full)g(relaxation)g
(below)e(neck)p 0 TeXcolorgray 16286 6344 a Fd(\017)p
0 TeXcolorgray 554 w Fc(Cotton)h(wool)f(mouth)p 0 TeXcolorgray
34824 6834 V 0 TeXcolorgray 0 TeXcolorgray 35848 2758
a Fd(\017)p 0 TeXcolorgray 554 w Fc(Emotional:)409 b(Happy/giggly)p
0 TeXcolorgray 35848 3953 a Fd(\017)p 0 TeXcolorgray
554 w Fc(Physiological:)g(Ca\033eine)352 b(shot)p 0 TeXcolorgray
35848 5149 a Fd(\017)p 0 TeXcolorgray 554 w Fc(Memory:)411
b(forgetting)350 b(number)p 0 TeXcolorgray 35848 6344
a Fd(\017)p 0 TeXcolorgray 554 w Fc(Memory:)411 b(forgetting)350
b(name?)p 0 TeXcolorgray 24719 80819 a(2)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
